{
  when(activeRuleIndex.countAllByQualityProfileKey()).thenReturn(ImmutableMap.of("sonar-way-xoo1-12345",11L,"my-sonar-way-xoo2-34567",33L));
  when(activeRuleIndex.countAllDeprecatedByQualityProfileKey()).thenReturn(ImmutableMap.of("sonar-way-xoo1-12345",1L,"my-sonar-way-xoo2-34567",2L));
  qualityProfileDao.insert(dbSession,QualityProfileDto.createFor("sonar-way-xoo1-12345").setLanguage(xoo1.getKey()).setName("Sonar way").setDefault(true),QualityProfileDto.createFor("sonar-way-xoo2-23456").setLanguage(xoo2.getKey()).setName("Sonar way"),QualityProfileDto.createFor("my-sonar-way-xoo2-34567").setLanguage(xoo2.getKey()).setName("My Sonar way").setParentKee("sonar-way-xoo2-23456"),QualityProfileDto.createFor("sonar-way-other-666").setLanguage("other").setName("Sonar way").setDefault(true));
  new ComponentDao().insert(dbSession,newProjectDto("project-uuid1"),newProjectDto("project-uuid2"));
  qualityProfileDao.insertProjectProfileAssociation("project-uuid1","sonar-way-xoo2-23456",dbSession);
  qualityProfileDao.insertProjectProfileAssociation("project-uuid2","sonar-way-xoo2-23456",dbSession);
  db.commit();
  String result=ws.newRequest().execute().getInput();
  assertJson(result).isSimilarTo(getClass().getResource("SearchActionTest/search.json"));
}
