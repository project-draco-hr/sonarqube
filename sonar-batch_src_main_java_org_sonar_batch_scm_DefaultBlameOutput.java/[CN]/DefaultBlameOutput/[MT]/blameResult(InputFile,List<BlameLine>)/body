{
  Preconditions.checkNotNull(file);
  Preconditions.checkNotNull(lines);
  Preconditions.checkArgument(allFilesToBlame.contains(file),"It was not expected to blame file " + file.relativePath());
  if (lines.size() != file.lines()) {
    LOG.debug("Ignoring blame result since provider returned " + lines.size() + " blame lines but file "+ file.relativePath()+ " has "+ file.lines()+ " lines");
    return;
  }
  BatchComponent batchComponent=componentCache.get(file);
  Builder scmBuilder=BatchReport.Changesets.newBuilder();
  scmBuilder.setComponentRef(batchComponent.batchId());
  Map<String,Integer> changesetsIdByRevision=new HashMap<>();
  for (  BlameLine line : lines) {
    validateLine(line);
    Integer changesetId=changesetsIdByRevision.get(line.revision());
    if (changesetId == null) {
      addChangeset(scmBuilder,line);
      changesetId=scmBuilder.getChangesetCount() - 1;
      changesetsIdByRevision.put(line.revision(),changesetId);
    }
    scmBuilder.addChangesetIndexByLine(changesetId);
  }
  writer.writeComponentChangesets(scmBuilder.build());
  allFilesToBlame.remove(file);
  count++;
  progressReport.message(count + "/" + total+ " files analyzed");
}
