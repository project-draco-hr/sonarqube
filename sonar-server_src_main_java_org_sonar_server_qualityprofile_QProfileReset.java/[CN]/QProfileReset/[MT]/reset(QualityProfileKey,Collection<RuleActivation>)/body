{
  BulkChangeResult result=new BulkChangeResult();
  Set<RuleKey> rulesToDeactivate=Sets.newHashSet();
  DbSession dbSession=db.openSession(false);
  try {
    if (db.qualityProfileDao().getByKey(dbSession,profileKey) == null) {
      db.qualityProfileDao().insert(dbSession,QualityProfileDto.createFor(profileKey));
    }
 else {
      for (      ActiveRuleDto activeRuleDto : db.activeRuleDao().findByProfileKey(dbSession,profileKey)) {
        if (activeRuleDto.getInheritance() == null) {
          rulesToDeactivate.add(activeRuleDto.getKey().ruleKey());
        }
      }
    }
    for (    RuleActivation activation : activations) {
      try {
        List<ActiveRuleChange> changes=activator.activate(dbSession,activation);
        rulesToDeactivate.remove(activation.getKey().ruleKey());
        result.incrementSucceeded();
        result.addChanges(changes);
      }
 catch (      BadRequestException e) {
        result.incrementFailed();
      }
    }
    for (    RuleKey ruleKey : rulesToDeactivate) {
      try {
        activator.deactivate(dbSession,ActiveRuleKey.of(profileKey,ruleKey));
      }
 catch (      BadRequestException e) {
      }
    }
    dbSession.commit();
    return result;
  }
  finally {
    dbSession.close();
  }
}
