{
  return new DbSynchronizationHandler(session,params){
    private final Map<String,IssueAuthorizationDto> authorizationDtoMap=new HashMap<String,IssueAuthorizationDto>();
    @Override public void handleResult(    ResultContext context){
      Map<String,Object> row=(Map<String,Object>)context.getResultObject();
      String project=(String)row.get("project");
      String user=(String)row.get("permissionUser");
      String group=(String)row.get("permissionGroup");
      Date updatedAt=(Date)row.get("updatedAt");
      IssueAuthorizationDto issueAuthorizationDto=authorizationDtoMap.get(project);
      if (issueAuthorizationDto == null) {
        issueAuthorizationDto=new IssueAuthorizationDto().setProjectUuid(project).setPermission(UserRole.USER);
        issueAuthorizationDto.setUpdatedAt(updatedAt);
      }
      if (group != null) {
        issueAuthorizationDto.addGroup(group);
      }
      if (user != null) {
        issueAuthorizationDto.addUser(user);
      }
      authorizationDtoMap.put(project,issueAuthorizationDto);
    }
    @Override public void enqueueCollected(){
      String projectUuid=getParams().get(IssueAuthorizationNormalizer.IssueAuthorizationField.PROJECT.field());
      if (authorizationDtoMap.isEmpty() && projectUuid != null) {
        getSession().enqueue(new DeleteKey<String>(getIndexType(),projectUuid));
      }
 else {
        for (        IssueAuthorizationDto authorization : authorizationDtoMap.values()) {
          getSession().enqueue(new UpsertDto<IssueAuthorizationDto>(getIndexType(),authorization,true));
        }
      }
    }
  }
;
}
