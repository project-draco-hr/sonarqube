{
  File projectDir=copyProject("/mediumtest/xoo/sample");
  TaskResult result=tester.newScanTask(new File(projectDir,"sonar-project.properties")).start();
  int newIssues=0;
  int openIssues=0;
  int resolvedIssue=0;
  for (  TrackedIssue issue : result.trackedIssues()) {
    System.out.println(issue.getMessage() + " " + issue.key()+ " "+ issue.getRuleKey()+ " "+ issue.isNew()+ " "+ issue.resolution()+ " "+ issue.componentKey()+ " "+ issue.startLine());
    if (issue.isNew()) {
      newIssues++;
    }
 else     if (issue.resolution() != null) {
      resolvedIssue++;
    }
 else {
      openIssues++;
    }
  }
  System.out.println("new: " + newIssues + " open: "+ openIssues+ " resolved "+ resolvedIssue);
  assertThat(newIssues).isEqualTo(16);
  assertThat(openIssues).isEqualTo(2);
  assertThat(resolvedIssue).isEqualTo(1);
  String logs=StringUtils.join(logTester.logs(LoggerLevel.INFO),"\n");
  assertThat(logs).contains("Performing issue tracking");
  assertThat(logs).contains("6/6 components tracked");
  assertThat(result.trackedIssues()).haveExactly(1,new Condition<TrackedIssue>(){
    @Override public boolean matches(    TrackedIssue value){
      return value.isNew() == false && "resolved-on-project".equals(value.key()) && "OPEN".equals(value.status()) && new Date(date("14/03/2004")).equals(value.creationDate());
    }
  }
);
}
