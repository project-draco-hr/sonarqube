{
  File baseDir=temp.newFolder();
  DefaultFileSystem fs=new DefaultFileSystem(baseDir);
  DefaultInputFile file=new DefaultInputFile("foo","src/ManyStatements.java").setLanguage(JAVA);
  fs.add(file);
  BatchComponentCache batchComponentCache=new BatchComponentCache();
  batchComponentCache.add(org.sonar.api.resources.File.create("src/Foo.java").setEffectiveKey("foo:src/ManyStatements.java"),null).setInputComponent(file);
  File ioFile=file.file();
  FileUtils.copyURLToFile(this.getClass().getResource("ManyStatements.java"),ioFile);
  File reportOut=temp.newFolder();
  ReportPublisher reportPublisher=mock(ReportPublisher.class);
  when(reportPublisher.getWriter()).thenReturn(new BatchReportWriter(reportOut));
  JavaCpdEngine engine=new JavaCpdEngine(fs,new Settings(),reportPublisher,batchComponentCache);
  engine.analyse(JAVA,mock(SensorContext.class));
  BatchReportReader reader=new BatchReportReader(reportOut);
  try (CloseableIterator<BatchReport.Duplication> it=reader.readComponentDuplications(1)){
    Duplication dupGroup1=it.next();
    Duplication dupGroup2=it.next();
    assertThat(dupGroup1.getOriginPosition().getStartLine()).isEqualTo(6);
    assertThat(dupGroup1.getOriginPosition().getEndLine()).isEqualTo(6);
    assertThat(dupGroup1.getDuplicateCount()).isEqualTo(1);
    assertThat(dupGroup1.getDuplicate(0).getRange().getStartLine()).isEqualTo(8);
    assertThat(dupGroup1.getDuplicate(0).getRange().getEndLine()).isEqualTo(8);
    assertThat(dupGroup2.getOriginPosition().getStartLine()).isEqualTo(6);
    assertThat(dupGroup2.getOriginPosition().getEndLine()).isEqualTo(6);
    assertThat(dupGroup2.getDuplicateCount()).isEqualTo(2);
    assertThat(dupGroup2.getDuplicate(0).getRange().getStartLine()).isEqualTo(7);
    assertThat(dupGroup2.getDuplicate(0).getRange().getEndLine()).isEqualTo(7);
    assertThat(dupGroup2.getDuplicate(1).getRange().getStartLine()).isEqualTo(8);
    assertThat(dupGroup2.getDuplicate(1).getRange().getEndLine()).isEqualTo(8);
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
}
