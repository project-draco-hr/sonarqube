{
  RuleKey ruleKey=RuleKey.of("javascript","S001");
  RuleDao dao=tester.get(RuleDao.class);
  dao.insert(newRuleDto(ruleKey));
  RuleDto persistedDto=dao.selectByKey(ruleKey);
  assertThat(persistedDto).isNotNull();
  assertThat(persistedDto.getId()).isGreaterThanOrEqualTo(0);
  assertThat(persistedDto.getRuleKey()).isEqualTo(ruleKey.rule());
  assertThat(persistedDto.getLanguage()).isEqualTo("js");
  RuleIndex index=tester.get(RuleIndex.class);
  index.refresh();
  Hit hit=index.getByKey(ruleKey);
  assertThat(hit).isNotNull();
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.REPOSITORY.key())).isEqualTo(ruleKey.repository());
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.KEY.key())).isEqualTo(ruleKey.rule());
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.LANGUAGE.key())).isEqualTo("js");
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.NAME.key())).isEqualTo("Rule S001");
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.DESCRIPTION.key())).isEqualTo("Description S001");
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.STATUS.key())).isEqualTo(RuleStatus.READY.toString());
  assertThat(hit.getField(RuleNormalizer.RuleField.CREATED_AT.key())).isNotNull();
  assertThat(hit.getField(RuleNormalizer.RuleField.UPDATED_AT.key())).isNotNull();
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.INTERNAL_KEY.key())).isEqualTo("InternalKeyS001");
  assertThat(hit.getFieldAsString(RuleNormalizer.RuleField.SEVERITY.key())).isEqualTo("INFO");
  assertThat((Boolean)hit.getField(RuleNormalizer.RuleField.TEMPLATE.key())).isFalse();
}
