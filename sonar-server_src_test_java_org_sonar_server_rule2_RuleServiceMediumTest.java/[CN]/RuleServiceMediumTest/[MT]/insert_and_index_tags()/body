{
  DbSession dbSession=tester.get(MyBatis.class).openSession(false);
  RuleTagDao ruleTagDao=tester.get(RuleTagDao.class);
  RuleKey ruleKey=RuleKey.of("javascript","S001");
  RuleDto ruleDto=newRuleDto(ruleKey);
  dao.insert(ruleDto,dbSession);
  RuleTagDto tag1=new RuleTagDto().setTag("hello");
  RuleTagDto tag2=new RuleTagDto().setTag("world");
  RuleTagDto tag3=new RuleTagDto().setTag("AdMiN");
  ruleTagDao.insert(tag1,dbSession);
  ruleTagDao.insert(tag2,dbSession);
  ruleTagDao.insert(tag3,dbSession);
  RuleRuleTagDto rTag1=new RuleRuleTagDto().setTagId(tag1.getId()).setRuleId(ruleDto.getId()).setType(RuleTagType.ADMIN);
  RuleRuleTagDto rTag2=new RuleRuleTagDto().setTagId(tag2.getId()).setRuleId(ruleDto.getId()).setType(RuleTagType.ADMIN);
  RuleRuleTagDto rTag3=new RuleRuleTagDto().setTagId(tag3.getId()).setRuleId(ruleDto.getId()).setType(RuleTagType.SYSTEM);
  dao.insert(rTag1,dbSession);
  dao.insert(rTag2,dbSession);
  dao.insert(rTag3,dbSession);
  dbSession.commit();
  List<RuleRuleTagDto> persistedDtos=dao.selectTagsByRuleId(ruleDto.getId());
  assertThat(persistedDtos).hasSize(3);
  index.refresh();
  Hit hit=index.getByKey(ruleKey);
  assertThat(hit).isNotNull();
  assertThat(hit.getField(RuleNormalizer.RuleField.TAGS.key())).isNotNull();
  RuleService service=tester.get(RuleService.class);
  Rule rule=service.getByKey(ruleKey);
  assertThat(rule.tags()).containsExactly("hello","world");
  assertThat(rule.systemTags()).containsExactly("AdMiN");
}
