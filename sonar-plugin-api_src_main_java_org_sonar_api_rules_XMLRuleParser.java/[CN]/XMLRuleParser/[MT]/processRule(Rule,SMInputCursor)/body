{
  String keyAttribute=ruleC.getAttrValue("key");
  if (StringUtils.isNotBlank(keyAttribute)) {
    rule.setKey(StringUtils.trim(keyAttribute));
  }
  String priorityAttribute=ruleC.getAttrValue("priority");
  if (StringUtils.isNotBlank(priorityAttribute)) {
    rule.setSeverity(RulePriority.valueOf(StringUtils.trim(priorityAttribute)));
  }
  SMInputCursor cursor=ruleC.childElementCursor();
  while (cursor.getNext() != null) {
    String nodeName=cursor.getLocalName();
    if (StringUtils.equalsIgnoreCase("name",nodeName)) {
      rule.setName(StringUtils.trim(cursor.collectDescendantText(false)));
    }
 else     if (StringUtils.equalsIgnoreCase("description",nodeName)) {
      rule.setDescription(StringUtils.trim(cursor.collectDescendantText(false)));
    }
 else     if (StringUtils.equalsIgnoreCase("key",nodeName)) {
      rule.setKey(StringUtils.trim(cursor.collectDescendantText(false)));
    }
 else     if (StringUtils.equalsIgnoreCase("configKey",nodeName)) {
      rule.setConfigKey(StringUtils.trim(cursor.collectDescendantText(false)));
    }
 else     if (StringUtils.equalsIgnoreCase("priority",nodeName)) {
      rule.setSeverity(RulePriority.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));
    }
 else     if (StringUtils.equalsIgnoreCase("cardinality",nodeName)) {
      rule.setCardinality(Cardinality.valueOf(StringUtils.trim(cursor.collectDescendantText(false))));
    }
 else     if (StringUtils.equalsIgnoreCase("status",nodeName)) {
      String value=StringUtils.trim(cursor.collectDescendantText(false));
      processStatus(rule,value);
    }
 else     if (StringUtils.equalsIgnoreCase("param",nodeName)) {
      processParameter(rule,cursor);
    }
  }
  if (Strings.isNullOrEmpty(rule.getKey())) {
    throw new SonarException("Node <key> is missing in <rule>");
  }
}
