{
  Metric metric=metricRepository.getByKey(CoreMetrics.TECHNICAL_DEBT_KEY);
  measureRepository.add(component,metric,Measure.newMeasureBuilder().create(this.currentDebt.minutes));
  for (  Map.Entry<Integer,Long> entry : currentDebt.minutesByRuleId.entrySet()) {
    int ruleId=entry.getKey();
    long ruleDebt=entry.getValue();
    measureRepository.add(component,metric,Measure.newMeasureBuilder().forRule(ruleId).create(ruleDebt));
  }
  for (  Map.Entry<Integer,Long> entry : currentDebt.minutesByCharacteristicId.entrySet()) {
    int characteristicId=entry.getKey();
    long characteristicDebt=entry.getValue();
    measureRepository.add(component,metric,Measure.newMeasureBuilder().forCharacteristic(characteristicId).create(characteristicDebt));
  }
  if (!component.getType().isDeeperThan(Component.Type.MODULE)) {
    for (    Characteristic rootCharacteristic : debtModelHolder.getRootCharacteristics()) {
      if (currentDebt.minutesByCharacteristicId.get(rootCharacteristic.getId()) == null) {
        measureRepository.add(component,metric,Measure.newMeasureBuilder().forCharacteristic(rootCharacteristic.getId()).create(0L));
      }
    }
  }
  this.currentDebt=null;
}
