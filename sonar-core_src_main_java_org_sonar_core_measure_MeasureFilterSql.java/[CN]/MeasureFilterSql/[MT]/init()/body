{
  sql.append("SELECT block.id, max(block.rid) as rid, max(block.rootid) as rootid, max(sortval) as sortval");
  for (int index=0; index < filter.getMeasureConditions().size(); index++) {
    sql.append(", max(crit_").append(index).append(")");
  }
  sql.append(" FROM (");
  appendSortBlock();
  for (int index=0; index < filter.getMeasureConditions().size(); index++) {
    MeasureFilterCondition condition=filter.getMeasureConditions().get(index);
    sql.append(" UNION ");
    appendConditionBlock(index,condition);
  }
  sql.append(") block GROUP BY block.id");
  if (!filter.getMeasureConditions().isEmpty()) {
    sql.append(" HAVING ");
    for (int index=0; index < filter.getMeasureConditions().size(); index++) {
      if (index > 0) {
        sql.append(" AND ");
      }
      sql.append(" max(crit_").append(index).append(") IS NOT NULL ");
    }
  }
  if (filter.sort().isSortedByDatabase()) {
    if (filter.sort().isAsc()) {
      sql.append(" ORDER BY sortval");
    }
 else {
      sql.append(" ORDER BY CASE WHEN max(sortval) IS NULL THEN 1 ELSE 0 END, sortval DESC");
    }
  }
}
