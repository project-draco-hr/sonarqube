{
  xStream.alias("metric",Metric.class);
  xStream.omitField(Metric.class,"id");
  xStream.omitField(Metric.class,"userManaged");
  xStream.omitField(Metric.class,"comparable");
  xStream.omitField(Metric.class,"enabled");
  final Converter builtIn=xStream.getConverterLookup().lookupConverterForType(Metric.class);
  xStream.registerConverter(new Converter(){
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      builtIn.marshal(source,writer,context);
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Metric unmarshalled=(Metric)builtIn.unmarshal(reader,context);
      unmarshalled.setId(null);
      unmarshalled.setUserManaged(true);
      unmarshalled.setEnabled(true);
      return unmarshalled;
    }
    public boolean canConvert(    Class type){
      return Metric.class.equals(type);
    }
  }
);
}
