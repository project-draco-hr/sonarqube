{
  container.addSingleton(projectDefinition);
  container.addSingleton(project.getConfiguration());
  container.addSingleton(project);
  for (  Object component : projectDefinition.getContainerExtensions()) {
    container.addSingleton(component);
  }
  container.addSingleton(snapshot);
  container.addSingleton(ProjectSettings.class);
  container.getComponentByType(ProjectSettings.class);
  container.addSingleton(EventBus.class);
  container.addSingleton(Phases.class);
  container.addSingleton(PhasesTimeProfiler.class);
  for (  Class clazz : Phases.getPhaseClasses()) {
    container.addSingleton(clazz);
  }
  container.addSingleton(UnsupportedProperties.class);
  container.addSingleton(RulesDao.class);
  container.addSingleton(LastSnapshots.class);
  container.addSingleton(PathResolver.class);
  container.addSingleton(FileExclusions.class);
  container.addSingleton(LanguageFilters.class);
  container.addSingleton(ExclusionFilters.class);
  container.addSingleton(DefaultProjectClasspath.class);
  container.addPicoAdapter(new ModuleFileSystemProvider());
  container.addSingleton(DeprecatedFileSystemAdapter.class);
  container.addSingleton(FileSystemLogger.class);
  container.addSingleton(TimeMachineConfiguration.class);
  container.addSingleton(org.sonar.api.database.daos.MeasuresDao.class);
  container.addSingleton(ProfilesDao.class);
  container.addSingleton(DefaultSensorContext.class);
  container.addSingleton(BatchExtensionDictionnary.class);
  container.addSingleton(DefaultTimeMachine.class);
  container.addSingleton(ViolationFilters.class);
  container.addSingleton(ResourceFilters.class);
  container.addSingleton(DefaultProfileLoader.class);
  container.addSingleton(DryRunExporter.class);
}
