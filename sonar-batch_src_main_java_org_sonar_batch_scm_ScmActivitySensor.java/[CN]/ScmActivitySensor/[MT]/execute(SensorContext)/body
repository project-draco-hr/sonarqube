{
  if (configuration.provider() == null) {
    LOG.info("No SCM provider");
    return;
  }
  TimeProfiler profiler=new TimeProfiler().start("Retrieve SCM blame information with encoding " + Charset.defaultCharset());
  List<InputFile> filesToBlame=new LinkedList<InputFile>();
  for (  InputFile f : fs.inputFiles(fs.predicates().all())) {
    FileData fileData=projectReferentials.fileDataPerPath(f.relativePath());
    if (f.status() == Status.SAME && fileData != null && fileData.scmAuthorsByLine() != null && fileData.scmLastCommitDatetimesByLine() != null && fileData.scmRevisionsByLine() != null) {
      saveMeasures(context,f,fileData.scmAuthorsByLine(),fileData.scmLastCommitDatetimesByLine(),fileData.scmRevisionsByLine());
    }
 else {
      filesToBlame.add(f);
    }
  }
  configuration.provider().blame(fs,filesToBlame,new BlameResult(){
    @Override public void add(    InputFile file,    List<BlameLine> lines){
      PropertiesBuilder<Integer,String> authors=propertiesBuilder(CoreMetrics.SCM_AUTHORS_BY_LINE);
      PropertiesBuilder<Integer,String> dates=propertiesBuilder(CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE);
      PropertiesBuilder<Integer,String> revisions=propertiesBuilder(CoreMetrics.SCM_REVISIONS_BY_LINE);
      int lineNumber=1;
      for (      BlameLine line : lines) {
        authors.add(lineNumber,normalizeString(line.getAuthor()));
        dates.add(lineNumber,DateUtils.formatDateTime(line.getDate()));
        revisions.add(lineNumber,line.getRevision());
        lineNumber++;
        if (lineNumber > lines.size() && lineNumber == file.lines()) {
          authors.add(lineNumber,normalizeString(line.getAuthor()));
          dates.add(lineNumber,DateUtils.formatDateTime(line.getDate()));
          revisions.add(lineNumber,line.getRevision());
        }
      }
      saveMeasures(context,file,authors.buildData(),dates.buildData(),revisions.buildData());
    }
  }
);
  profiler.stop();
}
