{
  prepareIndex().setSource(IOUtils.toString(new FileInputStream(TestUtils.getResource(this.getClass(),"line2.json")))).get();
  prepareIndex().setSource(IOUtils.toString(new FileInputStream(TestUtils.getResource(this.getClass(),"line2_other_file.json")))).setRefresh(true).get();
  List<Integer> duplications=ImmutableList.of(1,2,3);
  SourceLineDoc line1=new SourceLineDoc(ImmutableMap.<String,Object>builder().put(FIELD_PROJECT_UUID,"abcd").put(FIELD_FILE_UUID,"efgh").put(FIELD_LINE,1).put(FIELD_SCM_REVISION,"cafebabe").put(FIELD_SCM_DATE,DateUtils.parseDateTime("2014-01-01T12:34:56+0100")).put(FIELD_SCM_AUTHOR,"polop").put(FIELD_SOURCE,"package org.sonar.server.source;").put(FIELD_DUPLICATIONS,duplications).put(FIELD_UPDATED_AT,new Date()).build());
  SourceLineResultSetIterator.SourceFile file=new SourceLineResultSetIterator.SourceFile("efgh",System.currentTimeMillis());
  file.addLine(line1);
  indexer.index(Iterators.singletonIterator(file));
  assertThat(countDocuments()).isEqualTo(2L);
  SearchResponse fileSearch=prepareSearch().setQuery(QueryBuilders.termQuery(FIELD_FILE_UUID,"efgh")).get();
  assertThat(fileSearch.getHits().getTotalHits()).isEqualTo(1L);
  Map<String,Object> fields=fileSearch.getHits().getHits()[0].sourceAsMap();
  assertThat(fields).hasSize(9);
  assertThat(fields).contains(entry(FIELD_PROJECT_UUID,"abcd"),entry(FIELD_FILE_UUID,"efgh"),entry(FIELD_LINE,1),entry(FIELD_SCM_REVISION,"cafebabe"),entry(FIELD_SCM_DATE,"2014-01-01T11:34:56.000Z"),entry(FIELD_SCM_AUTHOR,"polop"),entry(FIELD_SOURCE,"package org.sonar.server.source;"),entry(FIELD_DUPLICATIONS,duplications));
}
