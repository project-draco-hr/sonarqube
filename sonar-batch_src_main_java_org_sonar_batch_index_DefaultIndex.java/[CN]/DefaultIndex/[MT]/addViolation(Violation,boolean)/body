{
  Resource resource=violation.getResource();
  if (resource == null) {
    violation.setResource(currentProject);
  }
 else   if (!Scopes.isHigherThanOrEquals(resource,Scopes.FILE)) {
    throw new IllegalArgumentException("Violations are only supported on files, directories and project");
  }
  Rule rule=violation.getRule();
  if (rule == null) {
    LOG.warn("Rule is null. Ignoring violation {}",violation);
    return;
  }
  if (rule.getId() == null) {
    Rule persistedRule=ruleFinder.findByKey(rule.getRepositoryKey(),rule.getKey());
    if (persistedRule == null) {
      LOG.warn("Rule does not exist. Ignoring violation {}",violation);
      return;
    }
    violation.setRule(persistedRule);
  }
  Bucket bucket=checkIndexed(resource);
  if (bucket == null || bucket.isExcluded()) {
    return;
  }
  deprecatedViolations.add(violation);
  addViolation(violation,bucket,force);
}
