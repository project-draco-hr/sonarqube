{
  String projectKey=reactor.getRoot().getKeyWithBranch();
  String url=BATCH_PROJECT_URL + "?key=" + projectKey;
  if (taskProperties.properties().containsKey(ModuleQProfiles.SONAR_PROFILE_PROP)) {
    try {
      url+="&profile=" + URLEncoder.encode(taskProperties.properties().get(ModuleQProfiles.SONAR_PROFILE_PROP),"UTF-8");
    }
 catch (    UnsupportedEncodingException e) {
      throw new IllegalStateException("Unable to encode URL",e);
    }
  }
  url+="&preview=" + analysisMode.isPreview();
  ProjectReferentials ref=ProjectReferentials.fromJson(serverClient.request(url));
  for (  ProjectDefinition module : reactor.getProjects()) {
    for (    Map.Entry<String,String> hashByPaths : hashByRelativePath(module.getKeyWithBranch()).entrySet()) {
      String path=hashByPaths.getKey();
      String hash=hashByPaths.getValue();
      String lastCommits=null;
      String revisions=null;
      String authors=null;
      List<Object[]> measuresByKey=query(projectKey + ":" + path,CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE_KEY,CoreMetrics.SCM_REVISIONS_BY_LINE_KEY,CoreMetrics.SCM_AUTHORS_BY_LINE_KEY);
      for (      Object[] measureByKey : measuresByKey) {
        if (measureByKey[0].equals(CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE_KEY)) {
          lastCommits=((MeasureModel)measureByKey[1]).getData(CoreMetrics.SCM_LAST_COMMIT_DATETIMES_BY_LINE);
        }
 else         if (measureByKey[0].equals(CoreMetrics.SCM_REVISIONS_BY_LINE_KEY)) {
          revisions=((MeasureModel)measureByKey[1]).getData(CoreMetrics.SCM_REVISIONS_BY_LINE);
        }
 else         if (measureByKey[0].equals(CoreMetrics.SCM_AUTHORS_BY_LINE_KEY)) {
          authors=((MeasureModel)measureByKey[1]).getData(CoreMetrics.SCM_AUTHORS_BY_LINE);
        }
      }
      ref.addFileData(module.getKeyWithBranch(),path,new FileData(hash,lastCommits,revisions,authors));
    }
  }
  return ref;
}
