{
  measureRepository.addRawMeasure(FILE_1_REF,mainMetric,newMeasureBuilder().create(5));
  measureRepository.addRawMeasure(FILE_1_REF,byMetric,newMeasureBuilder().create(2));
  measureRepository.addRawMeasure(FILE_2_REF,mainMetric,newMeasureBuilder().create(1));
  measureRepository.addRawMeasure(FILE_2_REF,byMetric,newMeasureBuilder().create(1));
  underTest.execute();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_1_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(2.5,1)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_2_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(1d,1)));
  double expectedNonFileValue=2d;
  assertThat(toEntries(measureRepository.getAddedRawMeasures(DIRECTORY_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(expectedNonFileValue,1)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(SUB_MODULE_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(expectedNonFileValue,1)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(MODULE_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(expectedNonFileValue,1)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(ROOT_REF))).contains(entryOf(metricKey,newMeasureBuilder().create(expectedNonFileValue,1)));
}
