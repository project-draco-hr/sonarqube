{
  List<Integer> removedIds=Lists.newArrayList();
  for (  Integer unprocessedRuleId : buffer.unprocessedRuleIds) {
    RuleDto ruleDto=buffer.rulesById.get(unprocessedRuleId);
    boolean toBeRemoved=true;
    if (ruleDto.getParentId() != null && !ruleDto.getStatus().equals(Rule.STATUS_REMOVED)) {
      RuleDto parent=buffer.rulesById.get(ruleDto.getParentId());
      if (parent != null) {
        ruleDto.setLanguage(parent.getLanguage());
        ruleDto.setStatus(parent.getStatus());
        ruleDto.setUpdatedAt(buffer.now());
        ruleDao.update(ruleDto,sqlSession);
        toBeRemoved=false;
      }
    }
    if (toBeRemoved) {
      LOG.info("Disable rule " + ruleDto.getRuleKey());
      ruleDto.setStatus(Rule.STATUS_REMOVED);
      ruleDto.setUpdatedAt(buffer.now());
      ruleDao.update(ruleDto,sqlSession);
      removedIds.add(ruleDto.getId());
      if (removedIds.size() % 100 == 0) {
        sqlSession.commit();
      }
    }
  }
  sqlSession.commit();
  for (  Integer removedId : removedIds) {
    profilesManager.removeActivatedRules(removedId);
  }
}
