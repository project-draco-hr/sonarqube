{
  List<RuleDto> removedRules=newArrayList();
  for (  Integer unprocessedRuleId : buffer.unprocessedRuleIds) {
    RuleDto ruleDto=buffer.rulesById.get(unprocessedRuleId);
    boolean toBeRemoved=true;
    if (ruleDto.getParentId() != null) {
      RuleDto parent=buffer.rulesById.get(ruleDto.getParentId());
      if (parent != null && !parent.getStatus().equals(Rule.STATUS_REMOVED)) {
        ruleDto.setLanguage(parent.getLanguage());
        ruleDto.setStatus(parent.getStatus());
        ruleDto.setUpdatedAt(buffer.now());
        ruleDao.update(ruleDto,sqlSession);
        toBeRemoved=false;
      }
    }
    if (toBeRemoved) {
      LOG.info("Disable rule " + ruleDto.getRuleKey());
      ruleDto.setStatus(Rule.STATUS_REMOVED);
      ruleDto.setUpdatedAt(buffer.now());
      for (      RuleRuleTagDto removed : buffer.tagsByRuleId.removeAll(ruleDto.getId())) {
        ruleDao.deleteTag(removed,sqlSession);
      }
      ruleDao.update(ruleDto,sqlSession);
      removedRules.add(ruleDto);
      if (removedRules.size() % 100 == 0) {
        sqlSession.commit();
      }
    }
  }
  sqlSession.commit();
  return removedRules;
}
