{
  List<String> issueKeys=newArrayList();
  Set<RuleKey> ruleKeys=newHashSet();
  Set<String> projectUuids=newHashSet();
  Set<String> componentUuids=newHashSet();
  Set<String> actionPlanKeys=newHashSet();
  List<String> userLogins=newArrayList();
  Map<String,User> usersByLogin=newHashMap();
  Map<String,ComponentDto> componentsByUuid=newHashMap();
  Multimap<String,DefaultIssueComment> commentsByIssues=ArrayListMultimap.create();
  Collection<ComponentDto> componentDtos=newHashSet();
  List<ComponentDto> projectDtos=Lists.newArrayList();
  Map<String,ComponentDto> projectsByComponentUuid=newHashMap();
  for (  IssueDoc issueDoc : result.getDocs()) {
    issueKeys.add(issueDoc.key());
    ruleKeys.add(issueDoc.ruleKey());
    projectUuids.add(issueDoc.projectUuid());
    componentUuids.add(issueDoc.componentUuid());
    actionPlanKeys.add(issueDoc.actionPlanKey());
    if (issueDoc.reporter() != null) {
      userLogins.add(issueDoc.reporter());
    }
    if (issueDoc.assignee() != null) {
      userLogins.add(issueDoc.assignee());
    }
  }
  collectRuleKeys(request,result,ruleKeys);
  collectFacetsData(request,result,projectUuids,componentUuids,userLogins,actionPlanKeys);
  if (userSession.isLoggedIn()) {
    userLogins.add(userSession.getLogin());
  }
  DbSession session=dbClient.openSession(false);
  try {
    if (!BooleanUtils.isTrue(request.paramAsBoolean(IssueFilterParameters.HIDE_COMMENTS))) {
      List<DefaultIssueComment> comments=dbClient.issueChangeDao().selectCommentsByIssues(session,issueKeys);
      for (      DefaultIssueComment issueComment : comments) {
        userLogins.add(issueComment.userLogin());
        commentsByIssues.put(issueComment.issueKey(),issueComment);
      }
    }
    usersByLogin=getUsersByLogin(userLogins);
    projectsByComponentUuid=issueComponentHelper.prepareComponentsAndProjects(projectUuids,componentUuids,componentsByUuid,componentDtos,projectDtos,session);
    writeProjects(json,projectDtos);
    writeComponents(json,componentDtos,projectsByComponentUuid);
  }
  finally {
    session.close();
  }
  Map<String,ActionPlan> actionPlanByKeys=getActionPlanByKeys(actionPlanKeys);
  writeIssues(result,commentsByIssues,usersByLogin,actionPlanByKeys,componentsByUuid,projectsByComponentUuid,request.paramAsStrings(Param.FIELDS),json);
  writeRules(json,!request.mandatoryParamAsBoolean(IssueFilterParameters.HIDE_RULES) ? ruleService.getByKeys(ruleKeys) : Collections.<Rule>emptyList());
  writeUsers(json,usersByLogin);
  writeActionPlans(json,actionPlanByKeys.values());
  writeLanguages(json);
}
