{
  addMandatoryFacetValues(results,IssueFilterParameters.SEVERITIES,Severity.ALL);
  addMandatoryFacetValues(results,IssueFilterParameters.STATUSES,Issue.STATUSES);
  List<String> resolutions=Lists.newArrayList("");
  resolutions.addAll(Issue.RESOLUTIONS);
  addMandatoryFacetValues(results,IssueFilterParameters.RESOLUTIONS,resolutions);
  addMandatoryFacetValues(results,IssueFilterParameters.PROJECT_UUIDS,request.paramAsStrings(IssueFilterParameters.PROJECT_UUIDS));
  List<String> assignees=Lists.newArrayList("");
  List<String> assigneesFromRequest=request.paramAsStrings(IssueFilterParameters.ASSIGNEES);
  if (assigneesFromRequest != null) {
    assignees.addAll(assigneesFromRequest);
  }
  UserSession userSession=UserSession.get();
  if (userSession.isLoggedIn()) {
    assignees.add(userSession.login());
  }
  addMandatoryFacetValues(results,IssueFilterParameters.ASSIGNEES,assignees);
  addMandatoryFacetValues(results,IssueFilterParameters.REPORTERS,request.paramAsStrings(IssueFilterParameters.REPORTERS));
  addMandatoryFacetValues(results,IssueFilterParameters.RULES,request.paramAsStrings(IssueFilterParameters.RULES));
  addMandatoryFacetValues(results,IssueFilterParameters.LANGUAGES,request.paramAsStrings(IssueFilterParameters.LANGUAGES));
  addMandatoryFacetValues(results,IssueFilterParameters.TAGS,request.paramAsStrings(IssueFilterParameters.TAGS));
  List<String> actionPlans=Lists.newArrayList("");
  List<String> actionPlansFromRequest=request.paramAsStrings(IssueFilterParameters.ACTION_PLANS);
  if (actionPlansFromRequest != null) {
    actionPlans.addAll(actionPlansFromRequest);
  }
  addMandatoryFacetValues(results,IssueFilterParameters.ACTION_PLANS,actionPlans);
  addMandatoryFacetValues(results,IssueFilterParameters.COMPONENT_UUIDS,request.paramAsStrings(IssueFilterParameters.COMPONENT_UUIDS));
  json.name("facets").beginArray();
  for (  String facetName : options.getFacets()) {
    json.beginObject();
    json.prop("property",facetName);
    json.name("values").beginArray();
    if (results.getFacets().contains(facetName)) {
      Set<String> itemsFromFacets=Sets.newHashSet();
      for (      Map.Entry<String,Long> bucket : results.getFacets().get(facetName).entrySet()) {
        itemsFromFacets.add(bucket.getKey());
        json.beginObject();
        json.prop("val",bucket.getKey());
        json.prop("count",bucket.getValue());
        json.endObject();
      }
      addZeroFacetsForSelectedItems(request,facetName,itemsFromFacets,json);
    }
    json.endArray().endObject();
  }
  json.endArray();
}
