{
  List<String> issueKeys=newArrayList();
  Set<RuleKey> ruleKeys=newHashSet();
  Set<String> projectUuids=newHashSet();
  Set<String> componentUuids=newHashSet();
  Set<String> actionPlanKeys=newHashSet();
  List<String> userLogins=newArrayList();
  Map<String,User> usersByLogin=newHashMap();
  Map<String,ComponentDto> componentsByUuid=newHashMap();
  Multimap<String,DefaultIssueComment> commentsByIssues=ArrayListMultimap.create();
  Collection<ComponentDto> componentDtos=newHashSet();
  List<ComponentDto> projectDtos=newArrayList();
  Map<String,ComponentDto> projectsByComponentUuid=newHashMap();
  for (  Issue issue : result.getHits()) {
    IssueDoc issueDoc=(IssueDoc)issue;
    issueKeys.add(issue.key());
    ruleKeys.add(issue.ruleKey());
    projectUuids.add(issueDoc.projectUuid());
    componentUuids.add(issueDoc.componentUuid());
    actionPlanKeys.add(issue.actionPlanKey());
    if (issue.reporter() != null) {
      userLogins.add(issue.reporter());
    }
    if (issue.assignee() != null) {
      userLogins.add(issue.assignee());
    }
  }
  for (  FacetValue rule : result.getFacetValues(IssueFilterParameters.RULES)) {
    ruleKeys.add(RuleKey.parse(rule.getKey()));
  }
  for (  FacetValue project : result.getFacetValues(IssueFilterParameters.COMPONENT_ROOTS)) {
    projectUuids.add(project.getKey());
  }
  for (  FacetValue component : result.getFacetValues(IssueFilterParameters.COMPONENTS)) {
    componentUuids.add(component.getKey());
  }
  for (  FacetValue user : result.getFacetValues(IssueFilterParameters.ASSIGNEES)) {
    userLogins.add(user.getKey());
  }
  DbSession session=dbClient.openSession(false);
  try {
    List<DefaultIssueComment> comments=issueChangeDao.selectCommentsByIssues(session,issueKeys);
    for (    DefaultIssueComment issueComment : comments) {
      userLogins.add(issueComment.userLogin());
      commentsByIssues.put(issueComment.issueKey(),issueComment);
    }
    usersByLogin=getUsersByLogin(userLogins);
    List<ComponentDto> fileDtos=dbClient.componentDao().getByUuids(session,componentUuids);
    List<ComponentDto> subProjectDtos=dbClient.componentDao().findSubProjectsByComponentUuids(session,componentUuids);
    projectDtos=dbClient.componentDao().getByUuids(session,projectUuids);
    componentDtos.addAll(fileDtos);
    componentDtos.addAll(subProjectDtos);
    componentDtos.addAll(projectDtos);
    for (    ComponentDto componentDto : componentDtos) {
      componentsByUuid.put(componentDto.uuid(),componentDto);
    }
    projectsByComponentUuid=getProjectsByComponentUuid(componentDtos,projectDtos);
    writeProjects(json,projectDtos);
    writeComponents(json,componentDtos,projectsByComponentUuid);
  }
  finally {
    session.close();
  }
  Map<String,ActionPlan> actionPlanByKeys=getActionPlanByKeys(actionPlanKeys);
  writeIssues(result,commentsByIssues,usersByLogin,actionPlanByKeys,componentsByUuid,projectsByComponentUuid,request.paramAsStrings(EXTRA_FIELDS_PARAM),json);
  writeRules(json,!request.mandatoryParamAsBoolean(IssueFilterParameters.HIDE_RULES) ? ruleService.getByKeys(ruleKeys) : Collections.<Rule>emptyList());
  writeUsers(json,usersByLogin);
  writeActionPlans(json,actionPlanByKeys.values());
  writeLegacyPaging(context,json,result);
}
