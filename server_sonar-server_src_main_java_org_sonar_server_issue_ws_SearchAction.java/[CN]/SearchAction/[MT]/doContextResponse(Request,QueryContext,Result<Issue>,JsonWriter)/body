{
  Set<RuleKey> ruleKeys=new HashSet<RuleKey>();
  Set<String> projectKeys=new HashSet<String>();
  Set<String> componentKeys=new HashSet<String>();
  Set<String> actionPlanKeys=new HashSet<String>();
  List<String> userLogins=new ArrayList<String>();
  for (  Issue issue : result.getHits()) {
    ruleKeys.add(issue.ruleKey());
    projectKeys.add(issue.projectKey());
    componentKeys.add(issue.componentKey());
    actionPlanKeys.add(issue.actionPlanKey());
    userLogins.add(issue.authorLogin());
  }
  writeRules(json,!request.mandatoryParamAsBoolean(IssueFilterParameters.HIDE_RULES) ? ruleService.getByKeys(ruleKeys) : Collections.<Rule>emptyList());
  writeUsers(json,userFinder.findByLogins(userLogins));
  writeActionPlans(json,actionPlanService.findByKeys(actionPlanKeys));
  DbSession session=dbClient.openSession(false);
  try {
    List<ComponentDto> componentDtos=dbClient.componentDao().getByKeys(session,componentKeys);
    List<ComponentDto> projectDtos=dbClient.componentDao().getByKeys(session,projectKeys);
    componentDtos.addAll(projectDtos);
    writeProjects(json,projectDtos);
    writeComponents(json,componentDtos);
  }
  finally {
    session.close();
  }
  writeLegacyPaging(context,json,result);
}
