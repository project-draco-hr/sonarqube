{
  action.createParam(IssueFilterParameters.ON_COMPONENT_ONLY).setDescription("Return only issues at a component's level, not on its descendants (modules, directories, files, etc). " + "This parameter is only considered when componentKeys or componentUuids is set. " + "Using the deprecated componentRoots or componentRootUuids parameters will set this parameter to false. "+ "Using the deprecated components parameter will set this parameter to true.").setBooleanPossibleValues().setDefaultValue("false");
  action.createParam(IssueFilterParameters.COMPONENT_KEYS).setDescription("To retrieve issues associated to a specific list of components sub-components (comma-separated list of component keys). " + "A component can be a view, developer, project, module, directory or file. " + "If this parameter is set, componentUuids must not be set.").setExampleValue("org.apache.struts:struts:org.apache.struts.Action");
  action.createParam(IssueFilterParameters.COMPONENTS).setDeprecatedSince("5.1").setDescription("If used, will have the same meaning as componentKeys AND onComponentOnly=true.");
  action.createParam(IssueFilterParameters.COMPONENT_UUIDS).setDescription("To retrieve issues associated to a specific list of components their sub-components (comma-separated list of component UUIDs). " + INTERNAL_PARAMETER_DISCLAIMER + "A component can be a project, module, directory or file. "+ "If this parameter is set, componentKeys must not be set.").setExampleValue("584a89f2-8037-4f7b-b82c-8b45d2d63fb2");
  action.createParam(IssueFilterParameters.COMPONENT_ROOTS).setDeprecatedSince("5.1").setDescription("If used, will have the same meaning as componentKeys AND onComponentOnly=false.");
  action.createParam(IssueFilterParameters.COMPONENT_ROOT_UUIDS).setDeprecatedSince("5.1").setDescription("If used, will have the same meaning as componentUuids AND onComponentOnly=false.");
  action.createParam(IssueFilterParameters.PROJECTS).setDeprecatedSince("5.1").setDescription("See projectKeys");
  action.createParam(IssueFilterParameters.PROJECT_KEYS).setDescription("To retrieve issues associated to a specific list of projects (comma-separated list of project keys). " + INTERNAL_PARAMETER_DISCLAIMER + "If this parameter is set, projectUuids must not be set.").setDeprecatedKey(IssueFilterParameters.PROJECTS).setExampleValue("org.apache.struts:struts:org.apache.struts.Action");
  action.createParam(IssueFilterParameters.PROJECT_UUIDS).setDescription("To retrieve issues associated to a specific list of projects (comma-separated list of project UUIDs). " + INTERNAL_PARAMETER_DISCLAIMER + "Views are not supported. If this parameter is set, projectKeys must not be set.").setExampleValue("7d8749e8-3070-4903-9188-bdd82933bb92");
  action.createParam(IssueFilterParameters.MODULE_UUIDS).setDescription("To retrieve issues associated to a specific list of modules (comma-separated list of module UUIDs). " + INTERNAL_PARAMETER_DISCLAIMER + "Views are not supported. If this parameter is set, moduleKeys must not be set.").setExampleValue("7d8749e8-3070-4903-9188-bdd82933bb92");
  action.createParam(IssueFilterParameters.DIRECTORIES).setDescription("Since 5.1. To retrieve issues associated to a specific list of directories (comma-separated list of directory paths). " + "This parameter is only meaningful when a module is selected. " + INTERNAL_PARAMETER_DISCLAIMER).setExampleValue("src/main/java/org/sonar/server/");
  action.createParam(IssueFilterParameters.FILE_UUIDS).setDescription("To retrieve issues associated to a specific list of files (comma-separated list of file UUIDs). " + INTERNAL_PARAMETER_DISCLAIMER).setExampleValue("bdd82933-3070-4903-9188-7d8749e8bb92");
}
