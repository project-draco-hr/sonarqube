{
  Map<String,String> oldValues=Maps.newHashMap();
  Map<String,String> newValues=Maps.newHashMap();
  newValues.put("project","Sonar");
  newValues.put("projectId","42");
  newValues.put("resource","org.sonar.server.ui.DefaultPages");
  newValues.put("title","Utility classes should not have a public or default constructor.");
  newValues.put("creator","olivier");
  newValues.put("assignee","godin");
  oldValues.put("assignee","simon");
  manager.notifyChanged(1L,"freddy",oldValues,newValues);
  assertThat(notification,notNullValue());
  assertThat(notification.getType(),is("review-changed"));
  assertThat(notification.getDefaultMessage(),is("Review #1 has changed."));
  assertThat(notification.getFieldValue("reviewId"),is("1"));
  assertThat(notification.getFieldValue("author"),is("freddy"));
  assertThat(notification.getFieldValue("project"),is("Sonar"));
  assertThat(notification.getFieldValue("projectId"),is("42"));
  assertThat(notification.getFieldValue("resource"),is("org.sonar.server.ui.DefaultPages"));
  assertThat(notification.getFieldValue("title"),is("Utility classes should not have a public or default constructor."));
  assertThat(notification.getFieldValue("creator"),is("olivier"));
  assertThat(notification.getFieldValue("assignee"),is("godin"));
  assertThat(notification.getFieldValue("old.assignee"),is("simon"));
  assertThat(notification.getFieldValue("new.assignee"),is("godin"));
}
