{
  MeasureFilter filter=new MeasureFilter();
  filter.setBaseResourceKey((String)properties.get("base"));
  if (properties.containsKey("baseId")) {
    filter.setBaseResourceId(Long.valueOf((String)properties.get("baseId")));
  }
  filter.setResourceScopes(toList(properties.get("scopes")));
  filter.setResourceQualifiers(toList(properties.get("qualifiers")));
  filter.setResourceLanguages(toList(properties.get("languages")));
  if (properties.containsKey("onBaseComponents")) {
    filter.setOnBaseResourceChildren(Boolean.valueOf((String)properties.get("onBaseComponents")));
  }
  filter.setResourceName((String)properties.get("nameRegexp"));
  filter.setResourceKeyRegexp((String)properties.get("keyRegexp"));
  if (properties.containsKey("fromDate")) {
    filter.setFromDate(toDate((String)properties.get("fromDate")));
  }
 else   if (properties.containsKey("afterDays")) {
    filter.setFromDate(toDays((String)properties.get("afterDays")));
  }
  if (properties.containsKey("toDate")) {
    filter.setToDate(toDate((String)properties.get("toDate")));
  }
 else   if (properties.containsKey("beforeDays")) {
    filter.setToDate(toDays((String)properties.get("beforeDays")));
  }
  if (properties.containsKey("onFavourites")) {
    filter.setUserFavourites(Boolean.valueOf((String)properties.get("onFavourites")));
  }
  if (properties.containsKey("asc")) {
    filter.setSortAsc(Boolean.valueOf((String)properties.get("asc")));
  }
  String s=(String)properties.get("sort");
  if (s != null) {
    if (StringUtils.startsWith(s,"metric:")) {
      filter.setSortOnMetric(metricFinder.findByKey(StringUtils.substringAfter(s,"metric:")));
    }
 else {
      filter.setSortOn(MeasureFilterSort.Field.valueOf(s.toUpperCase()));
    }
  }
  for (int index=1; index <= 3; index++) {
    MeasureFilterCondition condition=toCondition(properties,index);
    if (condition != null) {
      filter.addCondition(condition);
    }
  }
  return filter;
}
