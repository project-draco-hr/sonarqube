{
  setupData("shared","should_select_by_rules");
  IssueQuery query=IssueQuery.builder().rules(newArrayList(RuleKey.of("squid","AvoidCycle"))).requiredRole("user").build();
  assertThat(dao.selectIssues(query)).hasSize(2);
  query=IssueQuery.builder().rules(newArrayList(RuleKey.of("squid","AvoidCycle"),RuleKey.of("squid","NullRef"))).requiredRole("user").build();
  assertThat(dao.selectIssues(query)).hasSize(3);
  query=IssueQuery.builder().rules(newArrayList(RuleKey.of("squid","Other"))).requiredRole("user").build();
  assertThat(dao.selectIssues(query)).isEmpty();
}
