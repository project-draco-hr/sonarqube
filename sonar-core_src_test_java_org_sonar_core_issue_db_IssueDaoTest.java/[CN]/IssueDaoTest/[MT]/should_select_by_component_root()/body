{
  setupData("shared","should_select_by_component_root");
  IssueQuery query=IssueQuery.builder().componentRoots(newArrayList("struts")).requiredRole("user").build();
  List<IssueDto> issues=newArrayList(dao.selectIssueIds(query));
  assertThat(issues).hasSize(2);
  assertThat(getIssueIds(issues)).containsOnly(100l,101l);
  query=IssueQuery.builder().componentRoots(newArrayList("struts-core")).requiredRole("user").build();
  issues=newArrayList(dao.selectIssueIds(query));
  assertThat(issues).hasSize(2);
  assertThat(getIssueIds(issues)).containsOnly(100l,101l);
  query=IssueQuery.builder().componentRoots(newArrayList("Filter.java")).requiredRole("user").build();
  issues=newArrayList(dao.selectIssueIds(query));
  assertThat(issues).hasSize(1);
  assertThat(issues.get(0).getId()).isEqualTo(101);
  query=IssueQuery.builder().componentRoots(newArrayList("not-found")).requiredRole("user").build();
  issues=newArrayList(dao.selectIssueIds(query));
  assertThat(issues).isEmpty();
}
