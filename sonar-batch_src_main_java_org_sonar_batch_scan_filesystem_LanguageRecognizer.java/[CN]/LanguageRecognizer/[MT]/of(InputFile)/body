{
  String deprecatedLanguageParam=settings.getString(CoreProperties.PROJECT_LANGUAGE_PROPERTY);
  List<String> languagesToConsider=new ArrayList<String>();
  if (!StringUtils.isBlank(deprecatedLanguageParam)) {
    languagesToConsider.add(deprecatedLanguageParam);
  }
 else {
    languagesToConsider.addAll(patternByLanguage.keySet());
  }
  String detectedLanguage=null;
  for (  String languageKey : languagesToConsider) {
    PathPattern[] patterns=patternByLanguage.get(languageKey);
    if (patterns != null) {
      for (      PathPattern pathPattern : patterns) {
        if (pathPattern.match(inputFile,false)) {
          if (detectedLanguage == null) {
            detectedLanguage=languageKey;
            break;
          }
 else {
            throw new SonarException("Language of file '" + inputFile.path() + "' can not be decided as the file matches patterns of both "+ getDetails(detectedLanguage)+ " and "+ getDetails(languageKey));
          }
        }
      }
    }
  }
  if (detectedLanguage != null) {
    LOG.debug("Language of file '" + inputFile.path() + "' was detected to be '"+ detectedLanguage+ "'");
    return detectedLanguage;
  }
  if (StringUtils.isNotBlank(deprecatedLanguageParam)) {
    Language language=languages.get(deprecatedLanguageParam);
    if (language == null) {
      throw new SonarException("No language is installed with key '" + deprecatedLanguageParam + "'. Please update property '"+ CoreProperties.PROJECT_LANGUAGE_PROPERTY+ "'");
    }
    String[] fileSuffixes=language.getFileSuffixes();
    if (fileSuffixes.length == 0) {
      return deprecatedLanguageParam;
    }
    return null;
  }
  return null;
}
