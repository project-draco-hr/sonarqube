{
  metricRepository.add(1,STRING_METRIC);
  metricRepository.add(2,DOUBLE_METRIC);
  measureRepository.addRawMeasure(PROJECT_REF,STRING_METRIC_KEY,Measure.newMeasureBuilder().setVariations(MeasureVariations.newMeasureVariationsBuilder().setVariation(1,1.1d).setVariation(2,2.2d).setVariation(3,3.3d).setVariation(4,4.4d).setVariation(5,5.5d).build()).create("measure-data"));
  measureRepository.addRawMeasure(FILE_REF,DOUBLE_METRIC_KEY,Measure.newMeasureBuilder().setVariations(MeasureVariations.newMeasureVariationsBuilder().setVariation(1,1.1d).setVariation(2,2.2d).setVariation(3,3.3d).setVariation(4,4.4d).setVariation(5,5.5d).build()).create(123.123d));
  sut.execute();
  session.commit();
  assertThat(dbTester.countRowsOfTable("project_measures")).isEqualTo(2);
  List<Map<String,Object>> dtos=retrieveDtos();
  Map<String,Object> dto=dtos.get(0);
  assertThat(dto.get("snapshotId")).isEqualTo(3L);
  assertThat(dto.get("componentId")).isEqualTo(projectDto.getId());
  assertThat(dto.get("metricId")).isEqualTo(1L);
  assertThat(dto.get("textValue")).isEqualTo("measure-data");
  assertThat(dto.get("severity")).isNull();
  dto=dtos.get(PROJECT_REF);
  assertThat(dto.get("snapshotId")).isEqualTo(4L);
  assertThat(dto.get("componentId")).isEqualTo(fileDto.getId());
  assertThat(dto.get("metricId")).isEqualTo(2L);
  assertThat(dto.get("value")).isEqualTo(123.1d);
  assertThat(dto.get("severity")).isNull();
}
