{
  File baseDir=temp.getRoot();
  File srcDir=prepareBigProject(baseDir);
  File paths=new File(baseDir,"paths.txt");
  int ISSUE_COUNT=10000;
  for (int i=0; i < ISSUE_COUNT; i++) {
    File xooFile=new File(srcDir,"sample" + (i / 10 + 1) + ".xoo");
    FileUtils.write(paths,xooFile.getAbsolutePath() + "\n",StandardCharsets.UTF_8,true);
  }
  long start=System.currentTimeMillis();
  TaskResult result=tester.newTask().properties(ImmutableMap.<String,String>builder().put("sonar.task","scan").put("sonar.projectBaseDir",baseDir.getAbsolutePath()).put("sonar.projectKey","com.foo.project").put("sonar.projectName","Foo Project").put("sonar.projectVersion","1.0-SNAPSHOT").put("sonar.projectDescription","Description of Foo Project").put("sonar.sources","src").put("sonar.xoo.randomAccessIssue.paths",paths.getAbsolutePath()).build()).start();
  List<Issue> issues=result.issuesFor(result.inputFile("src/sample1.xoo"));
  assertThat(issues).hasSize(10);
  bench.expectLessThanOrEqualTo("Time to create " + ISSUE_COUNT + " issues on random files using FileSystem query",System.currentTimeMillis() - start,2000);
}
