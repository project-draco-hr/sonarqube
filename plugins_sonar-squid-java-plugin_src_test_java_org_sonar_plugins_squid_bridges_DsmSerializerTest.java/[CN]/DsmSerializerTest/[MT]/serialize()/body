{
  SourcePackage foo=new SourcePackage("org/foo");
  SourcePackage bar=new SourcePackage("org/bar");
  SourceCodeEdge edge=new SourceCodeEdge(foo,bar,SourceCodeEdgeUsage.USES){
    @Override public int getWeight(){
      return 5;
    }
  }
;
  DirectedGraph<SourceCode,SourceCodeEdge> graph=new DirectedGraph<SourceCode,SourceCodeEdge>();
  graph.addVertex(foo);
  graph.addVertex(bar);
  graph.addEdge(edge);
  Resource fooSonar=new JavaPackage("org.foo");
  fooSonar.setId(7);
  Resource barSonar=new JavaPackage("org.bar");
  barSonar.setId(8);
  Dependency dep=new Dependency(fooSonar,barSonar).setId(30l);
  DependencyIndex depIndex=new DependencyIndex();
  depIndex.put(edge,dep);
  ResourceIndex resourceIndex=new ResourceIndex();
  resourceIndex.put(foo,fooSonar);
  resourceIndex.put(bar,barSonar);
  Dsm<SourceCode> dsm=new Dsm<SourceCode>(graph);
  DsmManualSorter.sort(dsm,bar,foo);
  String json=IOUtils.toString(getClass().getResourceAsStream("/org/sonar/plugins/squid/bridges/DsmSerializerTest/dsm.json"));
  assertThat(DsmSerializer.serialize(dsm,depIndex,resourceIndex),is(json));
}
