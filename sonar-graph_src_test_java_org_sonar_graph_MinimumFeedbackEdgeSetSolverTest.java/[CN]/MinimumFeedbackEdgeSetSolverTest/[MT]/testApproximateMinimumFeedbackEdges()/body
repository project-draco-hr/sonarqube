{
  DirectedGraph<String,StringEdge> dcg=DirectedGraph.createStringDirectedGraph();
  dcg.addEdge("A","B",5).addEdge("B","C",9).addEdge("C","A",1);
  dcg.addEdge("D","B",5).addEdge("C","D",7);
  dcg.addEdge("F","B",5).addEdge("C","F",4);
  CycleDetector<String> cycleDetector=new CycleDetector<>(dcg);
  cycleDetector.detectCycles();
  MinimumFeedbackEdgeSetSolver minimumSolver=new MinimumFeedbackEdgeSetSolver(cycleDetector.getCycles());
  assertThat(minimumSolver.getEdges().size(),is(1));
  assertTrue(minimumSolver.getEdges().contains(dcg.getEdge("B","C")));
  MinimumFeedbackEdgeSetSolver approximateSolver=new MinimumFeedbackEdgeSetSolver(cycleDetector.getCycles(),2);
  assertThat(approximateSolver.getEdges().size(),is(2));
  assertTrue(approximateSolver.getEdges().contains(dcg.getEdge("B","C")));
  assertTrue(approximateSolver.getEdges().contains(dcg.getEdge("C","A")));
}
