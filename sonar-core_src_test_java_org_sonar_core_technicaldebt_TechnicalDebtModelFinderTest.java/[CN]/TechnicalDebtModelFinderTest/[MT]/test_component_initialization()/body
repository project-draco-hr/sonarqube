{
  PluginMetadata csharpPluginMetadata=mock(PluginMetadata.class);
  when(csharpPluginMetadata.getKey()).thenReturn("csharp");
  PluginMetadata phpPluginMetadata=mock(PluginMetadata.class);
  when(phpPluginMetadata.getKey()).thenReturn("php");
  PluginRepository repository=mock(PluginRepository.class);
  when(repository.getMetadata()).thenReturn(Lists.newArrayList(csharpPluginMetadata,phpPluginMetadata));
  FakePlugin fakePlugin=new FakePlugin();
  when(repository.getPlugin(anyString())).thenReturn(fakePlugin);
  modelFinder=new TechnicalDebtModelFinder(repository,TEST_XML_PREFIX_PATH);
  modelFinder.start();
  Collection<String> contributingPluginList=modelFinder.getContributingPluginList();
  assertThat(contributingPluginList.size()).isEqualTo(1);
  assertThat(contributingPluginList).containsOnly("csharp");
}
