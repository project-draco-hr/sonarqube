{
  IssueQuery.Builder builder=IssueQuery.builder().requiredRole(UserRole.USER).issueKeys(RubyUtils.toStrings(props.get("issues"))).severities(RubyUtils.toStrings(props.get("severities"))).statuses(RubyUtils.toStrings(props.get("statuses"))).resolutions(RubyUtils.toStrings(props.get("resolutions"))).resolved(RubyUtils.toBoolean(props.get("resolved"))).components(RubyUtils.toStrings(props.get("components"))).componentRoots(RubyUtils.toStrings(props.get("componentRoots"))).rules(toRules(props.get("rules"))).actionPlans(RubyUtils.toStrings(props.get("actionPlans"))).reporters(RubyUtils.toStrings(props.get("reporters"))).assignees(RubyUtils.toStrings(props.get("assignees"))).assigned(RubyUtils.toBoolean(props.get("assigned"))).planned(RubyUtils.toBoolean(props.get("planned"))).createdAfter(RubyUtils.toDate(props.get("createdAfter"))).createdBefore(RubyUtils.toDate(props.get("createdBefore"))).pageSize(RubyUtils.toInteger(props.get("pageSize"))).pageIndex(RubyUtils.toInteger(props.get("pageIndex")));
  String sort=(String)props.get("sort");
  if (!Strings.isNullOrEmpty(sort)) {
    builder.sort(sort);
    builder.asc(RubyUtils.toBoolean(props.get("asc")));
  }
  return builder.build();
}
