{
  StringBuilder sb=new StringBuilder(1000);
  sb.append("select c.uuid, c.project_uuid, ");
  sb.append(filter.sort().column());
  sb.append(" from projects c");
  sb.append(" inner join snapshots s on s.component_uuid=c.project_uuid ");
  if (context.getBaseComponent() != null) {
    sb.append(" inner join projects base on base.project_uuid = c.project_uuid ");
  }
  for (int index=0; index < filter.getMeasureConditions().size(); index++) {
    MeasureFilterCondition condition=filter.getMeasureConditions().get(index);
    sb.append(" inner join project_measures pmcond").append(index);
    sb.append(" on pmcond").append(index).append(".analysis_uuid = s.uuid and ");
    sb.append(" pmcond").append(index).append(".component_uuid = c.uuid and ");
    condition.appendSqlCondition(sb,index);
  }
  if (filter.isOnFavourites()) {
    sb.append(" inner join properties props on props.resource_id=c.id ");
  }
  if (filter.sort().isOnMeasure()) {
    sb.append(" left outer join project_measures pmsort ON s.uuid = pmsort.analysis_uuid and pmsort.component_uuid = c.uuid and pmsort.metric_id=");
    sb.append(filter.sort().metric().getId());
    sb.append(" and pmsort.person_id is null ");
  }
  sb.append(" where ");
  sb.append(" s.islast=").append(database.getDialect().getTrueSqlValue());
  appendComponentConditions(sb);
  for (int index=0; index < filter.getMeasureConditions().size(); index++) {
    MeasureFilterCondition condition=filter.getMeasureConditions().get(index);
    sb.append(" and ");
    condition.appendSqlCondition(sb,index);
  }
  return sb.toString();
}
