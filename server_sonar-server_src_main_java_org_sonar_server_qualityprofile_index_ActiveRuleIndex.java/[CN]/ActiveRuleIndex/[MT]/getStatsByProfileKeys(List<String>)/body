{
  SearchRequestBuilder request=getClient().prepareSearch(this.getIndexName()).setQuery(QueryBuilders.filteredQuery(QueryBuilders.termsQuery(ActiveRuleNormalizer.ActiveRuleField.PROFILE_KEY.field(),keys),FilterBuilders.boolFilter().mustNot(FilterBuilders.hasParentFilter(this.getParentType(),FilterBuilders.termFilter(RuleNormalizer.RuleField.STATUS.field(),RuleStatus.REMOVED.name()))))).addAggregation(AggregationBuilders.terms(ActiveRuleNormalizer.ActiveRuleField.PROFILE_KEY.field()).field(ActiveRuleNormalizer.ActiveRuleField.PROFILE_KEY.field()).size(0).subAggregation(AggregationBuilders.terms(ActiveRuleNormalizer.ActiveRuleField.INHERITANCE.field()).field(ActiveRuleNormalizer.ActiveRuleField.INHERITANCE.field())).subAggregation(AggregationBuilders.terms(ActiveRuleNormalizer.ActiveRuleField.SEVERITY.field()).field(ActiveRuleNormalizer.ActiveRuleField.SEVERITY.field())).subAggregation(AggregationBuilders.count("countActiveRules"))).setSize(0).setTypes(this.getIndexType());
  SearchResponse response=request.get();
  Map<String,Multimap<String,FacetValue>> stats=new HashMap<String,Multimap<String,FacetValue>>();
  Aggregation aggregation=response.getAggregations().get(ActiveRuleNormalizer.ActiveRuleField.PROFILE_KEY.field());
  for (  Terms.Bucket value : ((Terms)aggregation).getBuckets()) {
    stats.put(value.getKey(),this.processAggregations(value.getAggregations()));
  }
  return stats;
}
