{
  runProjectAnalysis(ORCHESTRATOR,"shared/xoo-sample","sonar.projectDate","2011-12-15");
  Issues issues=issueClient.find(IssueQuery.create().componentRoots(PROJECT_KEY));
  Issue issue=issues.list().get(0);
  issueClient.assign(issue.key(),USER_LOGIN);
  waitUntilAllNotificationsAreDelivered();
  Iterator<WiserMessage> emails=smtpServer.getMessages().iterator();
  assertThat(emails.hasNext()).isTrue();
  MimeMessage message=emails.next().getMimeMessage();
  assertThat(message.getHeader("To",null)).isEqualTo("<tester@example.org>");
  assertThat((String)message.getContent()).contains("Sample");
  assertThat((String)message.getContent()).contains("17 new issues (new debt: 17min)");
  assertThat((String)message.getContent()).contains("Severity");
  assertThat((String)message.getContent()).contains("One Issue Per Line (xoo): 17");
  assertThat((String)message.getContent()).contains("See it in SonarQube: http://localhost:9000/component_issues?id=sample#createdAt=2011-12-15T00%3A00%3A00%2B");
  assertThat(emails.hasNext()).isTrue();
  message=emails.next().getMimeMessage();
  assertThat(message.getHeader("To",null)).isEqualTo("<tester@example.org>");
  assertThat((String)message.getContent()).contains("sample/Sample.xoo");
  assertThat((String)message.getContent()).contains("Assignee changed to Tester");
  assertThat((String)message.getContent()).contains("See it in SonarQube: http://localhost:9000/issues/search#issues=" + issue.key());
  assertThat(emails.hasNext()).isFalse();
}
