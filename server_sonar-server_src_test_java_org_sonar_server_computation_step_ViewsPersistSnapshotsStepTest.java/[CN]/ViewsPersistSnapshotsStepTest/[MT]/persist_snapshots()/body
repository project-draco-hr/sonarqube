{
  ComponentDto projectDto=save(newProjectDto("proj"));
  ComponentDto viewDto=save(newView("ABCD").setKey(valueOf(PROJECT_KEY)).setName("Project"));
  ComponentDto subViewDto=save(newSubView(viewDto,"CDEF","key").setKey("2"));
  ComponentDto projectViewDto=save(newProjectCopy("DEFG",projectDto,subViewDto).setKey("3"));
  dbTester.getSession().commit();
  Component projectView=ViewsComponent.builder(PROJECT_VIEW,3).setUuid("DEFG").build();
  Component subView=ViewsComponent.builder(SUBVIEW,2).setUuid("CDEF").addChildren(projectView).build();
  Component view=ViewsComponent.builder(VIEW,1).setUuid("ABCD").addChildren(subView).build();
  treeRootHolder.setRoot(view);
  dbIdsRepository.setComponentId(view,viewDto.getId());
  dbIdsRepository.setComponentId(subView,subViewDto.getId());
  dbIdsRepository.setComponentId(projectView,projectViewDto.getId());
  underTest.execute();
  assertThat(dbTester.countRowsOfTable("snapshots")).isEqualTo(3);
  SnapshotDto projectSnapshot=getUnprocessedSnapshot(viewDto.getId());
  assertThat(projectSnapshot.getComponentId()).isEqualTo(viewDto.getId());
  assertThat(projectSnapshot.getRootProjectId()).isEqualTo(viewDto.getId());
  assertThat(projectSnapshot.getRootId()).isNull();
  assertThat(projectSnapshot.getParentId()).isNull();
  assertThat(projectSnapshot.getDepth()).isEqualTo(0);
  assertThat(projectSnapshot.getPath()).isNullOrEmpty();
  assertThat(projectSnapshot.getQualifier()).isEqualTo("VW");
  assertThat(projectSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(projectSnapshot.getVersion()).isNull();
  assertThat(projectSnapshot.getLast()).isFalse();
  assertThat(projectSnapshot.getStatus()).isEqualTo("U");
  assertThat(projectSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(projectSnapshot.getBuildDate()).isEqualTo(now);
  SnapshotDto subViewSnapshot=getUnprocessedSnapshot(subViewDto.getId());
  assertThat(subViewSnapshot.getComponentId()).isEqualTo(subViewDto.getId());
  assertThat(subViewSnapshot.getRootProjectId()).isEqualTo(viewDto.getId());
  assertThat(subViewSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(subViewSnapshot.getParentId()).isEqualTo(projectSnapshot.getId());
  assertThat(subViewSnapshot.getDepth()).isEqualTo(1);
  assertThat(subViewSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + ".");
  assertThat(subViewSnapshot.getQualifier()).isEqualTo("SVW");
  assertThat(subViewSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(subViewSnapshot.getVersion()).isNull();
  assertThat(subViewSnapshot.getLast()).isFalse();
  assertThat(subViewSnapshot.getStatus()).isEqualTo("U");
  assertThat(subViewSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(subViewSnapshot.getBuildDate()).isEqualTo(now);
  SnapshotDto projectViewSnapshot=getUnprocessedSnapshot(projectViewDto.getId());
  assertThat(projectViewSnapshot.getComponentId()).isEqualTo(projectViewDto.getId());
  assertThat(projectViewSnapshot.getRootProjectId()).isEqualTo(viewDto.getId());
  assertThat(projectViewSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(projectViewSnapshot.getParentId()).isEqualTo(subViewSnapshot.getId());
  assertThat(projectViewSnapshot.getDepth()).isEqualTo(2);
  assertThat(projectViewSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + subViewSnapshot.getId()+ ".");
  assertThat(projectViewSnapshot.getQualifier()).isEqualTo("TRK");
  assertThat(projectViewSnapshot.getScope()).isEqualTo("FIL");
  assertThat(projectViewSnapshot.getVersion()).isNull();
  assertThat(projectViewSnapshot.getLast()).isFalse();
  assertThat(projectViewSnapshot.getStatus()).isEqualTo("U");
  assertThat(projectViewSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(projectViewSnapshot.getBuildDate()).isEqualTo(now);
  assertThat(dbIdsRepository.getSnapshotId(view)).isEqualTo(projectSnapshot.getId());
  assertThat(dbIdsRepository.getComponentId(subView)).isEqualTo(subViewDto.getId());
  assertThat(dbIdsRepository.getComponentId(projectView)).isEqualTo(projectViewDto.getId());
}
