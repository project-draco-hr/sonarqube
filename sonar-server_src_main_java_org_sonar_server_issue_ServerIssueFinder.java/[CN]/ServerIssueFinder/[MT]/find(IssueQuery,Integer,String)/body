{
  LOG.debug("IssueQuery : {}",query);
  SqlSession sqlSession=myBatis.openSession();
  try {
    List<IssueDto> allIssuesDto=issueDao.selectIssueIdsAndComponentsId(query,sqlSession);
    Set<Integer> componentIds=extractResourceIds(allIssuesDto);
    Set<Integer> authorizedComponentIds=authorizationDao.keepAuthorizedComponentIds(componentIds,currentUserId,role,sqlSession);
    List<IssueDto> authorizedIssues=authorized(allIssuesDto,authorizedComponentIds);
    Paging paging=Paging.create(query.pageSize(),query.pageIndex(),authorizedIssues.size());
    Set<Long> pagedAuthorizedIssueIds=pagedAuthorizedIssueIds(authorizedIssues,paging);
    Collection<IssueDto> dtos=issueDao.selectByIds(pagedAuthorizedIssueIds,sqlSession);
    Set<Integer> ruleIds=Sets.newHashSet();
    List<Issue> issues=newArrayList();
    List<Long> issueIds=newArrayList();
    Map<Long,Issue> issuesById=newHashMap();
    for (    IssueDto dto : dtos) {
      if (authorizedComponentIds.contains(dto.getResourceId())) {
        DefaultIssue defaultIssue=dto.toDefaultIssue();
        issuesById.put(dto.getId(),defaultIssue);
        issueIds.add(dto.getId());
        issues.add(defaultIssue);
        ruleIds.add(dto.getRuleId());
      }
    }
    Collection<ActionPlanIssueDto> actionPlanIssueDtos=actionPlanIssueDao.findByIssueIds(issueIds,sqlSession);
    ListMultimap<Issue,ActionPlan> actionPlansByIssueKey=createActionPlansByIssue(actionPlanIssueDtos,issuesById);
    setActionPlans(issues,actionPlansByIssueKey);
    return new DefaultResults(issues,findRules(ruleIds),findComponents(componentIds),actionPlansByIssueKey,paging,authorizedIssues.size() != allIssuesDto.size());
  }
  finally {
    MyBatis.closeQuietly(sqlSession);
  }
}
