{
  Backup backup=new Backup(Arrays.asList(new MetricsBackup(null),new PropertiesBackup(null,cleanDryRunCache),new RulesBackup((DatabaseSession)null),new ProfilesBackup((DatabaseSession)null)));
  String xml=getFileFromClasspath("backup-restore-valid.xml");
  SonarConfig sonarConfig=backup.getSonarConfigFromXml(xml);
  assertThat(sonarConfig.getMetrics()).isEqualTo(getMetrics());
  assertThat(sonarConfig.getProperties()).isEqualTo(getProperties());
  for (  Metric metric : sonarConfig.getMetrics()) {
    assertThat(metric.getEnabled()).isNotNull();
    assertThat(metric.getEnabled()).isTrue();
    assertThat(metric.getUserManaged()).isNotNull();
    assertThat(metric.getUserManaged()).isTrue();
  }
  Collection<RulesProfile> profiles=sonarConfig.getProfiles();
  assertThat(profiles).hasSize(2);
  Iterator<RulesProfile> profilesIter=profiles.iterator();
  RulesProfile testProfile=profilesIter.next();
  assertThat("test name").isEqualTo(testProfile.getName());
  assertThat(testProfile.getDefaultProfile()).isTrue();
  assertThat("test language").isEqualTo(testProfile.getLanguage());
  assertThat(testProfile.getActiveRules()).hasSize(1);
  ActiveRule testActiveRule=testProfile.getActiveRules().get(0);
  assertThat(RulePriority.MAJOR).isEqualTo(testActiveRule.getSeverity());
  assertThat(testActiveRule.getRule()).isNotNull();
  assertThat("test key").isEqualTo(testActiveRule.getRule().getKey());
  assertThat("test plugin").isEqualTo(testActiveRule.getRule().getRepositoryKey());
  assertThat(testActiveRule.getInheritance()).isNull();
  assertThat(testActiveRule.getActiveRuleParams()).hasSize(1);
  ActiveRuleParam testActiveRuleParam=testActiveRule.getActiveRuleParams().get(0);
  assertThat("test value").isEqualTo(testActiveRuleParam.getValue());
  assertThat(testActiveRuleParam.getRuleParam()).isNotNull();
  assertThat("test param key").isEqualTo(testActiveRuleParam.getRuleParam().getKey());
  assertThat(testProfile.getAlerts()).hasSize(2);
  Alert testAlert=testProfile.getAlerts().get(0);
  assertThat(Alert.OPERATOR_GREATER).isEqualTo(testAlert.getOperator());
  assertThat("testError").isEqualTo(testAlert.getValueError());
  assertThat("testWarn").isEqualTo(testAlert.getValueWarning());
  assertThat(testAlert.getPeriod()).isNull();
  assertThat(testAlert.getMetric()).isNotNull();
  assertThat("test key").isEqualTo(testAlert.getMetric().getKey());
  Alert testAlert2=testProfile.getAlerts().get(1);
  assertThat(Alert.OPERATOR_SMALLER).isEqualTo(testAlert2.getOperator());
  assertThat("testError2").isEqualTo(testAlert2.getValueError());
  assertThat("testWarn2").isEqualTo(testAlert2.getValueWarning());
  assertThat(testAlert2.getPeriod()).isEqualTo(1);
  assertThat(testAlert2.getMetric()).isNotNull();
  assertThat("test key2").isEqualTo(testAlert2.getMetric().getKey());
  testProfile=profilesIter.next();
  assertThat("test2 name").isEqualTo(testProfile.getName());
  assertThat("test name").isEqualTo(testProfile.getParentName());
  testActiveRule=testProfile.getActiveRules().get(0);
  assertThat(testActiveRule.getInheritance()).isEqualTo(ActiveRule.OVERRIDES);
  Collection<Rule> rules=sonarConfig.getRules();
  assertThat(rules).hasSize(1);
  Rule rule=rules.iterator().next();
  assertThat(rule.getParent().getRepositoryKey()).isEqualTo("test plugin");
  assertThat(rule.getParent().getKey()).isEqualTo("test key");
  assertThat(rule.getRepositoryKey()).isEqualTo("test plugin");
  assertThat(rule.getKey()).isEqualTo("test key2");
  assertThat(rule.getConfigKey()).isEqualTo("test config key");
  assertThat(rule.getName()).isEqualTo("test name");
  assertThat(rule.getDescription()).isEqualTo("test description");
  assertThat(rule.getSeverity()).isEqualTo(RulePriority.INFO);
  assertThat(rule.getParams()).hasSize(1);
  RuleParam param=rule.getParams().get(0);
  assertThat(param.getKey()).isEqualTo("test param key");
  assertThat(param.getDefaultValue()).isEqualTo("test param value");
}
