{
  emailChannel=mock(NotificationChannel.class);
  when(emailChannel.getKey()).thenReturn("email");
  doAnswer(new Answer<Serializable>(){
    public Serializable answer(    InvocationOnMock invocation) throws Throwable {
      return (Serializable)invocation.getArguments()[1];
    }
  }
).when(emailChannel).createDataForPersistance(any(Notification.class),any(Integer.class));
  gtalkChannel=mock(NotificationChannel.class);
  when(gtalkChannel.getKey()).thenReturn("gtalk");
  doAnswer(new Answer<Serializable>(){
    public Serializable answer(    InvocationOnMock invocation) throws Throwable {
      return (Serializable)invocation.getArguments()[1];
    }
  }
).when(gtalkChannel).createDataForPersistance(any(Notification.class),any(Integer.class));
  commentOnReviewAssignedToMe=mock(NotificationDispatcher.class);
  when(commentOnReviewAssignedToMe.getKey()).thenReturn("comment on review assigned to me");
  doAnswer(new Answer<Object>(){
    public Object answer(    InvocationOnMock invocation) throws Throwable {
      ((NotificationDispatcher.Context)invocation.getArguments()[1]).addUser(assignee);
      return null;
    }
  }
).when(commentOnReviewAssignedToMe).dispatch(any(Notification.class),any(NotificationDispatcher.Context.class));
  commentOnReviewCreatedByMe=mock(NotificationDispatcher.class);
  when(commentOnReviewCreatedByMe.getKey()).thenReturn("comment on review created by me");
  doAnswer(new Answer<Object>(){
    public Object answer(    InvocationOnMock invocation) throws Throwable {
      ((NotificationDispatcher.Context)invocation.getArguments()[1]).addUser(creator);
      return null;
    }
  }
).when(commentOnReviewCreatedByMe).dispatch(any(Notification.class),any(NotificationDispatcher.Context.class));
  NotificationDispatcher[] dispatchers=new NotificationDispatcher[]{commentOnReviewAssignedToMe,commentOnReviewCreatedByMe};
  NotificationChannel[] channels=new NotificationChannel[]{emailChannel,gtalkChannel};
  queue=mock(NotificationQueue.class);
  manager=spy(new NotificationManager(queue,dispatchers,channels));
  doReturn(false).when(manager).isEnabled(any(Integer.class),any(NotificationChannel.class),any(NotificationDispatcher.class));
}
