{
  RuleKey blahRuleKey=RuleKey.of("blah","my-rule");
  RuleDto blahRule=RuleTesting.newDto(blahRuleKey).setSeverity("INFO").setLanguage("xoo");
  db.ruleDao().insert(dbSession,blahRule);
  dbSession.commit();
  dbSession.clearCache();
  ruleIndexer.index();
  db.qualityProfileDao().insert(dbSession,QProfileTesting.newXooP1());
  RuleActivation activation1=new RuleActivation(RuleTesting.XOO_X2).setSeverity("MINOR");
  RuleActivation activation2=new RuleActivation(RuleTesting.XOO_X1);
  RuleActivation activation3=new RuleActivation(blahRuleKey);
  activation2.setSeverity(Severity.BLOCKER);
  activation2.setParameter("max","7");
  tester.get(RuleActivator.class).activate(dbSession,activation1,QProfileTesting.XOO_P1_NAME);
  tester.get(RuleActivator.class).activate(dbSession,activation2,QProfileTesting.XOO_P1_NAME);
  tester.get(RuleActivator.class).activate(dbSession,activation3,QProfileTesting.XOO_P1_NAME);
  dbSession.commit();
  dbSession.clearCache();
  activeRuleIndexer.index();
  StringWriter output=new StringWriter();
  tester.get(QProfileBackuper.class).backup(QProfileTesting.XOO_P1_KEY,output);
  XMLUnit.setIgnoreWhitespace(true);
  XMLUnit.setIgnoreComments(true);
  Diff diff=XMLUnit.compareXML(output.toString(),Resources.toString(getClass().getResource("QProfileBackuperMediumTest/expected-backup.xml"),StandardCharsets.UTF_8));
  assertThat(diff.identical()).as(diff.toString()).isTrue();
}
