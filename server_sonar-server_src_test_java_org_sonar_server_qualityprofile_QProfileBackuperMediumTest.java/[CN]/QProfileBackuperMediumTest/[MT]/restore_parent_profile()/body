{
  db.qualityProfileDao().insert(dbSession,QProfileTesting.newXooP1(),QProfileTesting.newXooP2().setParentKee(QProfileTesting.XOO_P1_KEY));
  dbSession.commit();
  RuleActivation activation=new RuleActivation(RuleTesting.XOO_X1);
  activation.setSeverity(Severity.INFO);
  activation.setParameter("max","10");
  tester.get(RuleActivator.class).activate(dbSession,activation,QProfileTesting.XOO_P1_KEY);
  dbSession.commit();
  dbSession.clearCache();
  tester.get(QProfileBackuper.class).restore(new StringReader(Resources.toString(getClass().getResource("QProfileBackuperMediumTest/restore-parent.xml"),Charsets.UTF_8)),null);
  List<ActiveRule> activeRules=Lists.newArrayList(tester.get(QProfileLoader.class).findActiveRulesByProfile(QProfileTesting.XOO_P1_KEY));
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).severity()).isEqualTo("BLOCKER");
  assertThat(activeRules.get(0).inheritance()).isEqualTo(ActiveRule.Inheritance.NONE);
  assertThat(activeRules.get(0).params().get("max")).isEqualTo("7");
  activeRules=Lists.newArrayList(tester.get(QProfileLoader.class).findActiveRulesByProfile(QProfileTesting.XOO_P2_KEY));
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).severity()).isEqualTo("BLOCKER");
  assertThat(activeRules.get(0).inheritance()).isEqualTo(ActiveRule.Inheritance.INHERITED);
  assertThat(activeRules.get(0).params().get("max")).isEqualTo("7");
}
