{
  db.qualityProfileDao().insert(dbSession,newXooP1(),newXooP2().setParentKee(XOO_P1_KEY));
  dbSession.commit();
  RuleActivation activation=new RuleActivation(XOO_X1);
  activation.setSeverity(Severity.INFO);
  activation.setParameter("max","10");
  tester.get(RuleActivator.class).activate(dbSession,activation,XOO_P1_KEY);
  dbSession.commit();
  dbSession.clearCache();
  activeRuleIndexer.index();
  tester.get(QProfileBackuper.class).restore(new StringReader(Resources.toString(getClass().getResource("QProfileBackuperMediumTest/restore-parent.xml"),StandardCharsets.UTF_8)),null);
  List<ActiveRuleDto> activeRules=db.activeRuleDao().selectByProfileKey(dbSession,XOO_P1_KEY);
  assertThat(activeRules).hasSize(1);
  ActiveRuleDto activeRuleDoc=activeRules.get(0);
  assertThat(activeRuleDoc.getSeverityString()).isEqualTo("BLOCKER");
  assertThat(activeRuleDoc.getInheritance()).isNull();
  ActiveRuleDto activeRuleDto=db.activeRuleDao().selectOrFailByKey(dbSession,activeRuleDoc.getKey());
  List<ActiveRuleParamDto> params=tester.get(ActiveRuleDao.class).selectParamsByActiveRuleId(dbSession,activeRuleDto.getId());
  assertThat(params).hasSize(1);
  assertThat(params.get(0).getKey()).isEqualTo("max");
  assertThat(params.get(0).getValue()).isEqualTo("7");
  activeRules=db.activeRuleDao().selectByProfileKey(dbSession,XOO_P2_KEY);
  assertThat(activeRules).hasSize(1);
  activeRuleDoc=activeRules.get(0);
  assertThat(activeRuleDoc.getSeverityString()).isEqualTo("BLOCKER");
  assertThat(activeRuleDoc.getInheritance()).isEqualTo(INHERITED);
  activeRuleDto=db.activeRuleDao().selectOrFailByKey(dbSession,activeRuleDoc.getKey());
  params=tester.get(ActiveRuleDao.class).selectParamsByActiveRuleId(dbSession,activeRuleDto.getId());
  assertThat(params).hasSize(1);
  assertThat(params.get(0).getKey()).isEqualTo("max");
  assertThat(params.get(0).getValue()).isEqualTo("7");
}
