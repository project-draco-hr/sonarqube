{
  ComponentDto project=new ComponentDto().setId(1L).setKey("struts");
  when(resourceDao.selectComponentsByIds(anyCollection())).thenReturn(newArrayList(project));
  IssueQuery query=IssueQuery.builder().build();
  IssueDto issue1=new IssueDto().setId(1L).setRuleId(50).setComponentId(123l).setRootComponentId(100l).setComponentKey_unit_test_only("Action.java").setRootComponentKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  IssueDto issue2=new IssueDto().setId(2L).setRuleId(50).setComponentId(123l).setRootComponentId(100l).setComponentKey_unit_test_only("Action.java").setRootComponentKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  List<IssueDto> dtoList=newArrayList(issue1,issue2);
  when(issueDao.selectByIds(anyCollection(),any(SqlSession.class))).thenReturn(dtoList);
  IssueQueryResult results=finder.find(query);
  assertThat(results.issues()).hasSize(2);
  assertThat(results.projects()).hasSize(1);
  Issue issue=results.issues().iterator().next();
  assertThat(results.project(issue)).isEqualTo(project);
}
