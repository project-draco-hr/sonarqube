{
  when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(),anyString(),any(SqlSession.class))).thenReturn(newHashSet(100));
  IssueQuery query=IssueQuery.builder().pageSize(1).pageIndex(1).build();
  IssueDto issue1=new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100).setComponentKey_unit_test_only("Action.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  IssueDto issue2=new IssueDto().setId(2L).setRuleId(50).setResourceId(135).setProjectId(100).setComponentKey_unit_test_only("Phases.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  List<IssueDto> dtoList=newArrayList(issue1,issue2);
  when(issueDao.selectIssues(eq(query),anyInt(),any(SqlSession.class))).thenReturn(dtoList);
  when(issueDao.selectByIds(anyCollection(),any(SqlSession.class))).thenReturn(dtoList);
  IssueQueryResult results=finder.find(query);
  assertThat(results.paging().offset()).isEqualTo(0);
  assertThat(results.paging().total()).isEqualTo(2);
  assertThat(results.paging().pages()).isEqualTo(2);
  verify(issueDao).selectByIds(eq(newHashSet(1L)),any(SqlSession.class));
}
