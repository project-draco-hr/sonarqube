{
  Rule rule=Rule.create().setRepositoryKey("squid").setKey("AvoidCycle");
  when(ruleFinder.findByIds(anyCollection())).thenReturn(newArrayList(rule));
  IssueQuery query=IssueQuery.builder().build();
  IssueDto issue1=new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100).setComponentKey_unit_test_only("Action.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  IssueDto issue2=new IssueDto().setId(2L).setRuleId(50).setResourceId(123).setProjectId(100).setComponentKey_unit_test_only("Action.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  List<IssueDto> dtoList=newArrayList(issue1,issue2);
  when(issueDao.selectByIds(anyCollection(),any(IssueQuery.Sort.class),anyBoolean(),any(SqlSession.class))).thenReturn(dtoList);
  IssueQueryResult results=finder.find(query);
  assertThat(results.issues()).hasSize(2);
  Issue issue=results.issues().iterator().next();
  assertThat(results.issues()).hasSize(2);
  assertThat(results.rule(issue)).isEqualTo(rule);
  assertThat(results.rules()).hasSize(1);
}
