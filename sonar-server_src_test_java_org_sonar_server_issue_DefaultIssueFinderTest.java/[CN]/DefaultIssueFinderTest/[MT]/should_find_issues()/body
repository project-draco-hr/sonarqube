{
  when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(),anyString(),any(SqlSession.class))).thenReturn(newHashSet(100));
  IssueQuery query=IssueQuery.builder().build();
  IssueDto issue1=new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100).setComponentKey_unit_test_only("Action.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  IssueDto issue2=new IssueDto().setId(2L).setRuleId(50).setResourceId(123).setProjectId(100).setComponentKey_unit_test_only("Action.java").setProjectKey_unit_test_only("struts").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  List<IssueDto> dtoList=newArrayList(issue1,issue2);
  when(issueDao.selectByIds(anyCollection(),any(SqlSession.class))).thenReturn(dtoList);
  IssueQueryResult results=finder.find(query);
  verify(issueDao).selectIssues(eq(query),eq(newHashSet(100)),any(SqlSession.class));
  assertThat(results.issues()).hasSize(2);
  Issue issue=results.issues().iterator().next();
  assertThat(issue.componentKey()).isEqualTo("Action.java");
  assertThat(issue.projectKey()).isEqualTo("struts");
  assertThat(issue.ruleKey().toString()).isEqualTo("squid:AvoidCycle");
  assertThat(results.securityExclusions()).isFalse();
}
