{
  String templateType="QUALITY_GATE";
  String templateName="SonarQube way";
  when(templateDao.countByTypeAndKey(templateType,templateName)).thenReturn(0);
  when(qualityGates.create(templateName)).thenReturn(new QualityGateDto().setId(QGATE_ID));
  task.start();
  verify(templateDao).countByTypeAndKey(templateType,templateName);
  verify(qualityGates).create(templateName);
  verify(qualityGates).createCondition(eq(QGATE_ID),eq(NEW_BUGS_KEY),eq(OPERATOR_GREATER_THAN),eq((String)null),eq("0"),eq(1));
  verify(qualityGates).createCondition(eq(QGATE_ID),eq(NEW_VULNERABILITIES_KEY),eq(OPERATOR_GREATER_THAN),eq((String)null),eq("0"),eq(1));
  verify(qualityGates).createCondition(eq(QGATE_ID),eq(NEW_SQALE_DEBT_RATIO_KEY),eq(OPERATOR_GREATER_THAN),eq((String)null),eq("5"),eq(1));
  verify(qualityGates).createCondition(eq(QGATE_ID),eq(NEW_COVERAGE_KEY),eq(OPERATOR_LESS_THAN),eq((String)null),eq("80"),eq(1));
  verify(qualityGates).setDefault(eq(QGATE_ID));
  ArgumentCaptor<LoadedTemplateDto> templateArg=ArgumentCaptor.forClass(LoadedTemplateDto.class);
  verify(templateDao).insert(templateArg.capture());
  LoadedTemplateDto template=templateArg.getValue();
  assertThat(template.getType()).isEqualTo(templateType);
  assertThat(template.getKey()).isEqualTo(templateName);
  task.stop();
}
