{
  DbSession session=dbClient.openSession(false);
  try {
    if (dbClient.loadedTemplateDao().countByTypeAndKey(LoadedTemplateDto.ONE_SHOT_TASK_TYPE,getClass().getSimpleName()) != 0) {
      return;
    }
    IssueFilterDto unresolvedIssues=dbClient.issueFilterDao().selectProvidedFilterByName("Unresolved Issues");
    IssueFilterDto hiddenDebt=dbClient.issueFilterDao().selectProvidedFilterByName("False Positive and Won't Fix Issues");
    IssueFilterDto myUnresolvedIssues=dbClient.issueFilterDao().selectProvidedFilterByName("My Unresolved Issues");
    if (unresolvedIssues == null || hiddenDebt == null || myUnresolvedIssues == null) {
      return;
    }
    Loggers.get(getClass()).info("Replacing issue related widgets with issue filter widgets");
    List<Long> widgetIdsWithPropertiesToDelete=Lists.newArrayList();
    List<WidgetPropertyDto> widgetPropertiesToCreate=Lists.newArrayList();
    Date now=system.newDate();
    for (    WidgetDto widget : dbClient.widgetDao().findAll(session)) {
switch (widget.getWidgetKey()) {
case "false_positive_reviews":
        widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(FILTER_PROPERTY).setTextValue(hiddenDebt.getId().toString()));
      widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(DISTRIBUTION_AXIS_PROPERTY).setTextValue("resolutions"));
    updateWidget(session,widgetIdsWithPropertiesToDelete,widget);
  break;
case "my_reviews":
widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(FILTER_PROPERTY).setTextValue(myUnresolvedIssues.getId().toString()));
updateWidget(session,widgetIdsWithPropertiesToDelete,widget);
break;
case "reviews_per_developer":
widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(FILTER_PROPERTY).setTextValue(unresolvedIssues.getId().toString()));
widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(DISTRIBUTION_AXIS_PROPERTY).setTextValue("assignees"));
updateWidget(session,widgetIdsWithPropertiesToDelete,widget);
break;
case "unresolved_issues_statuses":
widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(FILTER_PROPERTY).setTextValue(unresolvedIssues.getId().toString()));
widgetPropertiesToCreate.add(new WidgetPropertyDto().setWidgetId(widget.getId()).setPropertyKey(DISTRIBUTION_AXIS_PROPERTY).setTextValue("statuses"));
updateWidget(session,widgetIdsWithPropertiesToDelete,widget);
break;
default :
break;
}
}
dbClient.widgetPropertyDao().deleteByWidgetIds(session,widgetIdsWithPropertiesToDelete);
dbClient.widgetPropertyDao().insert(session,widgetPropertiesToCreate);
dbClient.loadedTemplateDao().insert(new LoadedTemplateDto().setType(LoadedTemplateDto.ONE_SHOT_TASK_TYPE).setKey(getClass().getSimpleName()),session);
session.commit();
}
  finally {
MyBatis.closeQuietly(session);
}
}
