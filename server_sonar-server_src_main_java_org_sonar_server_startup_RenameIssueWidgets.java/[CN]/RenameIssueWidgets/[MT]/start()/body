{
  DbSession session=dbClient.openSession(false);
  try {
    if (dbClient.loadedTemplateDao().countByTypeAndKey(LoadedTemplateDto.ONE_SHOT_TASK_TYPE,TASK_KEY,session) != 0) {
      return;
    }
    Map<String,IssueFilterDto> filterByWidgetKey=loadRequiredIssueFilters();
    Map<String,String> distributionAxisByWidgetKey=ImmutableMap.of(WIDGET_FALSE_POSITIVES,"resolutions",WIDGET_MY_UNRESOLVED,"severities",WIDGET_UNRESOLVED_BY_DEVELOPER,"assignees",WIDGET_UNRESOLVED_BY_STATUS,"statuses");
    Loggers.get(getClass()).info("Replacing issue related widgets with issue filter widgets");
    List<Long> updatedWidgetIds=Lists.newArrayList();
    List<WidgetPropertyDto> newWidgetProperties=Lists.newArrayList();
    for (    WidgetDto widget : dbClient.widgetDao().findAll(session)) {
      String widgetKey=widget.getWidgetKey();
      if (filterByWidgetKey.keySet().contains(widgetKey)) {
        updatedWidgetIds.add(widget.getId());
        newWidgetProperties.add(createFilterProperty(filterByWidgetKey.get(widgetKey),widget));
        newWidgetProperties.add(createDistributionAxisProperty(distributionAxisByWidgetKey.get(widgetKey),widget));
        updateWidget(session,widget);
      }
    }
    dbClient.widgetPropertyDao().deleteByWidgetIds(session,updatedWidgetIds);
    dbClient.widgetPropertyDao().insert(session,newWidgetProperties);
    dbClient.loadedTemplateDao().insert(new LoadedTemplateDto().setType(LoadedTemplateDto.ONE_SHOT_TASK_TYPE).setKey(TASK_KEY),session);
    session.commit();
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
