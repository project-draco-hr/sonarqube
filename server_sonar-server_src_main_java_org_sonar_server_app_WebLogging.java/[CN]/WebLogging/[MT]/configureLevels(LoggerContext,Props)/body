{
  helper.configureLogger(ctx,"rails",Level.WARN);
  helper.configureLogger(ctx,"org.apache.ibatis",Level.WARN);
  helper.configureLogger(ctx,"java.sql",Level.WARN);
  helper.configureLogger(ctx,"java.sql.ResultSet",Level.WARN);
  helper.configureLogger(ctx,"org.sonar.MEASURE_FILTER",Level.WARN);
  helper.configureLogger(ctx,"org.elasticsearch",Level.INFO);
  helper.configureLogger(ctx,"org.elasticsearch.node",Level.INFO);
  helper.configureLogger(ctx,"org.elasticsearch.http",Level.INFO);
  helper.configureLogger(ctx,"ch.qos.logback",Level.WARN);
  String levelCode=props.value(LOG_LEVEL_PROPERTY,"INFO");
  Level level;
  if ("TRACE".equals(levelCode)) {
    level=Level.TRACE;
  }
 else   if ("DEBUG".equals(levelCode)) {
    level=Level.DEBUG;
  }
 else   if ("INFO".equals(levelCode)) {
    level=Level.INFO;
  }
 else {
    throw MessageException.of(String.format("Unsupported log level: %s. Please check property %s",levelCode,LOG_LEVEL_PROPERTY));
  }
  helper.configureLogger(ctx,Logger.ROOT_LOGGER_NAME,level);
}
