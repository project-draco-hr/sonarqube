{
  ComponentDto project=newProjectDto(PROJECT_UUID);
  componentDb.insertProjectAndSnapshot(project);
  ComponentDto module=newModuleDto(MODULE_UUID,project);
  componentDb.insertComponent(module);
  ComponentDto file1=newFileDto(project,FILE_1_UUID).setKey("file-key-1").setName("File One");
  componentDb.insertComponent(file1);
  ComponentDto file2=newFileDto(module,FILE_2_UUID).setKey("file-key-2").setName("File Two");
  componentDb.insertComponent(file2);
  ComponentDto file3=newFileDto(module,FILE_3_UUID).setKey("file-key-3").setName("File Three");
  componentDb.insertComponent(file3);
  db.commit();
  componentDb.indexAllComponents();
  ComponentTreeQuery query=newTreeQuery(PROJECT_UUID).build();
  List<ComponentDto> children=underTest.selectChildren(dbSession,query);
  assertThat(children).extracting("uuid").containsExactly(FILE_1_UUID,MODULE_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(2);
  query=newTreeQuery(PROJECT_UUID).setQualifiers(asList(Qualifiers.MODULE)).build();
  children=underTest.selectChildren(dbSession,query);
  assertThat(children).extracting("uuid").containsExactly(MODULE_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(1);
  query=newTreeQuery(MODULE_UUID).build();
  assertThat(underTest.selectChildren(dbSession,query)).extracting("uuid").containsOnly(FILE_2_UUID,FILE_3_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(2);
  query=newTreeQuery(FILE_1_UUID).build();
  assertThat(underTest.selectChildren(dbSession,query)).isEmpty();
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(0);
  query=newTreeQuery(PROJECT_UUID).setNameOrKeyQuery("One").build();
  assertThat(underTest.selectChildren(dbSession,query)).extracting("uuid").containsOnly(FILE_1_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(1);
  query=newTreeQuery(PROJECT_UUID).setNameOrKeyQuery("OnE").build();
  assertThat(underTest.selectChildren(dbSession,query)).extracting("uuid").containsOnly(FILE_1_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(1);
  query=newTreeQuery(PROJECT_UUID).setNameOrKeyQuery("file-key-1").build();
  assertThat(underTest.selectChildren(dbSession,query)).extracting("uuid").containsOnly(FILE_1_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(1);
  query=newTreeQuery(PROJECT_UUID).setNameOrKeyQuery("does-not-exist").build();
  assertThat(underTest.selectChildren(dbSession,query)).isEmpty();
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(0);
  query=newTreeQuery(MODULE_UUID).setNameOrKeyQuery("Two").build();
  assertThat(underTest.selectChildren(dbSession,query)).extracting("uuid").containsOnly(FILE_2_UUID);
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(1);
  query=newTreeQuery(MODULE_UUID).setNameOrKeyQuery("does-not-exist").build();
  assertThat(underTest.selectChildren(dbSession,query)).isEmpty();
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(0);
  query=newTreeQuery(FILE_1_UUID).build();
  assertThat(underTest.selectChildren(dbSession,query)).isEmpty();
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(0);
  query=newTreeQuery(FILE_1_UUID).setNameOrKeyQuery("Foo").build();
  assertThat(underTest.selectChildren(dbSession,query)).isEmpty();
  assertThat(underTest.countChildren(dbSession,query)).isEqualTo(0);
}
