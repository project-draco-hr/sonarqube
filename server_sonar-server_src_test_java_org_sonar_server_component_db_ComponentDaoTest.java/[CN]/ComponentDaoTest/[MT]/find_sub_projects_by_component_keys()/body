{
  setupData("multi-modules");
  List<ComponentDto> results=dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts-core:src/org/struts/RequestContext.java"));
  assertThat(results).hasSize(1);
  assertThat(results.get(0).getKey()).isEqualTo("org.struts:struts-data");
  results=dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts-core:src/org/struts"));
  assertThat(results).hasSize(1);
  assertThat(results.get(0).getKey()).isEqualTo("org.struts:struts-data");
  results=dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts-data"));
  assertThat(results).hasSize(1);
  assertThat(results.get(0).getKey()).isEqualTo("org.struts:struts");
  results=dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts-core"));
  assertThat(results).hasSize(1);
  assertThat(results.get(0).getKey()).isEqualTo("org.struts:struts");
  assertThat(dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts"))).isEmpty();
  assertThat(dao.findSubProjectsByComponentKeys(session,newArrayList("org.struts:struts-core:src/org/struts/RequestContext.java","org.struts:struts-data"))).hasSize(2);
  assertThat(dao.findSubProjectsByComponentKeys(session,newArrayList("unknown"))).isEmpty();
}
