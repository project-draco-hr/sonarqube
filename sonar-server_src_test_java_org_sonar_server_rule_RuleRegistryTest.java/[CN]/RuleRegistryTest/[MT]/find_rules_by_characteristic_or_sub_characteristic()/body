{
  Map<Integer,CharacteristicDto> characteristics=newHashMap();
  characteristics.put(10,new CharacteristicDto().setId(10).setKey("REUSABILITY").setName("Reusability"));
  characteristics.put(11,new CharacteristicDto().setId(11).setKey("MODULARITY").setName("Modularity").setParentId(10));
  List<RuleDto> rules=ImmutableList.of(new RuleDto().setId(10).setRepositoryKey("repo").setRuleKey("key1").setSeverity(Severity.MINOR).setDefaultSubCharacteristicId(11).setDefaultRemediationFunction("LINEAR").setDefaultRemediationCoefficient("2h"));
  registry.bulkRegisterRules(rules,characteristics,ArrayListMultimap.<Integer,RuleParamDto>create(),ArrayListMultimap.<Integer,RuleRuleTagDto>create());
  assertThat(registry.find(RuleQuery.builder().characteristic("MODULARITY").build()).results()).hasSize(1);
  assertThat(registry.find(RuleQuery.builder().characteristic("REUSABILITY").build()).results()).hasSize(1);
  assertThat(registry.find(RuleQuery.builder().characteristic("Unknown").build()).results()).isEmpty();
}
