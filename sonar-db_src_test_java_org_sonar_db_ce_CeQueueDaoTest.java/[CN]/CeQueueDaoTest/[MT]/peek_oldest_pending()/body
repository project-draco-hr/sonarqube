{
  insert("TASK_1","PROJECT_1",CeQueueDto.Status.PENDING);
  insert("TASK_2","PROJECT_2",CeQueueDto.Status.PENDING);
  assertThat(underTest.countAll(db.getSession())).isEqualTo(2);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.PENDING)).isEqualTo(2);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.IN_PROGRESS)).isEqualTo(0);
  Optional<CeQueueDto> peek=underTest.peek(db.getSession());
  assertThat(peek.isPresent()).isTrue();
  assertThat(peek.get().getUuid()).isEqualTo("TASK_1");
  assertThat(peek.get().getStatus()).isEqualTo(CeQueueDto.Status.IN_PROGRESS);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.PENDING)).isEqualTo(1);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.IN_PROGRESS)).isEqualTo(1);
  peek=underTest.peek(db.getSession());
  assertThat(peek.isPresent()).isTrue();
  assertThat(peek.get().getUuid()).isEqualTo("TASK_2");
  assertThat(peek.get().getStatus()).isEqualTo(CeQueueDto.Status.IN_PROGRESS);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.PENDING)).isEqualTo(0);
  assertThat(underTest.countByStatus(db.getSession(),CeQueueDto.Status.IN_PROGRESS)).isEqualTo(2);
  assertThat(underTest.peek(db.getSession()).isPresent()).isFalse();
}
