{
  execute(new FakeRepositoryV1());
  assertThat(dbClient.ruleDao().findAll(dbTester.getSession())).hasSize(2);
  RuleKey ruleKey1=RuleKey.of("fake","rule1");
  RuleDto rule1=dbClient.ruleDao().getNullableByKey(dbTester.getSession(),ruleKey1);
  rule1.setTags(Sets.newHashSet("usertag1","usertag2"));
  rule1.setNoteData("user *note*");
  rule1.setNoteUserLogin("marius");
  dbClient.ruleDao().update(dbTester.getSession(),rule1);
  dbTester.getSession().commit();
  when(system.now()).thenReturn(DATE2.getTime());
  execute(new FakeRepositoryV2());
  rule1=dbClient.ruleDao().getNullableByKey(dbTester.getSession(),ruleKey1);
  assertThat(rule1.getName()).isEqualTo("One v2");
  assertThat(rule1.getDescription()).isEqualTo("Description of One v2");
  assertThat(rule1.getSeverityString()).isEqualTo(Severity.INFO);
  assertThat(rule1.getTags()).containsOnly("usertag1","usertag2");
  assertThat(rule1.getSystemTags()).containsOnly("tag1","tag4");
  assertThat(rule1.getConfigKey()).isEqualTo("config1 v2");
  assertThat(rule1.getNoteData()).isEqualTo("user *note*");
  assertThat(rule1.getNoteUserLogin()).isEqualTo("marius");
  assertThat(rule1.getStatus()).isEqualTo(RuleStatus.READY);
  assertThat(rule1.getCreatedAt()).isEqualTo(DATE1);
  assertThat(rule1.getUpdatedAt()).isEqualTo(DATE2);
  List<RuleParamDto> params=dbClient.ruleDao().findRuleParamsByRuleKey(dbTester.getSession(),ruleKey1);
  assertThat(params).hasSize(2);
  RuleParamDto param=getParam(params,"param1");
  assertThat(param.getDescription()).isEqualTo("parameter one v2");
  assertThat(param.getDefaultValue()).isEqualTo("default1 v2");
  RuleDto rule2=dbClient.ruleDao().getNullableByKey(dbTester.getSession(),RuleKey.of("fake","rule2"));
  assertThat(rule2.getStatus()).isEqualTo(RuleStatus.REMOVED);
  assertThat(rule2.getUpdatedAt()).isEqualTo(DATE2);
  RuleDto rule3=dbClient.ruleDao().getNullableByKey(dbTester.getSession(),RuleKey.of("fake","rule3"));
  assertThat(rule3).isNotNull();
  assertThat(rule3.getStatus()).isEqualTo(RuleStatus.READY);
}
