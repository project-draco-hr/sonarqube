{
  execute(new FakeRepositoryV1());
  assertThat(dbClient.ruleDao().selectAll(dbTester.getSession())).hasSize(2);
  assertThat(esTester.getIds(RuleIndexDefinition.INDEX,RuleIndexDefinition.TYPE_RULE)).containsOnly(RULE_KEY1.toString(),RULE_KEY2.toString());
  RuleDto rule1=dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(),RULE_KEY1);
  rule1.setTags(Sets.newHashSet("usertag1","usertag2"));
  rule1.setNoteData("user *note*");
  rule1.setNoteUserLogin("marius");
  dbClient.ruleDao().update(dbTester.getSession(),rule1);
  dbTester.getSession().commit();
  when(system.now()).thenReturn(DATE2.getTime());
  execute(new FakeRepositoryV2());
  rule1=dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(),RULE_KEY1);
  assertThat(rule1.getName()).isEqualTo("One v2");
  assertThat(rule1.getDescription()).isEqualTo("Description of One v2");
  assertThat(rule1.getSeverityString()).isEqualTo(INFO);
  assertThat(rule1.getTags()).containsOnly("usertag1","usertag2");
  assertThat(rule1.getSystemTags()).containsOnly("tag1","tag4");
  assertThat(rule1.getConfigKey()).isEqualTo("config1 v2");
  assertThat(rule1.getNoteData()).isEqualTo("user *note*");
  assertThat(rule1.getNoteUserLogin()).isEqualTo("marius");
  assertThat(rule1.getStatus()).isEqualTo(RuleStatus.READY);
  assertThat(rule1.getType()).isEqualTo(RuleType.BUG.getDbConstant());
  assertThat(rule1.getCreatedAt()).isEqualTo(DATE1.getTime());
  assertThat(rule1.getUpdatedAt()).isEqualTo(DATE2.getTime());
  List<RuleParamDto> params=dbClient.ruleDao().selectRuleParamsByRuleKey(dbTester.getSession(),RULE_KEY1);
  assertThat(params).hasSize(2);
  RuleParamDto param=getParam(params,"param1");
  assertThat(param.getDescription()).isEqualTo("parameter one v2");
  assertThat(param.getDefaultValue()).isEqualTo("default1 v2");
  RuleDto rule2=dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(),RULE_KEY2);
  assertThat(rule2.getStatus()).isEqualTo(RuleStatus.REMOVED);
  assertThat(rule2.getUpdatedAt()).isEqualTo(DATE2.getTime());
  RuleDto rule3=dbClient.ruleDao().selectOrFailByKey(dbTester.getSession(),RULE_KEY3);
  assertThat(rule3).isNotNull();
  assertThat(rule3.getStatus()).isEqualTo(RuleStatus.READY);
  assertThat(ruleIndex.search(new RuleQuery(),new SearchOptions()).getIds()).containsOnly(RULE_KEY1,RULE_KEY3);
}
