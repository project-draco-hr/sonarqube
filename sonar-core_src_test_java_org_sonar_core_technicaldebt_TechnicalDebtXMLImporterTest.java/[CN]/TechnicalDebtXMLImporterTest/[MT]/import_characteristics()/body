{
  TechnicalDebtRuleCache technicalDebtRuleCache=mockRuleCache();
  String xml=getFileContent("import_characteristics.xml");
  ValidationMessages messages=ValidationMessages.create();
  DefaultTechnicalDebtModel sqale=new TechnicalDebtXMLImporter().importXML(xml,messages,technicalDebtRuleCache);
  assertThat(sqale.rootCharacteristics()).hasSize(2);
  assertThat(sqale.rootCharacteristics().get(0).key()).isEqualTo("PORTABILITY");
  assertThat(sqale.rootCharacteristics().get(1).key()).isEqualTo("MAINTAINABILITY");
  DefaultCharacteristic portability=sqale.characteristicByKey("PORTABILITY");
  assertThat(portability.order()).isEqualTo(1);
  assertThat(portability.children()).hasSize(2);
  assertThat(portability.children().get(0).key()).isEqualTo("COMPILER_RELATED_PORTABILITY");
  assertThat(sqale.characteristicByKey("COMPILER_RELATED_PORTABILITY").parent().key()).isEqualTo("PORTABILITY");
  assertThat(portability.children().get(1).key()).isEqualTo("HARDWARE_RELATED_PORTABILITY");
  assertThat(sqale.characteristicByKey("HARDWARE_RELATED_PORTABILITY").parent().key()).isEqualTo("PORTABILITY");
  DefaultCharacteristic maintainability=sqale.characteristicByKey("MAINTAINABILITY");
  assertThat(maintainability.order()).isEqualTo(2);
  assertThat(maintainability.children()).hasSize(1);
  assertThat(maintainability.children().get(0).key()).isEqualTo("READABILITY");
  assertThat(sqale.characteristicByKey("READABILITY").parent().key()).isEqualTo("MAINTAINABILITY");
}
