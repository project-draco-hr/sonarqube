{
  try {
    StandardContext context=(StandardContext)tomcat.addWebapp(getContextPath(props),webappPath(props));
    context.setClearReferencesHttpClientKeepAliveThread(false);
    context.setClearReferencesStatic(false);
    context.setClearReferencesStopThreads(false);
    context.setClearReferencesStopTimerThreads(false);
    context.setClearReferencesStopTimerThreads(false);
    context.setAntiResourceLocking(false);
    context.setAntiJARLocking(false);
    context.setReloadable(false);
    context.setUseHttpOnly(true);
    context.setProcessTlds(false);
    context.setTldValidation(false);
    context.setTldNamespaceAware(false);
    context.setXmlValidation(false);
    context.setXmlNamespaceAware(false);
    context.setUseNaming(false);
    context.setDelegate(true);
    context.setJarScanner(new NullJarScanner());
    configureRails(props,context);
    for (    Map.Entry<Object,Object> entry : props.encryptedProperties().entrySet()) {
      String key=entry.getKey().toString();
      if (key.startsWith("sonar.")) {
        context.addParameter(key,entry.getValue().toString());
      }
    }
    return context;
  }
 catch (  Exception e) {
    throw new IllegalStateException("Fail to configure webapp",e);
  }
}
