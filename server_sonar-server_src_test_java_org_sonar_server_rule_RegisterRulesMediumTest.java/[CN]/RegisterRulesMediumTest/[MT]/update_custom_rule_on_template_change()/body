{
  register(new Rules(){
    @Override public void init(    RulesDefinition.NewRepository repository){
      repository.createRule("T1").setName("template1 name").setHtmlDescription("template1 desc").setSeverity(Severity.MAJOR).setTemplate(true).createParam("format").setDefaultValue("csv").setType(RuleParamType.STRING).setDescription("format parameter");
    }
  }
);
  Rule template=ruleIndex.getByKey(RuleKey.of("xoo","T1"));
  RuleKey customRuleKey=TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule("CUSTOM_RULE",template.key()).setName("My custom").setHtmlDescription("Some description").setSeverity(Severity.MAJOR).setStatus(RuleStatus.READY).setParameters(ImmutableMap.of("format","txt")));
  register(new Rules(){
    @Override public void init(    RulesDefinition.NewRepository repository){
      RulesDefinition.NewRule rule=repository.createRule("T1").setName("template1 name").setHtmlDescription("template1 desc").setSeverity(Severity.BLOCKER).setStatus(RuleStatus.BETA).setTemplate(true).setInternalKey("new_internal");
      rule.setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY).setDebtRemediationFunction(rule.debtRemediationFunctions().linearWithOffset("1h","30min")).setEffortToFixDescription("Effort");
    }
  }
);
  Rule customRule=ruleIndex.getByKey(customRuleKey);
  assertThat(customRule.language()).isEqualTo("xoo");
  assertThat(customRule.internalKey()).isEqualTo("new_internal");
  assertThat(customRule.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(customRule.status()).isEqualTo(RuleStatus.BETA);
  assertThat(customRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);
  assertThat(customRule.effortToFixDescription()).isEqualTo("Effort");
}
