{
  register(new Rules(){
    @Override public void init(    RulesDefinition.NewRepository repository){
      RulesDefinition.NewRule x1Rule=repository.createRule("x1").setName("x1 name").setMarkdownDescription("x1 desc").setSeverity(Severity.MINOR).setEffortToFixDescription("x1 effort to fix").setTags("tag1");
      x1Rule.createParam("acceptWhitespace").setType(RuleParamType.BOOLEAN).setDefaultValue("false").setDescription("Accept whitespaces on the line");
      x1Rule.createParam("min").setType(RuleParamType.INTEGER);
      x1Rule.setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY).setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset("1h","30min"));
    }
  }
);
  List<RuleDto> rules=db.ruleDao().findAll(dbSession);
  assertThat(rules).hasSize(1);
  assertThat(rules.get(0).getKey()).isEqualTo(RuleKey.of("xoo","x1"));
  List<RuleParamDto> ruleParams=db.ruleDao().findAllRuleParams(dbSession);
  assertThat(ruleParams).hasSize(2);
  Result<Rule> searchResult=ruleIndex.search(new RuleQuery(),new QueryContext());
  assertThat(searchResult.getTotal()).isEqualTo(1);
  assertThat(searchResult.getHits()).hasSize(1);
  Rule rule=ruleIndex.getByKey(RuleKey.of("xoo","x1"));
  assertThat(rule.severity()).isEqualTo(Severity.MINOR);
  assertThat(rule.name()).isEqualTo("x1 name");
  assertThat(rule.htmlDescription()).isEqualTo("x1 desc");
  assertThat(rule.systemTags()).contains("tag1");
  assertThat(rule.language()).contains("xoo");
  assertThat(rule.params()).hasSize(2);
  assertThat(rule.param("acceptWhitespace").type()).isEqualTo(RuleParamType.BOOLEAN);
  assertThat(rule.param("acceptWhitespace").defaultValue()).isEqualTo("false");
  assertThat(rule.param("acceptWhitespace").description()).isEqualTo("Accept whitespaces on the line");
  assertThat(rule.param("min").type()).isEqualTo(RuleParamType.INTEGER);
  assertThat(rule.param("min").defaultValue()).isNull();
  assertThat(rule.param("min").description()).isNull();
  assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);
  assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);
  assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo("1h");
  assertThat(rule.debtRemediationFunction().offset()).isEqualTo("30min");
  assertThat(rule.effortToFixDescription()).isEqualTo("x1 effort to fix");
}
