{
  QualityProfileDto qualityProfileDto1=QualityProfileDto.createFor("profile1","java");
  QualityProfileDto qualityProfileDto2=QualityProfileDto.createFor("profile2","java");
  dbClient.qualityProfileDao().insert(qualityProfileDto1);
  dbClient.qualityProfileDao().insert(qualityProfileDto2);
  RuleDto rule1=newRuleDto(RuleKey.of("java","S001"));
  dao.insert(rule1,dbSession);
  RuleDto rule2=newRuleDto(RuleKey.of("java","S002"));
  dao.insert(rule2,dbSession);
  RuleDto rule3=newRuleDto(RuleKey.of("java","S003"));
  dao.insert(rule3,dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(qualityProfileDto1,rule1).setSeverity("BLOCKER"),dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(qualityProfileDto2,rule1).setSeverity("BLOCKER"),dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(qualityProfileDto1,rule2).setSeverity("BLOCKER"),dbSession);
  dbSession.commit();
  RuleResult result;
  result=index.search(new RuleQuery().setActivation("all"),new QueryOptions());
  assertThat(result.getHits()).hasSize(2);
  result=index.search(new RuleQuery().setActivation("false"),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule3.getName());
  try {
    index.search(new RuleQuery().setActivation("true"),new QueryOptions());
    fail();
  }
 catch (  IllegalStateException e) {
    assertThat(e).hasMessage("qProfile is required when \"activation=true\"");
  }
  result=index.search(new RuleQuery().setActivation("true").setQProfileKey(qualityProfileDto2.getKey().toString()),new QueryOptions());
  assertThat(result.getRules()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule1.getName());
}
