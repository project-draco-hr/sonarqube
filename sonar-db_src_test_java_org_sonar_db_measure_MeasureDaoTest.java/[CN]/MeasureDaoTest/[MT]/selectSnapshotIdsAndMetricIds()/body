{
  MetricDto metric=dbClient.metricDao().insert(dbSession,MetricTesting.newMetricDto());
  ComponentDto project=newProjectDto();
  SnapshotDto projectSnapshot=componentDb.insertProjectAndSnapshot(project);
  SnapshotDto fileSnapshot=componentDb.insertComponentAndSnapshot(newFileDto(project,"file-uuid"),projectSnapshot);
  ComponentDto developer=newDeveloper("Ray Bradbury");
  SnapshotDto developerSnapshot=componentDb.insertDeveloperAndSnapshot(developer);
  componentDb.insertComponentAndSnapshot(newDevProjectCopy("project-copy-uuid",project,developer),developerSnapshot);
  underTest.insert(dbSession,newMeasureDto(metric,developerSnapshot.getId()).setDeveloperId(developer.getId()),newMeasureDto(metric,projectSnapshot.getId()),newMeasureDto(metric,fileSnapshot.getId()));
  dbSession.commit();
  List<MeasureDto> result=underTest.selectBySnapshotIdsAndMetricIds(dbSession,newArrayList(developerSnapshot.getId(),projectSnapshot.getId(),fileSnapshot.getId()),singletonList(metric.getId()));
  assertThat(result).hasSize(2).extracting("snapshotId").containsOnly(projectSnapshot.getId(),fileSnapshot.getId()).doesNotContain(developerSnapshot.getId());
}
