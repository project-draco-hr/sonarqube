{
  db.prepareDbUnit(getClass(),"shared.xml");
  List<MeasureDto> results=underTest.selectBySnapshotIdAndMetricKeys(SNAPSHOT_ID,ImmutableSet.of("ncloc","authors_by_line"),dbSession);
  assertThat(results).hasSize(2);
  Optional<MeasureDto> optional=FluentIterable.from(results).filter(new Predicate<MeasureDto>(){
    @Override public boolean apply(    @Nullable MeasureDto input){
      return input.getId() == 22;
    }
  }
).first();
  assertThat(optional).isPresent();
  MeasureDto result=optional.get();
  assertThat(result.getId()).isEqualTo(22);
  assertThat(result.getMetricId()).isEqualTo(12);
  assertThat(result.getMetricKey()).isNull();
  assertThat(result.getValue()).isEqualTo(10d);
  assertThat(result.getVariation(1)).isEqualTo(1d);
  assertThat(result.getVariation(2)).isEqualTo(2d);
  assertThat(result.getVariation(3)).isEqualTo(3d);
  assertThat(result.getVariation(4)).isEqualTo(4d);
  assertThat(result.getVariation(5)).isEqualTo(-5d);
}
