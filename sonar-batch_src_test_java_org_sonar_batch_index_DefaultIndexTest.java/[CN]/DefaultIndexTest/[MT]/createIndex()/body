{
  MetricFinder metricFinder=mock(MetricFinder.class);
  when(metricFinder.findByKey("ncloc")).thenReturn(CoreMetrics.NCLOC);
  ruleFinder=mock(RuleFinder.class);
  ProjectTree projectTree=mock(ProjectTree.class);
  ResourceCache resourceCache=new ResourceCache();
  index=new DefaultIndex(resourceCache,null,null,projectTree,metricFinder,mock(ResourceKeyMigration.class),mock(MeasureCache.class));
  baseDir=temp.newFolder();
  project=new Project("project");
  when(projectTree.getProjectDefinition(project)).thenReturn(ProjectDefinition.create().setBaseDir(baseDir));
  moduleA=new Project("moduleA").setParent(project);
  when(projectTree.getProjectDefinition(moduleA)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleA")));
  moduleB=new Project("moduleB").setParent(project);
  when(projectTree.getProjectDefinition(moduleB)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleB")));
  moduleB1=new Project("moduleB1").setParent(moduleB);
  when(projectTree.getProjectDefinition(moduleB1)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleB/moduleB1")));
  RulesProfile rulesProfile=RulesProfile.create();
  rule=Rule.create("repoKey","ruleKey","Rule");
  rule.setId(1);
  rulesProfile.activateRule(rule,null);
  index.setCurrentProject(project,mock(ModuleIssues.class));
  index.doStart(project);
}
