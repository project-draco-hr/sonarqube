{
  DeprecatedIssueAdapterForFilter issue=new DeprecatedIssueAdapterForFilter(new Project(PROJECT_KEY).setAnalysisDate(ANALYSIS_DATE),org.sonar.scanner.protocol.output.ScannerReport.Issue.newBuilder().setRuleRepository("repo").setRuleKey("key").setSeverity(Severity.BLOCKER).setMsg("msg").build(),COMPONENT_KEY);
  DeprecatedIssueAdapterForFilter issue2=new DeprecatedIssueAdapterForFilter(new Project(PROJECT_KEY).setAnalysisDate(ANALYSIS_DATE),org.sonar.scanner.protocol.output.ScannerReport.Issue.newBuilder().setRuleRepository("repo").setRuleKey("key").setSeverity(Severity.BLOCKER).setMsg("msg").setTextRange(TextRange.newBuilder().setStartLine(1)).setGap(2.0).build(),COMPONENT_KEY);
  try {
    issue.key();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  assertThat(issue.componentKey()).isEqualTo(COMPONENT_KEY);
  assertThat(issue.ruleKey()).isEqualTo(RuleKey.of("repo","key"));
  try {
    issue.language();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  assertThat(issue.severity()).isEqualTo("BLOCKER");
  assertThat(issue.message()).isEqualTo("msg");
  assertThat(issue.line()).isNull();
  assertThat(issue2.line()).isEqualTo(1);
  assertThat(issue.effortToFix()).isNull();
  assertThat(issue2.effortToFix()).isEqualTo(2.0);
  assertThat(issue.status()).isEqualTo(Issue.STATUS_OPEN);
  assertThat(issue.resolution()).isNull();
  try {
    issue.reporter();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  assertThat(issue.assignee()).isNull();
  assertThat(issue.creationDate()).isEqualTo(ANALYSIS_DATE);
  assertThat(issue.updateDate()).isNull();
  assertThat(issue.closeDate()).isNull();
  assertThat(issue.attribute(PROJECT_KEY)).isNull();
  try {
    issue.authorLogin();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  try {
    issue.comments();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  try {
    issue.isNew();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  try {
    issue.debt();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  assertThat(issue.projectKey()).isEqualTo(PROJECT_KEY);
  try {
    issue.projectUuid();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  try {
    issue.componentUuid();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
  try {
    issue.tags();
    fail("Should be unsupported");
  }
 catch (  Exception e) {
    assertThat(e).isExactlyInstanceOf(UnsupportedOperationException.class).hasMessage("Not available for issues filters");
  }
}
