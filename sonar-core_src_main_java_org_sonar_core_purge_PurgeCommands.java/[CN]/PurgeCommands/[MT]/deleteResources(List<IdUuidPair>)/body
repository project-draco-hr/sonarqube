{
  List<List<Long>> componentIdPartitions=Lists.partition(IdUuidPairs.ids(componentIdUuids),MAX_RESOURCES_PER_QUERY);
  List<List<String>> componentUuidsPartitions=Lists.partition(IdUuidPairs.uuids(componentIdUuids),MAX_RESOURCES_PER_QUERY);
  for (  List<Long> partResourceIds : componentIdPartitions) {
    deleteSnapshots(purgeMapper.selectSnapshotIdsByResource(partResourceIds));
  }
  profiler.start("deleteResourceLinks (project_links)");
  for (  List<String> componentUuidPartition : componentUuidsPartitions) {
    purgeMapper.deleteResourceLinks(componentUuidPartition);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceProperties (properties)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResourceProperties(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceIndex (resource_index)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResourceIndex(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceGroupRoles (group_roles)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResourceGroupRoles(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceUserRoles (user_roles)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResourceUserRoles(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceManualMeasures (manual_measures)");
  for (  List<String> componentUuidPartition : componentUuidsPartitions) {
    purgeMapper.deleteResourceManualMeasures(componentUuidPartition);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteComponentIssueChanges (issue_changes)");
  for (  List<String> componentUuidPartition : componentUuidsPartitions) {
    purgeMapper.deleteComponentIssueChanges(componentUuidPartition);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteComponentIssues (issues)");
  for (  List<String> componentUuidPartition : componentUuidsPartitions) {
    purgeMapper.deleteComponentIssues(componentUuidPartition);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResourceActionPlans (action_plans)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResourceActionPlans(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteComponentEvents (events)");
  for (  List<String> componentUuidPartition : componentUuidsPartitions) {
    purgeMapper.deleteComponentEvents(componentUuidPartition);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteResource (projects)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteResource(partResourceIds);
  }
  session.commit();
  profiler.stop();
  profiler.start("deleteAuthors (authors)");
  for (  List<Long> partResourceIds : componentIdPartitions) {
    purgeMapper.deleteAuthors(partResourceIds);
  }
  session.commit();
  profiler.stop();
}
