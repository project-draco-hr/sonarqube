{
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotDependencies(snapshotId);
  }
  session.commit();
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotDuplications(snapshotId);
  }
  session.commit();
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotSource(snapshotId);
  }
  session.commit();
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotViolations(snapshotId);
  }
  session.commit();
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotGraphs(snapshotId);
  }
  session.commit();
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.deleteSnapshotData(snapshotId);
  }
  session.commit();
  List<Long> metricIdsWithoutHistoricalData=purgeMapper.selectMetricIdsWithoutHistoricalData();
  if (!metricIdsWithoutHistoricalData.isEmpty()) {
    for (    Long snapshotId : snapshotIds) {
      purgeMapper.deleteSnapshotWastedMeasures(snapshotId,metricIdsWithoutHistoricalData);
    }
    session.commit();
  }
  List<Long> characteristicIds=purgeMapper.selectCharacteristicIdsToPurge();
  if (!characteristicIds.isEmpty()) {
    for (    Long snapshotId : snapshotIds) {
      for (      List<Long> ids : Iterables.partition(characteristicIds,MAX_CHARACTERISTICS_PER_QUERY)) {
        purgeMapper.deleteSnapshotMeasuresOnCharacteristics(snapshotId,ids);
      }
    }
    session.commit();
  }
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.updatePurgeStatusToOne(snapshotId);
  }
  session.commit();
}
