{
  List<List<Long>> snapshotIdsPartition=Lists.partition(snapshotIds,MAX_SNAPSHOTS_PER_QUERY);
  deleteSnapshotDependencies(snapshotIdsPartition);
  deleteSnapshotDuplications(snapshotIdsPartition);
  deleteSnapshotSources(snapshotIdsPartition);
  deleteSnapshotGraphs(snapshotIdsPartition);
  deleteSnapshotData(snapshotIdsPartition);
  profiler.start("deleteSnapshotWastedMeasures (project_measures)");
  List<Long> metricIdsWithoutHistoricalData=purgeMapper.selectMetricIdsWithoutHistoricalData();
  if (!metricIdsWithoutHistoricalData.isEmpty()) {
    for (    List<Long> partSnapshotIds : snapshotIdsPartition) {
      purgeMapper.deleteSnapshotWastedMeasures(partSnapshotIds,metricIdsWithoutHistoricalData);
    }
    session.commit();
  }
  profiler.stop();
  profiler.start("deleteSnapshotMeasuresOnCharacteristics (project_measures)");
  List<Long> characteristicIds=purgeMapper.selectCharacteristicIdsToPurge();
  if (!characteristicIds.isEmpty()) {
    for (    List<Long> partSnapshotIds : snapshotIdsPartition) {
      for (      List<Long> ids : Iterables.partition(characteristicIds,MAX_CHARACTERISTICS_PER_QUERY)) {
        purgeMapper.deleteSnapshotMeasuresOnCharacteristics(partSnapshotIds,ids);
      }
    }
    session.commit();
  }
  profiler.stop();
  profiler.start("updatePurgeStatusToOne (snapshots)");
  for (  Long snapshotId : snapshotIds) {
    purgeMapper.updatePurgeStatusToOne(snapshotId);
  }
  session.commit();
  profiler.stop();
}
