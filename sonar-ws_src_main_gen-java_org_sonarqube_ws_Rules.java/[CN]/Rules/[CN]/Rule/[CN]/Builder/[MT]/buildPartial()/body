{
  org.sonarqube.ws.Rules.Rule result=new org.sonarqube.ws.Rules.Rule(this);
  int from_bitField0_=bitField0_;
  int from_bitField1_=bitField1_;
  int to_bitField0_=0;
  int to_bitField1_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.key_=key_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.repo_=repo_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.name_=name_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  result.createdAt_=createdAt_;
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  result.htmlDesc_=htmlDesc_;
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  result.htmlNote_=htmlNote_;
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  result.mdDesc_=mdDesc_;
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000080;
  }
  result.mdNote_=mdNote_;
  if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
    to_bitField0_|=0x00000100;
  }
  result.noteLogin_=noteLogin_;
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000200;
  }
  result.severity_=severity_;
  if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
    to_bitField0_|=0x00000400;
  }
  result.status_=status_;
  if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
    to_bitField0_|=0x00000800;
  }
  result.internalKey_=internalKey_;
  if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
    to_bitField0_|=0x00001000;
  }
  result.isTemplate_=isTemplate_;
  if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
    to_bitField0_|=0x00002000;
  }
  result.templateKey_=templateKey_;
  if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
    to_bitField0_|=0x00004000;
  }
  if (tagsBuilder_ == null) {
    result.tags_=tags_;
  }
 else {
    result.tags_=tagsBuilder_.build();
  }
  if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
    to_bitField0_|=0x00008000;
  }
  if (sysTagsBuilder_ == null) {
    result.sysTags_=sysTags_;
  }
 else {
    result.sysTags_=sysTagsBuilder_.build();
  }
  if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
    to_bitField0_|=0x00010000;
  }
  result.lang_=lang_;
  if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
    to_bitField0_|=0x00020000;
  }
  result.langName_=langName_;
  if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
    to_bitField0_|=0x00040000;
  }
  if (paramsBuilder_ == null) {
    result.params_=params_;
  }
 else {
    result.params_=paramsBuilder_.build();
  }
  if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
    to_bitField0_|=0x00080000;
  }
  result.defaultDebtChar_=defaultDebtChar_;
  if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
    to_bitField0_|=0x00100000;
  }
  result.defaultDebtSubChar_=defaultDebtSubChar_;
  if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
    to_bitField0_|=0x00200000;
  }
  result.debtChar_=debtChar_;
  if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
    to_bitField0_|=0x00400000;
  }
  result.debtSubChar_=debtSubChar_;
  if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
    to_bitField0_|=0x00800000;
  }
  result.debtCharName_=debtCharName_;
  if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
    to_bitField0_|=0x01000000;
  }
  result.debtSubCharName_=debtSubCharName_;
  if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
    to_bitField0_|=0x02000000;
  }
  result.defaultDebtRemFnType_=defaultDebtRemFnType_;
  if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
    to_bitField0_|=0x04000000;
  }
  result.defaultDebtRemFnCoeff_=defaultDebtRemFnCoeff_;
  if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
    to_bitField0_|=0x08000000;
  }
  result.defaultDebtRemFnOffset_=defaultDebtRemFnOffset_;
  if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
    to_bitField0_|=0x10000000;
  }
  result.effortToFixDescription_=effortToFixDescription_;
  if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
    to_bitField0_|=0x20000000;
  }
  result.debtOverloaded_=debtOverloaded_;
  if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
    to_bitField0_|=0x40000000;
  }
  result.debtRemFnType_=debtRemFnType_;
  if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
    to_bitField0_|=0x80000000;
  }
  result.debtRemFnCoeff_=debtRemFnCoeff_;
  if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
    to_bitField1_|=0x00000001;
  }
  result.debtRemFnOffset_=debtRemFnOffset_;
  result.bitField0_=to_bitField0_;
  result.bitField1_=to_bitField1_;
  onBuilt();
  return result;
}
