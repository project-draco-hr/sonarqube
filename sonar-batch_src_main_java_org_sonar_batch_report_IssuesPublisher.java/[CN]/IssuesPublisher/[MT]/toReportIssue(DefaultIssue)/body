{
  BatchReport.Issue.Builder builder=BatchReport.Issue.newBuilder();
  builder.setUuid(issue.key());
  builder.setIsNew(issue.isNew());
  builder.setSeverity(Constants.Severity.valueOf(issue.severity()));
  builder.setRuleRepository(issue.ruleKey().repository());
  builder.setRuleKey(issue.ruleKey().rule());
  builder.setAttributes(KeyValueFormat.format(issue.attributes()));
  builder.addAllTags(issue.tags());
  builder.setMustSendNotification(issue.mustSendNotifications());
  builder.setIsChanged(issue.isChanged());
  Integer line=issue.line();
  if (line != null) {
    builder.setLine(line);
  }
  builder.setMsg(issue.message());
  if (issue.effortToFix() != null) {
    builder.setEffortToFix(issue.effortToFix());
  }
  if (issue.debtInMinutes() != null) {
    builder.setDebtInMinutes(issue.debtInMinutes());
  }
  if (issue.resolution() != null) {
    builder.setResolution(issue.resolution());
  }
  if (issue.status() != null) {
    builder.setStatus(issue.status());
  }
  if (issue.checksum() != null) {
    builder.setChecksum(issue.checksum());
  }
  builder.setManualSeverity(issue.manualSeverity());
  if (issue.reporter() != null) {
    builder.setReporter(issue.reporter());
  }
  if (issue.assignee() != null) {
    builder.setAssignee(issue.assignee());
  }
  if (issue.actionPlanKey() != null) {
    builder.setActionPlanKey(issue.actionPlanKey());
  }
  if (issue.authorLogin() != null) {
    builder.setAuthorLogin(issue.authorLogin());
  }
  String diff=diffsToString(issue.currentChange());
  if (diff != null) {
    builder.setDiffFields(diff);
  }
  Date creationDate=issue.creationDate();
  if (creationDate != null) {
    builder.setCreationDate(creationDate.getTime());
  }
  Long selectedAt=issue.selectedAt();
  if (selectedAt != null) {
    builder.setSelectedAt(selectedAt);
  }
  Date closeDate=issue.closeDate();
  if (closeDate != null) {
    builder.setCloseDate(closeDate.getTime());
  }
  Date updateDate=issue.updateDate();
  if (updateDate != null) {
    builder.setUpdateDate(updateDate.getTime());
  }
  return builder.build();
}
