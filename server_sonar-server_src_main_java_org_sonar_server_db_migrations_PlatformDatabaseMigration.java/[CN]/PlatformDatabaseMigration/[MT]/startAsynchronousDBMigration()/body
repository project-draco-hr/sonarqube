{
  if (this.running.get()) {
    return;
  }
  running.getAndSet(true);
  executorService.execute(new Runnable(){
    @Override public void run(){
      status=Status.RUNNING;
      startDate=new Date();
      failureError=null;
      Profiler profiler=Profiler.create(LOGGER);
      try {
        profiler.startInfo("Starting DB Migration");
        upgradeDb();
        restartContainer();
        recreateWebRoutes();
        status=Status.SUCCEEDED;
        profiler.stopInfo("DB Migration ended successfully");
      }
 catch (      Throwable t) {
        profiler.stopInfo("DB migration failed");
        LOGGER.error("DB Migration or container restart failed. Process ended with an exception",t);
        status=Status.FAILED;
        failureError=t;
      }
 finally {
        running.getAndSet(false);
      }
    }
    private void upgradeDb(){
      Profiler profiler=Profiler.createIfTrace(LOGGER);
      profiler.startTrace("Starting DB Migration");
      rubyBridge.databaseMigration().trigger();
      profiler.stopTrace("DB Migration ended");
    }
    private void restartContainer(){
      Profiler profiler=Profiler.createIfTrace(LOGGER);
      profiler.startTrace("Restarting container");
      platform.doStart();
      profiler.stopTrace("Container restarted successfully");
    }
    private void recreateWebRoutes(){
      Profiler profiler=Profiler.createIfTrace(LOGGER);
      profiler.startTrace("Recreating web routes");
      rubyBridge.railsRoutes().recreate();
      profiler.startTrace("Routes recreated successfully");
    }
  }
);
}
