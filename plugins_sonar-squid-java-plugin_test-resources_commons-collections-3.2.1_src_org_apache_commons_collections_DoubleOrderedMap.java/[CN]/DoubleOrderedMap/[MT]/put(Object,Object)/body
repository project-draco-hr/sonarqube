{
  checkKeyAndValue(key,value);
  Node node=rootNode[KEY];
  if (node == null) {
    Node root=new Node((Comparable)key,(Comparable)value);
    rootNode[KEY]=root;
    rootNode[VALUE]=root;
    grow();
  }
 else {
    while (true) {
      int cmp=compare((Comparable)key,node.getData(KEY));
      if (cmp == 0) {
        throw new IllegalArgumentException("Cannot store a duplicate key (\"" + key + "\") in this Map");
      }
 else       if (cmp < 0) {
        if (node.getLeft(KEY) != null) {
          node=node.getLeft(KEY);
        }
 else {
          Node newNode=new Node((Comparable)key,(Comparable)value);
          insertValue(newNode);
          node.setLeft(newNode,KEY);
          newNode.setParent(node,KEY);
          doRedBlackInsert(newNode,KEY);
          grow();
          break;
        }
      }
 else {
        if (node.getRight(KEY) != null) {
          node=node.getRight(KEY);
        }
 else {
          Node newNode=new Node((Comparable)key,(Comparable)value);
          insertValue(newNode);
          node.setRight(newNode,KEY);
          newNode.setParent(node,KEY);
          doRedBlackInsert(newNode,KEY);
          grow();
          break;
        }
      }
    }
  }
  return null;
}
