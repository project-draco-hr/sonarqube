{
  if (collectionOfValues[KEY] == null) {
    collectionOfValues[KEY]=new AbstractCollection(){
      public Iterator iterator(){
        return new DoubleOrderedMapIterator(KEY){
          protected Object doGetNext(){
            return lastReturnedNode.getData(VALUE);
          }
        }
;
      }
      public int size(){
        return DoubleOrderedMap.this.size();
      }
      public boolean contains(      Object o){
        return containsValue(o);
      }
      public boolean remove(      Object o){
        int oldNodeCount=nodeCount;
        removeValue(o);
        return nodeCount != oldNodeCount;
      }
      public boolean removeAll(      Collection c){
        boolean modified=false;
        Iterator iter=c.iterator();
        while (iter.hasNext()) {
          if (removeValue(iter.next()) != null) {
            modified=true;
          }
        }
        return modified;
      }
      public void clear(){
        DoubleOrderedMap.this.clear();
      }
    }
;
  }
  return collectionOfValues[KEY];
}
