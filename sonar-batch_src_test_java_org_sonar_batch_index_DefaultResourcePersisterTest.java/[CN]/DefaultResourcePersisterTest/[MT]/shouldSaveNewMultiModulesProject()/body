{
  setupData("shared");
  ResourcePersister persister=new DefaultResourcePersister(getSession(),mock(ResourcePermissions.class),snapshotCache,resourceCache);
  persister.saveProject(multiModuleProject,null);
  persister.saveProject(moduleA,multiModuleProject);
  persister.saveProject(moduleB,multiModuleProject);
  persister.saveProject(moduleB1,moduleB);
  checkTables("shouldSaveNewMultiModulesProject",new String[]{"build_date","created_at","authorization_updated_at","uuid","project_uuid","module_uuid","module_uuid_path"},"projects","snapshots");
  enableSnapshot(1001);
  enableSnapshot(1002);
  enableSnapshot(1003);
  enableSnapshot(1004);
  SqlSession session=getMyBatis().openSession(false);
  try {
    ComponentDto root=session.getMapper(ComponentMapper.class).selectByKey("root");
    assertThat(root.uuid()).isNotNull();
    assertThat(root.projectUuid()).isEqualTo(root.uuid());
    assertThat(root.moduleUuid()).isNull();
    assertThat(root.moduleUuidPath()).isNull();
    ComponentDto a=session.getMapper(ComponentMapper.class).selectByKey("a");
    assertThat(a.uuid()).isNotNull();
    assertThat(a.projectUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuidPath()).isEqualTo(root.uuid());
    ComponentDto b=session.getMapper(ComponentMapper.class).selectByKey("b");
    assertThat(b.uuid()).isNotNull();
    assertThat(b.projectUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuidPath()).isEqualTo(root.uuid());
    ComponentDto b1=session.getMapper(ComponentMapper.class).selectByKey("b1");
    assertThat(b1.uuid()).isNotNull();
    assertThat(b1.projectUuid()).isEqualTo(root.uuid());
    assertThat(b1.moduleUuid()).isEqualTo(b.uuid());
    assertThat(b1.moduleUuidPath()).isEqualTo(root.uuid() + "." + b.uuid());
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
