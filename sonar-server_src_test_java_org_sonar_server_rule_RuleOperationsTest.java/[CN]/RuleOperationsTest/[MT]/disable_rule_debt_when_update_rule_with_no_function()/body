{
  RuleDto dto=new RuleDto().setId(1).setRepositoryKey("squid").setRuleKey("UselessImportCheck").setDefaultSubCharacteristicId(6).setDefaultRemediationFunction("CONSTANT_ISSUE").setDefaultRemediationOffset("10min");
  RuleKey ruleKey=RuleKey.of("squid","UselessImportCheck");
  when(ruleDao.getByKey(ruleKey,session)).thenReturn(dto);
  CharacteristicDto subCharacteristic=new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler").setParentId(1);
  when(characteristicDao.selectByKey("COMPILER",session)).thenReturn(subCharacteristic);
  when(characteristicDao.selectById(2,session)).thenReturn(subCharacteristic);
  CharacteristicDto characteristic=new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability").setOrder(2);
  when(characteristicDao.selectById(1,session)).thenReturn(characteristic);
  operations.updateRule(new RuleChange().setRuleKey(ruleKey).setDebtCharacteristicKey("COMPILER"),authorizedUserSession);
  verify(ruleDao).update(ruleCaptor.capture(),eq(session));
  verify(session).commit();
  RuleDto result=ruleCaptor.getValue();
  assertThat(result.getId()).isEqualTo(1);
  assertThat(result.getSubCharacteristicId()).isEqualTo(-1);
  assertThat(result.getRemediationFunction()).isNull();
  assertThat(result.getRemediationCoefficient()).isNull();
  assertThat(result.getRemediationOffset()).isNull();
}
