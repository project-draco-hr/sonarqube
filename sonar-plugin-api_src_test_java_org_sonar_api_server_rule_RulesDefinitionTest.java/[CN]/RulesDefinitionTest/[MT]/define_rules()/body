{
  RulesDefinition.NewRepository newFindbugs=context.createRepository("findbugs","java");
  newFindbugs.createRule("NPE").setName("Detect NPE").setHtmlDescription("Detect <code>java.lang.NullPointerException</code>").setSeverity(Severity.BLOCKER).setInternalKey("/something").setStatus(RuleStatus.BETA).setDebtCharacteristic("COMPILER").setDebtRemediationFunction(DebtRemediationFunction.create(DebtRemediationFunction.Type.LINEAR_OFFSET,"1h","10min")).setEffortToFixL10nKey("squid.S115.effortToFix").setTags("one","two").addTags("two","three","four");
  newFindbugs.createRule("ABC").setName("ABC").setHtmlDescription("ABC");
  newFindbugs.done();
  RulesDefinition.Repository findbugs=context.repository("findbugs");
  assertThat(findbugs.rules()).hasSize(2);
  RulesDefinition.Rule npeRule=findbugs.rule("NPE");
  assertThat(npeRule.key()).isEqualTo("NPE");
  assertThat(npeRule.name()).isEqualTo("Detect NPE");
  assertThat(npeRule.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(npeRule.htmlDescription()).isEqualTo("Detect <code>java.lang.NullPointerException</code>");
  assertThat(npeRule.tags()).containsOnly("one","two","three","four");
  assertThat(npeRule.params()).isEmpty();
  assertThat(npeRule.internalKey()).isEqualTo("/something");
  assertThat(npeRule.template()).isFalse();
  assertThat(npeRule.status()).isEqualTo(RuleStatus.BETA);
  assertThat(npeRule.debtCharacteristic()).isEqualTo("COMPILER");
  assertThat(npeRule.debtRemediationFunction()).isEqualTo(DebtRemediationFunction.create(DebtRemediationFunction.Type.LINEAR_OFFSET,"1h","10min"));
  assertThat(npeRule.effortToFixL10nKey()).isEqualTo("squid.S115.effortToFix");
  assertThat(npeRule.toString()).isEqualTo("[repository=findbugs, key=NPE]");
  assertThat(npeRule.repository()).isSameAs(findbugs);
  RulesDefinition.Rule otherRule=findbugs.rule("ABC");
  assertThat(npeRule).isEqualTo(npeRule).isNotEqualTo(otherRule).isNotEqualTo("NPE").isNotEqualTo(null);
  assertThat(npeRule.hashCode()).isEqualTo(npeRule.hashCode());
}
