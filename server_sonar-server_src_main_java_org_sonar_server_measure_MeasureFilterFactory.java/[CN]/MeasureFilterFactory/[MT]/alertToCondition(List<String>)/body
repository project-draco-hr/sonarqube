{
  if (alertLevels == null || alertLevels.isEmpty()) {
    return null;
  }
  final List<String> availableLevels=Lists.transform(Arrays.asList(Metric.Level.values()),new Function<Metric.Level,String>(){
    @Override public String apply(    @Nullable Metric.Level input){
      return input != null ? input.name() : null;
    }
  }
);
  List<String> alertLevelsUppercase=Lists.transform(alertLevels,new Function<String,String>(){
    @Override public String apply(    @Nullable String input){
      return input != null && availableLevels.contains(input.toUpperCase()) ? input.toUpperCase() : null;
    }
  }
);
  String val="('" + Joiner.on("', '").skipNulls().join(alertLevelsUppercase) + "')";
  Metric metric=metricFinder.findByKey(CoreMetrics.ALERT_STATUS_KEY);
  if (metric != null) {
    MeasureFilterCondition.Operator operator=MeasureFilterCondition.Operator.fromCode("in");
    return new MeasureFilterCondition(metric,operator,val);
  }
  return null;
}
