{
  assertIssueHasNoChange(issue.key());
  adminIssueClient().doTransition(issue.key(),"resolve");
  xooSampleAnalysis.run();
  List<IssueChange> changes=retrieveChangeForIssue(issue.key());
  assertThat(changes).hasSize(2);
  IssueChange change1=changes.get(0);
  assertThat(change1.user()).isEqualTo("admin");
  assertThat(change1.creationDate()).isNotNull();
  assertThat(change1.diffs()).hasSize(2);
  IssueChangeDiff change1Diff1=change1.diffs().get(0);
  assertThat(change1Diff1.key()).isEqualTo("resolution");
  assertThat(change1Diff1.oldValue()).isNull();
  assertThat(change1Diff1.newValue()).isEqualTo("FIXED");
  IssueChangeDiff change1Diff2=change1.diffs().get(1);
  assertThat(change1Diff2.key()).isEqualTo("status");
  assertThat(change1Diff2.oldValue()).isEqualTo("OPEN");
  assertThat(change1Diff2.newValue()).isEqualTo("RESOLVED");
  IssueChange change2=changes.get(1);
  assertThat(change2.user()).isNull();
  assertThat(change2.creationDate()).isNotNull();
  assertThat(change2.diffs()).hasSize(2);
  IssueChangeDiff changeDiff1=change2.diffs().get(0);
  assertThat(changeDiff1.key()).isEqualTo("resolution");
  assertThat(changeDiff1.oldValue()).isNull();
  assertThat(changeDiff1.newValue()).isNull();
  IssueChangeDiff changeDiff2=change2.diffs().get(1);
  assertThat(changeDiff2.key()).isEqualTo("status");
  assertThat(changeDiff2.oldValue()).isEqualTo("RESOLVED");
  assertThat(changeDiff2.newValue()).isEqualTo("REOPENED");
}
