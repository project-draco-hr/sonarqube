{
  when(ruleDao.selectEnabledAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setId(5).setRepositoryKey("squid").setRuleKey("XPath").setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("15min"),new RuleDto().setId(6).setRepositoryKey("squid").setRuleKey("XPath_1369910135").setTemplateId(5).setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("15min")));
  RulesDefinition.Context context=new RulesDefinition.Context();
  RulesDefinition.NewRepository repo=context.createRepository("squid","java").setName("XPath");
  RulesDefinition.NewRule newRule=repo.createRule("XPath").setName("XPath").setHtmlDescription("XPath").setSeverity(Severity.BLOCKER).setStatus(RuleStatus.BETA);
  newRule.setDebtRemediationFunction(newRule.debtRemediationFunctions().linearWithOffset("4h","20min"));
  repo.done();
  when(defLoader.load()).thenReturn(context);
  underTest.reset();
  verify(ruleDao).selectEnabledAndNonManual(session);
  verify(ruleDao,times(2)).update(eq(session),ruleCaptor.capture());
  verifyNoMoreInteractions(ruleDao);
  verify(session).commit();
  verify(ruleIndexer).index();
  RuleDto rule=ruleCaptor.getAllValues().get(1);
  assertThat(rule.getId()).isEqualTo(6);
  assertThat(rule.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(rule.getDefaultRemediationCoefficient()).isEqualTo("4h");
  assertThat(rule.getDefaultRemediationOffset()).isEqualTo("20min");
  assertThat(rule.getUpdatedAtInMs()).isEqualTo(now.getTime());
  assertThat(rule.getRemediationFunction()).isNull();
  assertThat(rule.getRemediationCoefficient()).isNull();
  assertThat(rule.getRemediationOffset()).isNull();
  assertThat(rule.getUpdatedAtInMs()).isEqualTo(now.getTime());
}
