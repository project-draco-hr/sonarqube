{
  when(ruleDao.selectEnabledAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setRepositoryKey("squid").setRuleKey("NPE").setDefaultRemediationFunction(DebtRemediationFunction.Type.LINEAR.toString()).setDefaultRemediationCoefficient("2h").setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("15min")));
  RulesDefinition.Context context=new RulesDefinition.Context();
  RulesDefinition.NewRepository repo=context.createRepository("squid","java").setName("Squid");
  RulesDefinition.NewRule newRule=repo.createRule("NPE").setName("Detect NPE").setHtmlDescription("Detect <code>java.lang.NullPointerException</code>").setSeverity(Severity.BLOCKER).setStatus(RuleStatus.BETA);
  newRule.setDebtRemediationFunction(newRule.debtRemediationFunctions().linearWithOffset("4h","20min"));
  repo.done();
  when(defLoader.load()).thenReturn(context);
  underTest.reset();
  verify(ruleDao).selectEnabledAndNonManual(session);
  verify(ruleDao).update(eq(session),ruleCaptor.capture());
  verifyNoMoreInteractions(ruleDao);
  verify(session).commit();
  verify(ruleIndexer).index();
  RuleDto rule=ruleCaptor.getValue();
  assertThat(rule.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(rule.getDefaultRemediationCoefficient()).isEqualTo("4h");
  assertThat(rule.getDefaultRemediationOffset()).isEqualTo("20min");
  assertThat(rule.getUpdatedAt()).isEqualTo(now.getTime());
  assertThat(rule.getRemediationFunction()).isNull();
  assertThat(rule.getRemediationCoefficient()).isNull();
  assertThat(rule.getRemediationOffset()).isNull();
  assertThat(rule.getUpdatedAt()).isEqualTo(now.getTime());
}
