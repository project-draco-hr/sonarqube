{
  when(ruleDao.selectEnabled(session)).thenReturn(newArrayList(new RuleDto().setRepositoryKey("squid").setRuleKey("UselessImportCheck").setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationGapMultiplier("2h").setRemediationBaseEffort("15min"),new RuleDto().setRepositoryKey("squid").setRuleKey("AvoidNPE").setDefaultRemediationFunction("LINEAR").setDefaultRemediationGapMultiplier("2h")));
  underTest.backup();
  verify(debtModelXMLExporter).export(ruleDebtListCaptor.capture());
  List<RuleDebt> rules=ruleDebtListCaptor.getValue();
  assertThat(rules).hasSize(2);
  RuleDebt rule=rules.get(0);
  assertThat(rule.ruleKey().repository()).isEqualTo("squid");
  assertThat(rule.ruleKey().rule()).isEqualTo("UselessImportCheck");
  assertThat(rule.function()).isEqualTo("LINEAR_OFFSET");
  assertThat(rule.coefficient()).isEqualTo("2h");
  assertThat(rule.offset()).isEqualTo("15min");
  rule=rules.get(1);
  assertThat(rule.ruleKey().repository()).isEqualTo("squid");
  assertThat(rule.ruleKey().rule()).isEqualTo("AvoidNPE");
  assertThat(rule.function()).isEqualTo("LINEAR");
  assertThat(rule.coefficient()).isEqualTo("2h");
  assertThat(rule.offset()).isNull();
}
