{
  when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setParentId(1).setOrder(1).setCreatedAt(oldDate).setUpdatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler updated").setCreatedAt(oldDate).setUpdatedAt(oldDate)));
  underTest.restoreCharacteristics(session,new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"),now);
  verify(dao,times(2)).update(characteristicCaptor.capture(),eq(session));
  CharacteristicDto dto1=characteristicCaptor.getAllValues().get(0);
  assertThat(dto1.getId()).isEqualTo(1);
  assertThat(dto1.getKey()).isEqualTo("PORTABILITY");
  assertThat(dto1.getParentId()).isNull();
  assertThat(dto1.getUpdatedAt()).isEqualTo(now);
  CharacteristicDto dto2=characteristicCaptor.getAllValues().get(1);
  assertThat(dto2.getId()).isEqualTo(2);
  assertThat(dto2.getKey()).isEqualTo("COMPILER");
  assertThat(dto2.getParentId()).isEqualTo(1);
  assertThat(dto2.getUpdatedAt()).isEqualTo(now);
}
