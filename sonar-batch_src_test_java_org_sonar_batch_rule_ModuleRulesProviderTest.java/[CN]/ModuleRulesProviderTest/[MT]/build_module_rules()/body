{
  setupData("shared");
  QualityProfileDao profileDao=new QualityProfileDao(getMyBatis());
  when(qProfiles.findAll()).thenReturn(Arrays.asList(new ModuleQProfiles.QProfile(profileDao.selectById(2)),new ModuleQProfiles.QProfile(profileDao.selectById(3))));
  ModuleRulesProvider provider=new ModuleRulesProvider();
  ActiveRuleDao activeRuleDao=new ActiveRuleDao(getMyBatis());
  ModuleRules moduleRules=provider.provide(qProfiles,activeRuleDao,ruleFinder);
  assertThat(moduleRules.findAll()).hasSize(2);
  assertThat(moduleRules.findByRepository("squid")).hasSize(1);
  assertThat(moduleRules.findByRepository("phpunit")).hasSize(1);
  assertThat(moduleRules.findByRepository("unknown")).isEmpty();
  ModuleRule squidRule=moduleRules.find(RuleKey.of("squid","S0001"));
  assertThat(squidRule.severity()).isEqualTo(Severity.INFO);
  assertThat(squidRule.engineKey()).isNull();
  assertThat(squidRule.params()).hasSize(2);
  assertThat(squidRule.param("max")).isEqualTo("20");
  assertThat(squidRule.param("format")).isEqualTo("html");
  ModuleRule phpRule=moduleRules.find(RuleKey.of("phpunit","P1"));
  assertThat(phpRule.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(phpRule.params()).isEmpty();
}
