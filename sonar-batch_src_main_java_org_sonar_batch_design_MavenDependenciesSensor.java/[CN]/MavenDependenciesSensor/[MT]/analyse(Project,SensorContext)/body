{
  if (settings.hasKey(SONAR_MAVEN_PROJECT_DEPENDENCY)) {
    LOG.debug("Using dependency provided by property " + SONAR_MAVEN_PROJECT_DEPENDENCY);
    String depsAsJson=settings.getString(SONAR_MAVEN_PROJECT_DEPENDENCY);
    Collection<InputDependency> deps;
    try {
      GsonBuilder gsonBuilder=new GsonBuilder();
      gsonBuilder.registerTypeAdapter(InputDependency.class,new DependencyDeserializer());
      Gson gson=gsonBuilder.create();
      Type collectionType=new TypeToken<Collection<InputDependency>>(){
      }
.getType();
      deps=gson.fromJson(depsAsJson,collectionType);
      saveDependencies(project,project,deps,context);
    }
 catch (    Exception e) {
      throw new IllegalStateException("Unable to deserialize dependency information: " + depsAsJson,e);
    }
  }
 else   if (treeBuilder != null) {
    computeDependencyTree(project,context);
  }
}
