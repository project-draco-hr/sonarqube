{
  DbSession session=dbClient.openSession(true);
  IssueMapper mapper=session.getMapper(IssueMapper.class);
  IssueChangeMapper changeMapper=session.getMapper(IssueChangeMapper.class);
  CloseableIterator<DefaultIssue> issues=issueCache.traverse();
  try {
    while (issues.hasNext()) {
      DefaultIssue issue=issues.next();
      boolean saved=false;
      if (issue.isNew()) {
        Integer ruleId=ruleCache.get(issue.ruleKey()).getId();
        mapper.insert(IssueDto.toDtoForComputationInsert(issue,ruleId,system2.now()));
        saved=true;
      }
 else       if (issue.isChanged()) {
        IssueDto dto=IssueDto.toDtoForUpdate(issue,system2.now());
        if (Issue.STATUS_CLOSED.equals(issue.status()) || issue.selectedAt() == null) {
          mapper.update(dto);
        }
 else {
          int updateCount=mapper.updateIfBeforeSelectedDate(dto);
          if (updateCount == 0) {
            conflictResolver.resolve(issue,mapper);
          }
        }
        saved=true;
      }
      if (saved) {
        insertChanges(changeMapper,issue);
      }
    }
    session.flushStatements();
    session.commit();
  }
  finally {
    MyBatis.closeQuietly(session);
    issues.close();
  }
}
