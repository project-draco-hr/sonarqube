{
  ArtifactVersion mavenVersion=getMavenVersion();
  if (mavenVersion.getMajorVersion() == 2 && mavenVersion.getMinorVersion() < 2) {
    throw new MojoExecutionException("Please use at least Maven 2.2.x to perform SonarQube analysis (current version is " + mavenVersion.toString() + ")");
  }
  EmbeddedRunner runner=EmbeddedRunner.create().setApp("Maven",mavenVersion.toString()).addProperties(session.getExecutionProperties()).addProperties(project.getModel().getProperties()).addProperties(session.getUserProperties());
  String encoding=getSourceEncoding(project);
  if (encoding != null) {
    runner.setProperty(ScanProperties.PROJECT_SOURCE_ENCODING,encoding);
  }
  runner.setProperty(ScanProperties.PROJECT_KEY,getSonarKey(project)).setProperty(RunnerProperties.WORK_DIR,getSonarWorkDir(project).getAbsolutePath()).setProperty(ScanProperties.PROJECT_BASEDIR,project.getBasedir().getAbsolutePath()).setProperty(ScanProperties.PROJECT_VERSION,toString(project.getVersion())).setProperty(ScanProperties.PROJECT_NAME,toString(project.getName())).setProperty(ScanProperties.PROJECT_DESCRIPTION,toString(project.getDescription())).setProperty(ScanProperties.PROJECT_SOURCE_DIRS,".");
  runner.mask("org.slf4j.LoggerFactory").unmask("org.slf4j.Logger").unmask("org.slf4j.ILoggerFactory").mask("org.slf4j.").mask("ch.qos.logback.").mask("org.sonar.").unmask("");
  runner.addExtensions(session,getLog(),lifecycleExecutor,artifactFactory,localRepository,artifactMetadataSource,artifactCollector,dependencyTreeBuilder,projectBuilder);
  if (getLog().isDebugEnabled()) {
    runner.setProperty("sonar.verbose","true");
  }
  runner.execute();
}
