{
  final List<Dependency> result=new ArrayList<SonarMojo.Dependency>();
  try {
    DependencyNode root=dependencyTreeBuilder.buildDependencyTree(project,localRepository,artifactFactory,artifactMetadataSource,null,artifactCollector);
    DependencyNodeVisitor visitor=new BuildingDependencyNodeVisitor(new DependencyNodeVisitor(){
      private Stack<Dependency> stack=new Stack<SonarMojo.Dependency>();
      public boolean visit(      DependencyNode node){
        if (node.getParent() != null && node.getParent() != node) {
          Dependency dependency=toDependency(node);
          if (stack.isEmpty()) {
            result.add(dependency);
          }
 else {
            stack.peek().dependencies().add(dependency);
          }
          stack.push(dependency);
        }
        return true;
      }
      public boolean endVisit(      DependencyNode node){
        if (!stack.isEmpty()) {
          stack.pop();
        }
        return true;
      }
    }
);
    DependencyNodeFilter filter=StateDependencyNodeFilter.INCLUDED;
    CollectingDependencyNodeVisitor collectingVisitor=new CollectingDependencyNodeVisitor();
    DependencyNodeVisitor firstPassVisitor=new FilteringDependencyNodeVisitor(collectingVisitor,filter);
    root.accept(firstPassVisitor);
    DependencyNodeFilter secondPassFilter=new AncestorOrSelfDependencyNodeFilter(collectingVisitor.getNodes());
    visitor=new FilteringDependencyNodeVisitor(visitor,secondPassFilter);
    root.accept(visitor);
  }
 catch (  DependencyTreeBuilderException e) {
    throw new IllegalStateException("Can not load the graph of dependencies of the project " + getSonarKey(project),e);
  }
  return result;
}
