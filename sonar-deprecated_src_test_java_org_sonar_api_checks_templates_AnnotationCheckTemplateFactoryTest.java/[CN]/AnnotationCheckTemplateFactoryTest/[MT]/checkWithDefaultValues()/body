{
  BundleCheckTemplate check=new AnnotationCheckTemplateFactory(null).create(SimpleAnnotatedCheck.class);
  assertNotNull(check);
  assertThat(check.getKey(),is("org.sonar.api.checks.samples.SimpleAnnotatedCheck"));
  assertThat(check.getTitle(DEFAULT_LOCALE),is("org.sonar.api.checks.samples.SimpleAnnotatedCheck"));
  assertThat(check.getTitle(ALTERNATIVE_LOCALE),is("org.sonar.api.checks.samples.SimpleAnnotatedCheck"));
  assertThat(check.getTitle(UNKNOWN_LOCALE),is("org.sonar.api.checks.samples.SimpleAnnotatedCheck"));
  assertThat(check.getDescription(DEFAULT_LOCALE),is(""));
  assertThat(check.getDescription(ALTERNATIVE_LOCALE),is(""));
  assertThat(check.getDescription(UNKNOWN_LOCALE),is(""));
  assertEquals(IsoCategory.Efficiency,check.getIsoCategory());
  assertThat(check.getProperties().size(),is(2));
  Iterator<CheckTemplateProperty> it=check.getProperties().iterator();
  CheckTemplateProperty maxTemplateProperty=it.next();
  assertThat(maxTemplateProperty.getKey(),is("max"));
  assertThat(maxTemplateProperty.getDescription(DEFAULT_LOCALE),is(""));
  assertThat(maxTemplateProperty.getDescription(ALTERNATIVE_LOCALE),is(""));
  assertThat(maxTemplateProperty.getDescription(UNKNOWN_LOCALE),is(""));
  CheckTemplateProperty minTemplateProperty=it.next();
  assertThat(minTemplateProperty.getKey(),is("min"));
}
