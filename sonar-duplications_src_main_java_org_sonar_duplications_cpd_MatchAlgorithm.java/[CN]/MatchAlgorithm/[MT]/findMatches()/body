{
  cpdListener.phaseUpdate(CPDListener.HASH);
  Map<TokenEntry,Object> markGroups=hash();
  cpdListener.phaseUpdate(CPDListener.MATCH);
  MatchCollector matchCollector=new MatchCollector(this);
  for (Iterator<Object> i=markGroups.values().iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof List) {
      List<TokenEntry> l=(List<TokenEntry>)o;
      Collections.reverse(l);
      matchCollector.collect(l);
    }
    i.remove();
  }
  cpdListener.phaseUpdate(CPDListener.GROUPING);
  matches=matchCollector.getMatches();
  matchCollector=null;
  for (  Match match : matches) {
    for (Iterator<TokenEntry> occurrences=match.iterator(); occurrences.hasNext(); ) {
      TokenEntry mark=occurrences.next();
      match.setLineCount(tokens.getLineCount(mark,match));
      if (loadSourceCodeSlices && !occurrences.hasNext()) {
        int start=mark.getBeginLine();
        int end=start + match.getLineCount() - 1;
        SourceCode sourceCode=source.get(mark.getTokenSrcID());
        match.setSourceCodeSlice(sourceCode.getSlice(start,end));
      }
    }
  }
  cpdListener.phaseUpdate(CPDListener.DONE);
}
