{
  ProjectDefinition rootProject=loadProjectDefinition("multi-module-definitions-all-in-root");
  assertThat(rootProject.getKey()).isEqualTo("com.foo.project");
  assertThat(rootProject.getName()).isEqualTo("Foo Project");
  assertThat(rootProject.getVersion()).isEqualTo("1.0-SNAPSHOT");
  assertThat(rootProject.getDescription()).isEqualTo("Description of Foo Project");
  assertThat(rootProject.sources().contains("sources")).isFalse();
  assertThat(rootProject.tests().contains("tests")).isFalse();
  assertThat(rootProject.properties().get("module1.sonar.projectKey")).isNull();
  assertThat(rootProject.properties().get("module2.sonar.projectKey")).isNull();
  assertThat(rootProject.getBaseDir().getCanonicalFile()).isEqualTo(getResource(this.getClass(),"multi-module-definitions-all-in-root"));
  assertThat(rootProject.getWorkDir().getCanonicalFile()).isEqualTo(new File(getResource(this.getClass(),"multi-module-definitions-all-in-root"),".sonar"));
  List<ProjectDefinition> modules=rootProject.getSubProjects();
  assertThat(modules.size()).isEqualTo(2);
  ProjectDefinition module1=modules.get(0);
  assertThat(module1.getBaseDir().getCanonicalFile()).isEqualTo(getResource(this.getClass(),"multi-module-definitions-all-in-root/module1"));
  assertThat(module1.getKey()).isEqualTo("com.foo.project:module1");
  assertThat(module1.getName()).isEqualTo("module1");
  assertThat(module1.getVersion()).isEqualTo("1.0-SNAPSHOT");
  assertThat(module1.getDescription()).isNull();
  assertThat(module1.sources()).contains("sources");
  assertThat(module1.tests()).contains("tests");
  assertThat(module1.properties().get("module1.sonar.projectKey")).isNull();
  assertThat(module1.properties().get("module2.sonar.projectKey")).isNull();
  assertThat(module1.getBaseDir().getCanonicalFile()).isEqualTo(getResource(this.getClass(),"multi-module-definitions-all-in-root/module1"));
  assertThat(module1.getWorkDir().getCanonicalFile()).isEqualTo(new File(getResource(this.getClass(),"multi-module-definitions-all-in-root"),".sonar/com.foo.project_module1"));
  ProjectDefinition module2=modules.get(1);
  assertThat(module2.getBaseDir().getCanonicalFile()).isEqualTo(getResource(this.getClass(),"multi-module-definitions-all-in-root/module2"));
  assertThat(module2.getKey()).isEqualTo("com.foo.project:com.foo.project.module2");
  assertThat(module2.getName()).isEqualTo("Foo Module 2");
  assertThat(module2.getVersion()).isEqualTo("1.0-SNAPSHOT");
  assertThat(module2.getDescription()).isEqualTo("Description of Module 2");
  assertThat(module2.sources()).contains("src");
  assertThat(module2.tests()).contains("tests");
  assertThat(module2.properties().get("module1.sonar.projectKey")).isNull();
  assertThat(module2.properties().get("module2.sonar.projectKey")).isNull();
  assertThat(module2.getBaseDir().getCanonicalFile()).isEqualTo(getResource(this.getClass(),"multi-module-definitions-all-in-root/module2"));
  assertThat(module2.getWorkDir().getCanonicalFile()).isEqualTo(new File(getResource(this.getClass(),"multi-module-definitions-all-in-root"),".sonar/com.foo.project_com.foo.project.module2"));
}
