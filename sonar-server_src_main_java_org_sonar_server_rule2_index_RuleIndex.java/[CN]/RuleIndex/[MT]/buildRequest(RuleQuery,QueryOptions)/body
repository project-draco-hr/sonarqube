{
  SearchRequestBuilder esSearch=getClient().prepareSearch(this.getIndexName()).setTypes(this.getIndexType()).setIndices(this.getIndexName());
  if (options.isFacet()) {
    this.setFacets(esSearch);
  }
  if (query.getSortField() != null) {
    FieldSortBuilder sort=SortBuilders.fieldSort(query.getSortField().field().key());
    if (query.isAscendingSort()) {
      sort.order(SortOrder.ASC);
    }
 else {
      sort.order(SortOrder.DESC);
    }
    esSearch.addSort(sort);
  }
 else   if (query.getQueryText() != null && !query.getQueryText().isEmpty()) {
    esSearch.addSort(SortBuilders.scoreSort());
  }
 else {
    esSearch.addSort(RuleNormalizer.RuleField.UPDATED_AT.key(),SortOrder.DESC);
    esSearch.addSort(RuleNormalizer.RuleField.KEY.key(),SortOrder.ASC);
  }
  esSearch.setFrom(options.getOffset());
  esSearch.setSize(options.getLimit());
  Set<String> fields=new HashSet<String>();
  if (options.getFieldsToReturn() != null && !options.getFieldsToReturn().isEmpty()) {
    fields.addAll(options.getFieldsToReturn());
    fields.add(RuleNormalizer.RuleField.KEY.key());
    fields.add(RuleNormalizer.RuleField.REPOSITORY.key());
  }
 else {
    fields=RuleNormalizer.RuleField.ALL_KEYS;
  }
  esSearch.setFetchSource(fields.toArray(new String[fields.size()]),null);
  return esSearch;
}
