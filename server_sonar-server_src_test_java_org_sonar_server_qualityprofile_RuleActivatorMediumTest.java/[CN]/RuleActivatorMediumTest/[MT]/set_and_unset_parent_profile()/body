{
  RuleActivation activation=new RuleActivation(RuleTesting.XOO_X1);
  activation.setSeverity("MAJOR");
  activate(activation,XOO_P1_KEY);
  verifyOneActiveRule(XOO_P1_KEY,RuleTesting.XOO_X1,Severity.MAJOR,null,ImmutableMap.of("max","10"));
  db.qualityProfileDao().insert(dbSession,QProfileTesting.newXooP2());
  activation=new RuleActivation(RuleTesting.XOO_X2);
  activation.setSeverity("MAJOR");
  activate(activation,XOO_P2_KEY);
  ruleActivator.setParent(XOO_P2_KEY,XOO_P1_KEY);
  dbSession.clearCache();
  assertThat(db.qualityProfileDao().selectByKey(dbSession,XOO_P2_KEY).getParentKee()).isEqualTo(XOO_P1_KEY);
  verifyHasActiveRule(ActiveRuleKey.of(XOO_P2_KEY,RuleTesting.XOO_X1),Severity.MAJOR,ActiveRuleDto.INHERITED,ImmutableMap.of("max","10"));
  verifyHasActiveRule(ActiveRuleKey.of(XOO_P2_KEY,RuleTesting.XOO_X2),Severity.MAJOR,null,Collections.<String,String>emptyMap());
  dbSession.clearCache();
  ruleActivator.setParent(XOO_P2_KEY,null);
  assertThat(countActiveRules(XOO_P2_KEY)).isEqualTo(1);
  assertThat(db.qualityProfileDao().selectByKey(dbSession,XOO_P2_KEY).getParentKee()).isNull();
  verifyHasActiveRule(ActiveRuleKey.of(XOO_P2_KEY,RuleTesting.XOO_X2),Severity.MAJOR,null,Collections.<String,String>emptyMap());
}
