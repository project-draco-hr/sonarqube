{
  RuleActivation activation=new RuleActivation(XOO_X1);
  activation.setSeverity("MAJOR");
  activate(activation,XOO_P1_KEY);
  verifyOneActiveRuleInDb(XOO_P1_KEY,XOO_X1,MAJOR,null,ImmutableMap.of("max","10"));
  db.qualityProfileDao().insert(dbSession,QProfileTesting.newXooP2());
  dbSession.commit();
  dbSession.clearCache();
  ruleActivator.setParent(XOO_P2_KEY,XOO_P1_KEY);
  verifyOneActiveRuleInDbAndIndex(XOO_P2_KEY,XOO_X1,MAJOR,INHERITED,ImmutableMap.of("max","10"));
  activation=new RuleActivation(XOO_X1);
  activation.setSeverity("BLOCKER").setParameter("max","333");
  activate(activation,XOO_P2_KEY);
  verifyOneActiveRuleInDb(XOO_P2_KEY,XOO_X1,BLOCKER,OVERRIDES,ImmutableMap.of("max","333"));
  ruleActivator.setParent(XOO_P2_KEY,null);
  dbSession.clearCache();
  assertThat(db.qualityProfileDao().selectByKey(dbSession,XOO_P2_KEY).getParentKee()).isNull();
  verifyOneActiveRuleInDbAndIndex(XOO_P2_KEY,XOO_X1,BLOCKER,null,ImmutableMap.of("max","333"));
}
