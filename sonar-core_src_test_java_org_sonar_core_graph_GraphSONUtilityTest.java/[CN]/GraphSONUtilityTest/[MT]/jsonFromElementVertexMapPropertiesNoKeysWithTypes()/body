{
  Vertex v=this.graph.addVertex(1);
  Map map=new HashMap();
  map.put("this","some");
  map.put("that",1);
  v.setProperty("keyMap",map);
  JSONObject json=GraphSONUtility.jsonFromElement(v,null,GraphSONMode.EXTENDED);
  assertThat(json).isNotNull();
  assertThat(json.get(GraphSONTokens._ID)).isEqualTo("1");
  assertThat(json.containsKey("keyMap")).isTrue();
  JSONObject mapWithTypeAsJSON=(JSONObject)json.get("keyMap");
  assertThat(mapWithTypeAsJSON).isNotNull();
  assertThat(mapWithTypeAsJSON.containsKey(GraphSONTokens.TYPE)).isTrue();
  assertThat(mapWithTypeAsJSON.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_MAP);
  assertThat(mapWithTypeAsJSON.containsKey(GraphSONTokens.VALUE)).isTrue();
  JSONObject mapAsJSON=(JSONObject)mapWithTypeAsJSON.get(GraphSONTokens.VALUE);
  assertThat(mapAsJSON.containsKey("this")).isTrue();
  JSONObject thisAsJson=(JSONObject)mapAsJSON.get("this");
  assertThat(thisAsJson.containsKey(GraphSONTokens.TYPE)).isTrue();
  assertThat(thisAsJson.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_STRING);
  assertThat(thisAsJson.containsKey(GraphSONTokens.VALUE)).isTrue();
  assertThat(thisAsJson.get(GraphSONTokens.VALUE)).isEqualTo("some");
  assertThat(mapAsJSON.containsKey("that")).isTrue();
  JSONObject thatAsJson=(JSONObject)mapAsJSON.get("that");
  assertThat(thatAsJson.containsKey(GraphSONTokens.TYPE)).isTrue();
  assertThat(thatAsJson.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_INTEGER);
  assertThat(thatAsJson.containsKey(GraphSONTokens.VALUE)).isTrue();
  assertThat(thatAsJson.get(GraphSONTokens.VALUE)).isEqualTo(1);
}
