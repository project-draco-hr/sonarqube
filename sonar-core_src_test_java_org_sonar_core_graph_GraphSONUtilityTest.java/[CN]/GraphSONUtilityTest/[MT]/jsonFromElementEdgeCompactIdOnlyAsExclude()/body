{
  ElementFactory factory=new GraphElementFactory(this.graph);
  Vertex v1=this.graph.addVertex(1);
  Vertex v2=this.graph.addVertex(2);
  Edge e=this.graph.addEdge(3,v1,v2,"test");
  e.setProperty("weight",0.5f);
  e.setProperty("x","y");
  Set<String> propertiesToExclude=new HashSet<String>(){
{
      add(GraphSONTokens._TYPE);
      add(GraphSONTokens._LABEL);
      add(GraphSONTokens._IN_V);
      add(GraphSONTokens._OUT_V);
      add("weight");
    }
  }
;
  ElementPropertyConfig config=new ElementPropertyConfig(null,propertiesToExclude,ElementPropertyConfig.ElementPropertiesRule.INCLUDE,ElementPropertyConfig.ElementPropertiesRule.EXCLUDE);
  GraphSONUtility utility=new GraphSONUtility(GraphSONMode.COMPACT,factory,config);
  JSONObject json=utility.jsonFromElement(e);
  assertThat(json).isNotNull();
  assertThat(json.containsKey(GraphSONTokens._TYPE)).isFalse();
  assertThat(json.containsKey(GraphSONTokens._LABEL)).isFalse();
  assertThat(json.containsKey(GraphSONTokens._IN_V)).isFalse();
  assertThat(json.containsKey(GraphSONTokens._OUT_V)).isFalse();
  assertThat(json.containsKey(GraphSONTokens._ID)).isTrue();
  assertThat(json.containsKey("weight")).isFalse();
  assertThat(json.containsKey("x")).isTrue();
  assertThat(json.get("x")).isEqualTo("y");
}
