{
  orchestrator.getServer().restoreProfile(getResource("multiline.xml"));
  orchestrator.getServer().provisionProject("sample-multiline","xoo-sample");
  orchestrator.getServer().associateProjectToQualityProfile("sample-multiline","xoo","multiline");
  File projectDir=ItUtils.projectDir("shared/xoo-precise-issues");
  SonarRunner runner=SonarRunner.create(projectDir,"sonar.analysis.mode","issues","sonar.verbose","true","sonar.report.export.path","sonar-report.json");
  BuildResult result=orchestrator.executeBuild(runner);
  assertThat(ItUtils.countIssuesInJsonReport(result,true)).isEqualTo(2);
  JSONObject obj=ItUtils.getJSONReport(result);
  JSONArray issues=(JSONArray)obj.get("issues");
  for (  Object i : issues) {
    JSONObject issue=(JSONObject)i;
    assertThat(issue.get("startLine")).isIn(6L,9L);
    assertThat(issue.get("line")).isIn(6L,9L);
    assertThat(issue.get("endLine")).isIn(6L,15L);
    assertThat(issue.get("startOffset")).isIn(27L,20L);
    assertThat(issue.get("endOffset")).isIn(32L,2L);
  }
}
