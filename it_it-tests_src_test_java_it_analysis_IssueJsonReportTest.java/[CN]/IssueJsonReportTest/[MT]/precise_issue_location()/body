{
  orchestrator.getServer().restoreProfile(getResource("multiline.xml"));
  orchestrator.getServer().provisionProject("sample-multiline","xoo-sample");
  orchestrator.getServer().associateProjectToQualityProfile("sample-multiline","xoo","multiline");
  File projectDir=ItUtils.projectDir("shared/xoo-precise-issues");
  SonarRunner runner=SonarRunner.create(projectDir,"sonar.analysis.mode","issues","sonar.verbose","true","sonar.report.export.path","sonar-report.json");
  BuildResult result=orchestrator.executeBuild(runner);
  assertThat(ItUtils.countIssuesInJsonReport(result,true)).isEqualTo(2);
  JSONObject obj=ItUtils.getJSONReport(result);
  JSONArray issues=(JSONArray)obj.get("issues");
  JSONObject issue1=(JSONObject)issues.get(0);
  JSONObject issue2=(JSONObject)issues.get(1);
  assertThat(issue1.get("startLine")).isIn(6L);
  assertThat(issue1.get("line")).isIn(6L);
  assertThat(issue1.get("endLine")).isIn(6L);
  assertThat(issue1.get("startOffset")).isIn(27L);
  assertThat(issue1.get("endOffset")).isIn(32L);
  assertThat(issue2.get("startLine")).isIn(9L);
  assertThat(issue2.get("line")).isIn(9L);
  assertThat(issue2.get("endLine")).isIn(15L);
  assertThat(issue2.get("startOffset")).isIn(20L);
  assertThat(issue2.get("endOffset")).isIn(2L);
}
