{
  orchestrator.getServer().restoreProfile(getResource("one-issue-per-line.xml"));
  orchestrator.getServer().provisionProject("sample","xoo-sample");
  orchestrator.getServer().associateProjectToQualityProfile("sample","xoo","one-issue-per-line");
  File projectDir=ItUtils.projectDir("shared/xoo-sample");
  SonarScanner runner=SonarScanner.create(projectDir,"sonar.analysis.mode","issues","sonar.verbose","true","sonar.report.export.path","sonar-report.json");
  BuildResult result=orchestrator.executeBuild(runner);
  assertThat(ItUtils.countIssuesInJsonReport(result,true)).isEqualTo(17);
  JSONObject obj=ItUtils.getJSONReport(result);
  JSONArray issues=(JSONArray)obj.get("issues");
  for (  Object issue : issues) {
    JSONObject jsonIssue=(JSONObject)issue;
    assertThat(jsonIssue.get("startLine")).isNotNull();
    assertThat(jsonIssue.get("line")).isEqualTo(jsonIssue.get("startLine"));
    assertThat(jsonIssue.get("endLine")).isEqualTo(jsonIssue.get("startLine"));
    assertThat(jsonIssue.get("endOffset")).isNotNull();
    assertThat(jsonIssue.get("startOffset")).isNotNull();
  }
  List<Long> lineNumbers=new ArrayList<>(16);
  for (long i=1L; i < 18; i++) {
    lineNumbers.add(i);
  }
  assertThat(issues).extracting("startLine").containsAll(lineNumbers);
  assertThat(issues).extracting("endLine").containsAll(lineNumbers);
}
