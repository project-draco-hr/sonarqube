{
  orchestrator.getServer().restoreProfile(getResource("/one-issue-per-line.xml"));
  orchestrator.getServer().provisionProject("com.sonarsource.it.samples:multi-modules-sample","Sonar :: Integration Tests :: Multi-modules Sample");
  orchestrator.getServer().associateProjectToQualityProfile("com.sonarsource.it.samples:multi-modules-sample","xoo","one-issue-per-line");
  File rootDir=ItUtils.projectDir("shared/xoo-multi-modules-sample");
  SonarScanner scan=SonarScanner.create(rootDir).setProperty("sonar.projectDate","2013-05-01");
  orchestrator.executeBuild(scan);
  SonarScanner issuesModeScan=SonarScanner.create(rootDir).setProperty("sonar.analysis.mode","issues").setProperty("sonar.userHome",temp.newFolder().getAbsolutePath()).setProperty("sonar.report.export.path","sonar-report.json").setProperty("sonar.projectDate","2013-05-02");
  orchestrator.executeBuild(issuesModeScan);
  File report=new File(rootDir,".sonar/sonar-report.json");
  assertThat(report).isFile().exists();
  String json=sanitize(FileUtils.readFileToString(report));
  String expectedJson=sanitize(IOUtils.toString(getResourceInputStream("report-on-root-module.json")));
  JSONAssert.assertEquals(expectedJson,json,false);
}
