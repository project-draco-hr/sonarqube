{
  ProjectRepositories ref=new ProjectRepositories();
  assertThat(ref.settings("foo")).isEmpty();
  ref.addQProfile(new QProfile("squid-java","Java","java",DATE_FORMAT.parse("2013-01-01T12:00:00+0100")));
  HashMap<String,String> settings=new HashMap<>();
  settings.put("prop1","value1");
  ref.addSettings("foo",settings);
  settings=new HashMap<>();
  settings.put("prop2","value2");
  ref.addSettings("foo",settings);
  ref.settings("foo").put("prop","value");
  ActiveRule activeRule=new ActiveRule("repo","rule","templateRule","Rule","MAJOR","rule","java");
  activeRule.addParam("param1","value1");
  ref.addActiveRule(activeRule);
  ref.setLastAnalysisDate(DATE_FORMAT.parse("2014-05-18T15:50:45+0100"));
  ref.setTimestamp(10);
  ref.addFileData("foo","src/main/java/Foo.java",new FileData("xyz",true,"1=12345,2=3456","1=345,2=345","1=henryju,2=gaudin"));
  ref.addFileData("foo","src/main/java/Foo2.java",new FileData("xyz",false,"1=12345,2=3456","1=345,2=345","1=henryju,2=gaudin"));
  JsonAssert.assertJson(ref.toJson()).isSimilarTo(getClass().getResource("ProjectRepositoriesTest/testToJson.json"));
}
