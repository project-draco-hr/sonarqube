{
  String[] result=new String[file.lines()];
  if (symbolRefs == null) {
    return result;
  }
  StringBuilder[] symbolRefsPerLine=new StringBuilder[file.lines()];
  long[] originalLineOffsets=file.originalLineOffsets();
  int symbolId=1;
  List<Symbol> symbols=new ArrayList<Symbol>(symbolRefs.referencesBySymbol().keySet());
  Collections.sort(symbols,new Comparator<Symbol>(){
    @Override public int compare(    Symbol o1,    Symbol o2){
      return o1.getDeclarationStartOffset() - o2.getDeclarationStartOffset();
    }
  }
);
  for (  Symbol symbol : symbols) {
    int declarationStartOffset=symbol.getDeclarationStartOffset();
    int declarationEndOffset=symbol.getDeclarationEndOffset();
    int length=declarationEndOffset - declarationStartOffset;
    addSymbol(symbolId,declarationStartOffset,declarationEndOffset,originalLineOffsets,symbolRefsPerLine);
    for (    Integer referenceStartOffset : symbolRefs.referencesBySymbol().get(symbol)) {
      if (referenceStartOffset == declarationStartOffset) {
        continue;
      }
      addSymbol(symbolId,referenceStartOffset,referenceStartOffset + length,originalLineOffsets,symbolRefsPerLine);
    }
    symbolId++;
  }
  for (int i=0; i < file.lines(); i++) {
    result[i]=symbolRefsPerLine[i] != null ? symbolRefsPerLine[i].toString() : null;
  }
  return result;
}
