{
  ComponentDto projectDto=ComponentTesting.newProjectDto(PROJECT_UUID).setKey(PROJECT_KEY);
  dbClient.componentDao().insert(dbSession,projectDto);
  PermissionTemplateDto permissionTemplateDto=dbClient.permissionTemplateDao().insertPermissionTemplate("Default",null,null);
  settings.setProperty("sonar.permission.template.default",permissionTemplateDto.getKee());
  dbClient.permissionTemplateDao().insertGroupPermission(permissionTemplateDto.getId(),null,UserRole.USER);
  dbSession.commit();
  Component project=DumbComponent.builder(Component.Type.PROJECT,1).setUuid(PROJECT_UUID).setKey(PROJECT_KEY).build();
  dbIdsRepository.setComponentId(project,projectDto.getId());
  treeRootHolder.setRoot(project);
  step.execute();
  dbSession.commit();
  assertThat(dbClient.componentDao().selectOrFailByKey(dbSession,PROJECT_KEY).getAuthorizationUpdatedAt()).isNotNull();
  assertThat(dbClient.roleDao().selectGroupPermissions(dbSession,DefaultGroups.ANYONE,projectDto.getId())).containsOnly(UserRole.USER);
  List<SearchHit> issueAuthorizationHits=esTester.getDocuments(IssueIndexDefinition.INDEX,IssueIndexDefinition.TYPE_AUTHORIZATION);
  assertThat(issueAuthorizationHits).hasSize(1);
  Map<String,Object> issueAhutorization=issueAuthorizationHits.get(0).sourceAsMap();
  assertThat(issueAhutorization.get("project")).isEqualTo(PROJECT_UUID);
  assertThat((List<String>)issueAhutorization.get("groups")).containsOnly(DefaultGroups.ANYONE);
  assertThat((List<String>)issueAhutorization.get("users")).isEmpty();
}
