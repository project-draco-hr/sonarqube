{
  Component file=ReportComponent.builder(Component.Type.FILE,3).setUuid("CDEF").setKey("PROJECT_KEY:file").build();
  Component directory=ReportComponent.builder(Component.Type.DIRECTORY,2).setUuid("BCDE").setKey("PROJECT_KEY:dir").addChildren(file).build();
  Component project=ReportComponent.builder(Component.Type.PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).addChildren(directory).build();
  treeRootHolder.setRoot(project);
  dbIdsRepository.setComponentId(project,1);
  dbIdsRepository.setSnapshotId(project,10);
  dbIdsRepository.setComponentId(directory,3);
  dbIdsRepository.setSnapshotId(directory,11);
  dbIdsRepository.setComponentId(file,2);
  dbIdsRepository.setSnapshotId(file,12);
  saveDuplicationMetric();
  BatchReport.Duplication duplication=BatchReport.Duplication.newBuilder().setOriginPosition(BatchReport.TextRange.newBuilder().setStartLine(1).setEndLine(5).build()).addDuplicate(BatchReport.Duplicate.newBuilder().setOtherFileRef(3).setRange(BatchReport.TextRange.newBuilder().setStartLine(6).setEndLine(10).build()).build()).build();
  reportReader.putDuplications(3,newArrayList(duplication));
  underTest.execute();
  assertThat(dbTester.countRowsOfTable("project_measures")).isEqualTo(1);
  Map<String,Object> dto=dbTester.selectFirst("select snapshot_id as \"snapshotId\", text_value as \"textValue\" from project_measures");
  assertThat(dto.get("snapshotId")).isEqualTo(12L);
  assertThat(dto.get("textValue")).isEqualTo("<duplications><g><b s=\"1\" l=\"5\" r=\"PROJECT_KEY:file\"/><b s=\"6\" l=\"5\" r=\"PROJECT_KEY:file\"/></g></duplications>");
}
