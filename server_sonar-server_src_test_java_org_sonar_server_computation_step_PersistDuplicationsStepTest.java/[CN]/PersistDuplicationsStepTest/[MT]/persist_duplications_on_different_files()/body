{
  dbComponentsRefCache.addComponent(3,new DbComponent(3L,"PROJECT_KEY:file2","CDEF"));
  saveDuplicationMetric();
  BatchReportWriter writer=initReportWithProjectAndFile();
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.FILE).setSnapshotId(12L).setPath("file2").build());
  BatchReport.Duplication duplication=BatchReport.Duplication.newBuilder().setOriginPosition(Range.newBuilder().setStartLine(1).setEndLine(5).build()).addDuplicate(BatchReport.Duplicate.newBuilder().setOtherFileRef(3).setRange(Range.newBuilder().setStartLine(6).setEndLine(10).build()).build()).build();
  writer.writeComponentDuplications(2,newArrayList(duplication));
  sut.execute(new ComputationContext(new BatchReportReader(reportDir),PROJECT_KEY,projectSettings,dbClient,ComponentTreeBuilders.from(DumbComponent.DUMB_PROJECT),languageRepository));
  assertThat(dbTester.countRowsOfTable("project_measures")).isEqualTo(1);
  Map<String,Object> dto=dbTester.selectFirst("select snapshot_id as \"snapshotId\", text_value as \"textValue\" from project_measures");
  assertThat(dto.get("snapshotId")).isEqualTo(11L);
  assertThat(dto.get("textValue")).isEqualTo("<duplications><g><b s=\"1\" l=\"5\" r=\"PROJECT_KEY:file\"/><b s=\"6\" l=\"5\" r=\"PROJECT_KEY:file2\"/></g></duplications>");
}
