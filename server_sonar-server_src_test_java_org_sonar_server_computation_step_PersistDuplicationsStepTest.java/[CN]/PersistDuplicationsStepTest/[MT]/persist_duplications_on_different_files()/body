{
  saveDuplicationMetric();
  Component file2=new DumbComponent(Component.Type.FILE,3,"CDEF","PROJECT_KEY:file2");
  Component file=new DumbComponent(Component.Type.FILE,2,"BCDE","PROJECT_KEY:file");
  Component project=new DumbComponent(Component.Type.PROJECT,1,"ABCD",PROJECT_KEY,file,file2);
  treeRootHolder.setRoot(project);
  dbIdsRepository.setComponentId(project,1);
  dbIdsRepository.setComponentId(file,2);
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setSnapshotId(10L).addChildRef(2).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.FILE).setSnapshotId(11L).setPath("file").build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.FILE).setSnapshotId(12L).setPath("file2").build());
  BatchReport.Duplication duplication=BatchReport.Duplication.newBuilder().setOriginPosition(Range.newBuilder().setStartLine(1).setEndLine(5).build()).addDuplicate(BatchReport.Duplicate.newBuilder().setOtherFileRef(3).setRange(Range.newBuilder().setStartLine(6).setEndLine(10).build()).build()).build();
  reportReader.putDuplications(2,newArrayList(duplication));
  sut.execute();
  assertThat(dbTester.countRowsOfTable("project_measures")).isEqualTo(1);
  Map<String,Object> dto=dbTester.selectFirst("select snapshot_id as \"snapshotId\", text_value as \"textValue\" from project_measures");
  assertThat(dto.get("snapshotId")).isEqualTo(11L);
  assertThat(dto.get("textValue")).isEqualTo("<duplications><g><b s=\"1\" l=\"5\" r=\"PROJECT_KEY:file\"/><b s=\"6\" l=\"5\" r=\"PROJECT_KEY:file2\"/></g></duplications>");
}
