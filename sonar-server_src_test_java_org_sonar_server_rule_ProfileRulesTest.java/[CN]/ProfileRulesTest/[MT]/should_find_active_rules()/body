{
  esSetup.client().prepareBulk().add(Requests.indexRequest().index("rules").type("rule").source(testFileAsString("should_find_active_rules/rule25.json"))).add(Requests.indexRequest().index("rules").type("rule").source(testFileAsString("should_find_active_rules/rule759.json"))).add(Requests.indexRequest().index("rules").type("rule").source(testFileAsString("should_find_active_rules/rule1482.json"))).add(Requests.indexRequest().index("rules").type("active_rule").parent("25").source(testFileAsString("should_find_active_rules/active_rule25.json"))).add(Requests.indexRequest().index("rules").type("active_rule").parent("759").source(testFileAsString("should_find_active_rules/active_rule391.json"))).add(Requests.indexRequest().index("rules").type("active_rule").parent("759").source(testFileAsString("should_find_active_rules/active_rule523.json"))).add(Requests.indexRequest().index("rules").type("active_rule").parent("1482").source(testFileAsString("should_find_active_rules/active_rule2702.json"))).setRefresh(true).execute().actionGet();
  Paging paging=Paging.create(10,1);
  List<QProfileRule> rules1=profileRules.searchActiveRules(ProfileRuleQuery.create(1),paging).rules();
  assertThat(rules1).hasSize(3);
  assertThat(rules1.get(0).key()).isEqualTo("DM_CONVERT_CASE");
  assertThat(rules1.get(0).severity()).isEqualTo(RulePriority.MINOR);
  List<QProfileRule> rules2=profileRules.searchActiveRules(ProfileRuleQuery.create(2),paging).rules();
  assertThat(rules2).hasSize(1);
  assertThat(rules2.get(0).ruleSource().get("id")).isEqualTo(759);
  assertThat(rules2.get(0).activeRuleSource().get("id")).isEqualTo(523);
  assertThat(profileRules.searchActiveRules(ProfileRuleQuery.create(3),paging).rules()).hasSize(0);
  assertThat(profileRules.searchActiveRules(ProfileRuleQuery.create(1).setNameOrKey("polop"),paging).rules()).hasSize(0);
  assertThat(profileRules.searchActiveRules(ProfileRuleQuery.create(1).setNameOrKey("DM_CONVERT_CASE"),paging).rules()).hasSize(1);
  assertThat(profileRules.searchActiveRules(ProfileRuleQuery.create(1).setNameOrKey("Unused Check"),paging).rules()).hasSize(1);
  assertThat(profileRules.searchActiveRules(ProfileRuleQuery.create(1).addRepositoryKeys("findbugs"),paging).rules()).hasSize(1);
  List<QProfileRule> rulesWParam=profileRules.searchActiveRules(ProfileRuleQuery.create(1).setNameOrKey("ArchitecturalConstraint"),paging).rules();
  assertThat(rulesWParam).hasSize(1);
  assertThat(rulesWParam.get(0).params()).hasSize(2);
}
