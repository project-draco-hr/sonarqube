{
  ComponentDto project=ComponentTesting.newProjectDto(PROJECT_UUID).setKey(PROJECT_KEY);
  ComponentDto module=ComponentTesting.newModuleDto(MODULE_UUID,project).setKey(MODULE_KEY);
  ComponentDto file=ComponentTesting.newFileDto(module,null,FILE_UUID).setKey(FILE_KEY).setPath("src/org/struts/Action.java");
  db.getDbClient().componentDao().insert(db.getSession(),project,module,file);
  db.getSession().commit();
  indexIssues(IssueTesting.newDoc("EFGH",file).setRuleKey("squid:AvoidCycle").setSeverity("BLOCKER").setStatus("RESOLVED").setResolution("FALSE-POSITIVE").setManualSeverity(false).setMessage("Do not use this method").setLine(200).setChecksum("123456").setAssignee("john"));
  addBrowsePermissionOnComponent(FILE_KEY);
  WsTester.TestRequest request=tester.newGetRequest("batch","issues").setParam("key",FILE_KEY);
  ServerIssue serverIssue=ServerIssue.parseDelimitedFrom(new ByteArrayInputStream(request.execute().output()));
  assertThat(serverIssue.getKey()).isEqualTo("EFGH");
  assertThat(serverIssue.getModuleKey()).isEqualTo(MODULE_KEY);
  assertThat(serverIssue.getPath()).isEqualTo("src/org/struts/Action.java");
  assertThat(serverIssue.getRuleRepository()).isEqualTo("squid");
  assertThat(serverIssue.getRuleKey()).isEqualTo("AvoidCycle");
  assertThat(serverIssue.getLine()).isEqualTo(200);
  assertThat(serverIssue.getMsg()).isEqualTo("Do not use this method");
  assertThat(serverIssue.getResolution()).isEqualTo("FALSE-POSITIVE");
  assertThat(serverIssue.getStatus()).isEqualTo("RESOLVED");
  assertThat(serverIssue.getSeverity()).isEqualTo(Severity.BLOCKER);
  assertThat(serverIssue.getManualSeverity()).isFalse();
  assertThat(serverIssue.getChecksum()).isEqualTo("123456");
  assertThat(serverIssue.getAssigneeLogin()).isEqualTo("john");
}
