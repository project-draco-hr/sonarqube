{
  IssueQuery query=IssueQuery.builder().keys(Lists.newArrayList("ABCDE")).severities(Lists.newArrayList(Severity.BLOCKER)).statuses(Lists.newArrayList(Issue.STATUS_RESOLVED)).resolutions(Lists.newArrayList(Issue.RESOLUTION_FALSE_POSITIVE)).components(Lists.newArrayList("org/struts/Action.java")).componentRoots(Lists.newArrayList("org.struts:core")).rules(Lists.newArrayList(RuleKey.of("squid","AvoidCycle"))).userLogins(Lists.newArrayList("crunky")).assigneeLogins(Lists.newArrayList("gargantua")).createdAfter(new Date()).createdBefore(new Date()).limit(125).offset(33).build();
  assertThat(query.keys()).containsOnly("ABCDE");
  assertThat(query.severities()).containsOnly(Severity.BLOCKER);
  assertThat(query.statuses()).containsOnly(Issue.STATUS_RESOLVED);
  assertThat(query.resolutions()).containsOnly(Issue.RESOLUTION_FALSE_POSITIVE);
  assertThat(query.components()).containsOnly("org/struts/Action.java");
  assertThat(query.componentRoots()).containsOnly("org.struts:core");
  assertThat(query.userLogins()).containsOnly("crunky");
  assertThat(query.assigneeLogins()).containsOnly("gargantua");
  assertThat(query.rules()).containsOnly(RuleKey.of("squid","AvoidCycle"));
  assertThat(query.createdAfter()).isNotNull();
  assertThat(query.createdBefore()).isNotNull();
  assertThat(query.limit()).isEqualTo(125);
  assertThat(query.offset()).isEqualTo(33);
}
