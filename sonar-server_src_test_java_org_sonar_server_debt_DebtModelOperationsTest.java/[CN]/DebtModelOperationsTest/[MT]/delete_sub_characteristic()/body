{
  BatchSession batchSession=mock(BatchSession.class);
  when(mybatis.openBatchSession()).thenReturn(batchSession);
  when(ruleDao.selectByCharacteristicOrSubCharacteristicId(2,batchSession)).thenReturn(newArrayList(new RuleDto().setCharacteristicId(2).setRemediationFunction("LINEAR_OFFSET").setRemediationFactor("2h").setRemediationOffset("5min").setDefaultCharacteristicId(10).setDefaultRemediationFunction("LINEAR_OFFSET").setDefaultRemediationFactor("4h").setDefaultRemediationOffset("15min")));
  when(dao.selectById(2,batchSession)).thenReturn(subCharacteristicDto);
  service.delete(2);
  ArgumentCaptor<RuleDto> ruleArgument=ArgumentCaptor.forClass(RuleDto.class);
  verify(ruleDao).update(ruleArgument.capture(),eq(batchSession));
  RuleDto ruleDto=ruleArgument.getValue();
  assertThat(ruleDto.getCharacteristicId()).isEqualTo(-1);
  assertThat(ruleDto.getRemediationFunction()).isNull();
  assertThat(ruleDto.getRemediationFactor()).isNull();
  assertThat(ruleDto.getRemediationOffset()).isNull();
  assertThat(ruleDto.getUpdatedAt()).isEqualTo(now);
  assertThat(ruleDto.getDefaultCharacteristicId()).isEqualTo(10);
  assertThat(ruleDto.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(ruleDto.getDefaultRemediationFactor()).isEqualTo("4h");
  assertThat(ruleDto.getDefaultRemediationOffset()).isEqualTo("15min");
  ArgumentCaptor<CharacteristicDto> characteristicArgument=ArgumentCaptor.forClass(CharacteristicDto.class);
  verify(dao).update(characteristicArgument.capture(),eq(batchSession));
  CharacteristicDto characteristicDto=characteristicArgument.getValue();
  assertThat(characteristicDto.getId()).isEqualTo(2);
  assertThat(characteristicDto.isEnabled()).isFalse();
  assertThat(characteristicDto.getUpdatedAt()).isEqualTo(now);
}
