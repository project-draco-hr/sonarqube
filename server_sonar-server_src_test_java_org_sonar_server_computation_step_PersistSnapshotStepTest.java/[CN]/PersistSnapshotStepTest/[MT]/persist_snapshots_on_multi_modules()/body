{
  ComponentDto projectDto=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY);
  dbClient.componentDao().insert(session,projectDto);
  ComponentDto moduleADto=ComponentTesting.newModuleDto("BCDE",projectDto).setKey("MODULE_A");
  dbClient.componentDao().insert(session,moduleADto);
  ComponentDto subModuleADto=ComponentTesting.newModuleDto("CDEF",moduleADto).setKey("SUB_MODULE_A");
  dbClient.componentDao().insert(session,subModuleADto);
  ComponentDto moduleBDto=ComponentTesting.newModuleDto("DEFG",projectDto).setKey("MODULE_B");
  dbClient.componentDao().insert(session,moduleBDto);
  session.commit();
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).addChildRef(2).addChildRef(4).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).addChildRef(3).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.MODULE).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.MODULE).build());
  Component moduleB=new DumbComponent(Component.Type.MODULE,4,"DEFG","MODULE_B");
  Component subModuleA=new DumbComponent(Component.Type.MODULE,3,"CDEF","SUB_MODULE_A");
  Component moduleA=new DumbComponent(Component.Type.MODULE,2,"BCDE","MODULE_A",subModuleA);
  Component project=new DumbComponent(Component.Type.PROJECT,1,"ABCD",PROJECT_KEY,moduleA,moduleB);
  treeRootHolder.setRoot(project);
  treeRootHolder.setRoot(new DumbComponent(Component.Type.PROJECT,1,"ABCD",PROJECT_KEY,new DumbComponent(Component.Type.MODULE,2,"BCDE","MODULE_A",new DumbComponent(Component.Type.MODULE,3,"DEFG","SUB_MODULE_A")),new DumbComponent(Component.Type.MODULE,4,"CDEF","MODULE_B")));
  dbIdsRepository.setComponentId(project,projectDto.getId());
  dbIdsRepository.setComponentId(moduleA,moduleADto.getId());
  dbIdsRepository.setComponentId(subModuleA,subModuleADto.getId());
  dbIdsRepository.setComponentId(moduleB,moduleBDto.getId());
  sut.execute();
  assertThat(dbTester.countRowsOfTable("snapshots")).isEqualTo(4);
  SnapshotDto projectSnapshot=getUnprocessedSnapshot(projectDto.getId());
  assertThat(projectSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(projectSnapshot.getRootId()).isNull();
  assertThat(projectSnapshot.getParentId()).isNull();
  assertThat(projectSnapshot.getDepth()).isEqualTo(0);
  assertThat(projectSnapshot.getPath()).isEqualTo("");
  SnapshotDto moduleASnapshot=getUnprocessedSnapshot(moduleADto.getId());
  assertThat(moduleASnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(moduleASnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleASnapshot.getParentId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleASnapshot.getDepth()).isEqualTo(1);
  assertThat(moduleASnapshot.getPath()).isEqualTo(projectSnapshot.getId() + ".");
  SnapshotDto subModuleASnapshot=getUnprocessedSnapshot(subModuleADto.getId());
  assertThat(subModuleASnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(subModuleASnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(subModuleASnapshot.getParentId()).isEqualTo(moduleASnapshot.getId());
  assertThat(subModuleASnapshot.getDepth()).isEqualTo(2);
  assertThat(subModuleASnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + moduleASnapshot.getId()+ ".");
  SnapshotDto moduleBSnapshot=getUnprocessedSnapshot(moduleBDto.getId());
  assertThat(moduleBSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(moduleBSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleBSnapshot.getParentId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleBSnapshot.getDepth()).isEqualTo(1);
  assertThat(moduleBSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + ".");
}
