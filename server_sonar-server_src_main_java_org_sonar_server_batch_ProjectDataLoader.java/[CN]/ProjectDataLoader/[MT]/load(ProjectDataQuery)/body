{
  DbSession session=dbClient.openSession(false);
  try {
    ProjectRepositories data=new ProjectRepositories();
    ComponentDto module=checkFoundWithOptional(dbClient.componentDao().selectByKey(session,query.getModuleKey()),"Project or module with key '%s' is not found",query.getModuleKey());
    boolean hasScanPerm=userSession.hasComponentUuidPermission(SCAN_EXECUTION,module.projectUuid());
    boolean hasBrowsePerm=userSession.hasComponentUuidPermission(USER,module.projectUuid());
    checkPermission(query.isIssuesMode(),hasScanPerm,hasBrowsePerm);
    if (query.isIssuesMode() && !userSession.hasComponentUuidPermission(USER,module.projectUuid())) {
      throw new ForbiddenException("You're not authorized to access to project '" + module.name() + "', please contact your SonarQube administrator.");
    }
    ComponentDto project=getProject(module,session);
    if (!project.key().equals(module.key())) {
      addSettings(data,module.getKey(),getSettingsFromParents(module,hasScanPerm,session));
    }
    List<ComponentDto> modulesTree=dbClient.componentDao().selectEnabledDescendantModules(session,module.uuid());
    Map<String,String> moduleUuidsByKey=moduleUuidsByKey(modulesTree);
    Map<String,Long> moduleIdsByKey=moduleIdsByKey(modulesTree);
    List<PropertyDto> modulesTreeSettings=dbClient.propertiesDao().selectEnabledDescendantModuleProperties(module.uuid(),session);
    TreeModuleSettings treeModuleSettings=new TreeModuleSettings(moduleUuidsByKey,moduleIdsByKey,modulesTree,modulesTreeSettings);
    addSettingsToChildrenModules(data,query.getModuleKey(),Maps.<String,String>newHashMap(),treeModuleSettings,hasScanPerm);
    List<FilePathWithHashDto> files=searchFilesWithHashAndRevision(session,module);
    addFileData(data,modulesTree,files);
    data.setLastAnalysisDate(new Date());
    return data;
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
