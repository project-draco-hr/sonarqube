{
  periodsHolder.setPeriods();
  underTest.beforeComponent(FILE1);
  underTest.onIssue(FILE1,createIssue(null,STATUS_OPEN,BLOCKER));
  underTest.onIssue(FILE1,createIssue(RESOLUTION_FIXED,STATUS_CLOSED,MAJOR));
  underTest.afterComponent(FILE1);
  underTest.beforeComponent(FILE2);
  underTest.onIssue(FILE2,createIssue(null,STATUS_CONFIRMED,BLOCKER));
  underTest.onIssue(FILE2,createIssue(null,STATUS_CONFIRMED,MAJOR));
  underTest.afterComponent(FILE2);
  underTest.beforeComponent(PROJECT);
  underTest.afterComponent(PROJECT);
  assertThat(measureRepository.getRawMeasure(FILE1,BLOCKER_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);
  assertThat(measureRepository.getRawMeasure(FILE1,CRITICAL_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);
  assertThat(measureRepository.getRawMeasure(FILE1,MAJOR_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);
  assertThat(measureRepository.getRawMeasure(FILE2,BLOCKER_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);
  assertThat(measureRepository.getRawMeasure(FILE2,CRITICAL_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);
  assertThat(measureRepository.getRawMeasure(FILE2,MAJOR_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);
  assertThat(measureRepository.getRawMeasure(PROJECT,BLOCKER_ISSUES_METRIC).get().getIntValue()).isEqualTo(2);
  assertThat(measureRepository.getRawMeasure(PROJECT,CRITICAL_ISSUES_METRIC).get().getIntValue()).isEqualTo(0);
  assertThat(measureRepository.getRawMeasure(PROJECT,MAJOR_ISSUES_METRIC).get().getIntValue()).isEqualTo(1);
}
