{
  File javaFile1=new File(baseDir,"src/main/java/Foo.java");
  when(fs.inputFiles(FileQuery.onSource().onLanguage(Java.KEY))).thenReturn((Iterable)Arrays.asList(new InputFileBuilder(javaFile1,Charsets.UTF_8,"src/main/java/Foo.java").attribute(InputFile.ATTRIBUTE_SOURCE_RELATIVE_PATH,"Foo.java").attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY,"polop:/src/main/java/Foo.java").build()));
  File javaTestFile1=new File(baseDir,"src/test/java/FooTest.java");
  when(fs.inputFiles(FileQuery.onTest().onLanguage(Java.KEY))).thenReturn((Iterable)Arrays.asList(new InputFileBuilder(javaTestFile1,Charsets.UTF_8,"src/test/java/FooTest.java").attribute(InputFile.ATTRIBUTE_SOURCE_RELATIVE_PATH,"FooTest.java").attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY,"polop:/src/test/java/FooTest.java").build()));
  when(project.getLanguageKey()).thenReturn(Java.KEY);
  when(exclusionPatternInitializer.hasFileContentPattern()).thenReturn(true);
  scanner.analyse(project,null);
  verify(inclusionPatternInitializer).initializePatternsForPath("Foo.java","polop:/src/main/java/Foo.java");
  verify(inclusionPatternInitializer).initializePatternsForPath("FooTest.java","polop:/src/test/java/FooTest.java");
  verify(exclusionPatternInitializer).initializePatternsForPath("Foo.java","polop:/src/main/java/Foo.java");
  verify(exclusionPatternInitializer).initializePatternsForPath("FooTest.java","polop:/src/test/java/FooTest.java");
  verify(regexpScanner).scan("polop:/src/main/java/Foo.java",javaFile1,UTF_8);
  verify(regexpScanner).scan("polop:/src/test/java/FooTest.java",javaTestFile1,UTF_8);
}
