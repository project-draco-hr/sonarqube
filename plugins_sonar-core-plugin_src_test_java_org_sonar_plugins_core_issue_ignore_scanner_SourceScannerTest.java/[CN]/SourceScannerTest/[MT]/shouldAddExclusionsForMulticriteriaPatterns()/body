{
  File sourceFile=new File("src/main/java/Foo.java");
  File testFile=new File("src/test/java/FooTest.java");
  when(project.getLanguageKey()).thenReturn("java");
  when(fileSystem.files(Mockito.isA(FileQuery.class))).thenReturn(Arrays.asList(sourceFile)).thenReturn(Arrays.asList(testFile));
  when(fileSystem.sourceDirs()).thenReturn(Arrays.asList(new File("src/main/java")));
  when(fileSystem.testDirs()).thenReturn(Arrays.asList(new File("src/test/java")));
  IssuePattern pattern1=mock(IssuePattern.class);
  when(pattern1.matchResource("Foo.java")).thenReturn(true);
  when(pattern1.matchResource("FooTest.java")).thenReturn(false);
  IssuePattern pattern2=mock(IssuePattern.class);
  when(pattern2.matchResource("Foo.java")).thenReturn(false);
  when(pattern2.matchResource("FooTest.java")).thenReturn(true);
  Mockito.doReturn(ImmutableList.of(pattern1,pattern2)).when(patternsInitializer).getMulticriteriaPatterns();
  when(patternsInitializer.hasFileContentPattern()).thenReturn(false);
  scanner.analyse(project,null);
  verify(patternMatcher).addPatternForComponent("polop:[default].Foo",pattern1);
  verify(patternMatcher).addPatternForComponent("polop:[default].FooTest",pattern2);
  verifyZeroInteractions(regexpScanner);
}
