{
  rightNow=new Date();
  tenDaysAgo=DateUtils.addDays(rightNow,-10);
  fiveDaysAgo=DateUtils.addDays(rightNow,-5);
  PastSnapshot pastSnapshot=mock(PastSnapshot.class);
  when(pastSnapshot.getIndex()).thenReturn(1);
  when(pastSnapshot.getTargetDate()).thenReturn(fiveDaysAgo);
  PastSnapshot pastSnapshot2=mock(PastSnapshot.class);
  when(pastSnapshot2.getIndex()).thenReturn(2);
  when(pastSnapshot2.getTargetDate()).thenReturn(tenDaysAgo);
  timeMachineConfiguration=mock(TimeMachineConfiguration.class);
  when(timeMachineConfiguration.getProjectPastSnapshots()).thenReturn(Arrays.asList(pastSnapshot,pastSnapshot2));
  context=mock(DecoratorContext.class);
  resource=new File("com/foo/bar");
  when(context.getResource()).thenReturn(resource);
  notificationManager=mock(NotificationManager.class);
  rule1=Rule.create().setRepositoryKey("rule1").setKey("rule1").setName("name1");
  rule2=Rule.create().setRepositoryKey("rule2").setKey("rule2").setName("name2");
  rule3=Rule.create().setRepositoryKey("rule3").setKey("rule3").setName("name3");
  rulefinder=mock(RuleFinder.class);
  when(rulefinder.findByKey(rule1.getRepositoryKey(),rule1.getKey())).thenReturn(rule1);
  when(rulefinder.findByKey(rule2.getRepositoryKey(),rule2.getKey())).thenReturn(rule2);
  when(rulefinder.findByKey(rule3.getRepositoryKey(),rule3.getKey())).thenReturn(rule3);
  issuable=mock(Issuable.class);
  ResourcePerspectives perspectives=mock(ResourcePerspectives.class);
  when(perspectives.as(Issuable.class,resource)).thenReturn(issuable);
  decorator=new NewIssuesDecorator(timeMachineConfiguration,notificationManager,perspectives,rulefinder);
}
