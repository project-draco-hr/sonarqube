{
  execute(new FakeRepositoryV1());
  assertThat(dbClient.ruleDao().findAll(dbSession)).hasSize(2);
  RuleKey ruleKey1=RuleKey.of("fake","rule1");
  RuleDto rule1=dbClient.ruleDao().getByKey(ruleKey1,dbSession);
  assertThat(rule1.getName()).isEqualTo("One");
  assertThat(rule1.getDescription()).isEqualTo("Description of One");
  assertThat(rule1.getSeverityString()).isEqualTo(Severity.BLOCKER);
  assertThat(rule1.getTags()).isEmpty();
  assertThat(rule1.getSystemTags()).containsOnly("tag1","tag2","tag3");
  assertThat(rule1.getConfigKey()).isEqualTo("config1");
  assertThat(rule1.getStatus()).isEqualTo(RuleStatus.BETA.toString());
  assertThat(rule1.getCreatedAt()).isEqualTo(DATE1);
  assertThat(rule1.getUpdatedAt()).isEqualTo(DATE1);
  assertThat(rule1.getEffortToFixDescription()).isEqualTo("squid.S115.effortToFix");
  List<RuleParamDto> params=dbClient.ruleDao().findRuleParamsByRuleKey(ruleKey1,dbSession);
  assertThat(params).hasSize(2);
  RuleParamDto param=getParam(params,"param1");
  assertThat(param.getDescription()).isEqualTo("parameter one");
  assertThat(param.getDefaultValue()).isEqualTo("default1");
}
