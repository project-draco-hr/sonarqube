{
  Vertex v=this.graph.addVertex(1);
  List mix=new ArrayList();
  mix.add(new Cat("smithers"));
  mix.add(true);
  List deepCats=new ArrayList();
  deepCats.add(new Cat("mcallister"));
  mix.add(deepCats);
  Map map=new HashMap();
  map.put("crazy",mix);
  int[] someInts=new int[]{1,2,3};
  map.put("ints",someInts);
  map.put("regular","stuff");
  Map innerMap=new HashMap();
  innerMap.put("me","you");
  map.put("inner",innerMap);
  v.setProperty("crazy-map",map);
  JSONObject json=GraphsonUtil.jsonFromElement(v,null,GraphSONMode.NORMAL);
  assertThat(json).isNotNull();
  assertThat(json.get(GraphSONTokens._ID)).isEqualTo("1");
  assertThat(json.containsKey("crazy-map")).isTrue();
  JSONObject mapAsJson=(JSONObject)json.get("crazy-map");
  assertThat(mapAsJson.containsKey("regular")).isTrue();
  assertThat(mapAsJson.get("regular")).isEqualTo("stuff");
  assertThat(mapAsJson.containsKey("ints")).isTrue();
  JSONArray intArrayAsJson=(JSONArray)mapAsJson.get("ints");
  assertThat(intArrayAsJson).hasSize(3);
  assertThat(mapAsJson.containsKey("crazy")).isTrue();
  JSONArray deepListAsJSON=(JSONArray)mapAsJson.get("crazy");
  assertThat(deepListAsJSON).hasSize(3);
  assertThat(mapAsJson.containsKey("inner")).isTrue();
  JSONObject mapInMapAsJSON=(JSONObject)mapAsJson.get("inner");
  assertThat(mapInMapAsJSON.containsKey("me")).isTrue();
  assertThat(mapInMapAsJSON.get("me")).isEqualTo("you");
}
