{
  Graph g=new TinkerGraph();
  Vertex v=g.addVertex(1);
  v.setProperty("key",null);
  Map<String,Object> map=new HashMap<String,Object>();
  map.put("innerkey",null);
  List<String> innerList=new ArrayList<String>();
  innerList.add(null);
  innerList.add("innerstring");
  map.put("list",innerList);
  v.setProperty("keyMap",map);
  List<String> list=new ArrayList<String>();
  list.add(null);
  list.add("string");
  v.setProperty("keyList",list);
  JSONObject json=GraphsonUtil.jsonFromElement(v,null,GraphonMode.EXTENDED);
  assertThat(json).isNotNull();
  JSONObject jsonObjectKey=(JSONObject)json.get("key");
  assertThat(jsonObjectKey.get(GraphSONTokens.VALUE)).isNull();
  assertThat(jsonObjectKey.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_UNKNOWN);
  JSONObject keyMap=(JSONObject)json.get("keyMap");
  JSONObject jsonMap=(JSONObject)keyMap.get(GraphSONTokens.VALUE);
  assertThat(jsonMap).isNotNull();
  JSONObject jsonObjectMap=(JSONObject)jsonMap.get("innerkey");
  assertThat(jsonObjectMap.get(GraphSONTokens.VALUE)).isNull();
  assertThat(jsonObjectMap.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_UNKNOWN);
  JSONObject listJson=(JSONObject)jsonMap.get("list");
  JSONArray jsonInnerArray=(JSONArray)listJson.get(GraphSONTokens.VALUE);
  assertThat(jsonInnerArray).isNotNull();
  JSONObject jsonObjectInnerListFirst=(JSONObject)jsonInnerArray.get(0);
  assertThat(jsonObjectInnerListFirst.get(GraphSONTokens.VALUE)).isNull();
  assertThat(jsonObjectInnerListFirst.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_UNKNOWN);
  JSONObject keyList=(JSONObject)json.get("keyList");
  JSONArray jsonArray=(JSONArray)keyList.get(GraphSONTokens.VALUE);
  assertThat(jsonArray).isNotNull();
  JSONObject jsonObjectListFirst=(JSONObject)jsonArray.get(0);
  assertThat(jsonObjectListFirst.get(GraphSONTokens.VALUE)).isNull();
  assertThat(jsonObjectListFirst.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_UNKNOWN);
}
