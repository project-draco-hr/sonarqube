{
  Vertex v=this.graph.addVertex(1);
  List<Boolean> list=new ArrayList<Boolean>();
  list.add(true);
  list.add(true);
  list.add(true);
  v.setProperty("keyList",list);
  JSONObject json=GraphsonUtil.jsonFromElement(v,null,GraphonMode.EXTENDED);
  assertThat(json).isNotNull();
  assertThat(json.get(GraphSONTokens._ID)).isEqualTo("1");
  assertThat(json.containsKey("keyList")).isTrue();
  JSONObject listWithTypeAsJson=(JSONObject)json.get("keyList");
  assertThat(listWithTypeAsJson.containsKey(GraphSONTokens.TYPE)).isTrue();
  assertThat(listWithTypeAsJson.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_LIST);
  assertThat(listWithTypeAsJson.containsKey(GraphSONTokens.VALUE)).isTrue();
  JSONArray listAsJSON=(JSONArray)listWithTypeAsJson.get(GraphSONTokens.VALUE);
  assertThat(listAsJSON).isNotNull();
  assertThat(listAsJSON).hasSize(3);
  for (int ix=0; ix < listAsJSON.size(); ix++) {
    JSONObject valueAsJson=(JSONObject)listAsJSON.get(ix);
    assertThat(valueAsJson).isNotNull();
    assertThat(valueAsJson.containsKey(GraphSONTokens.TYPE)).isTrue();
    assertThat(valueAsJson.get(GraphSONTokens.TYPE)).isEqualTo(GraphSONTokens.TYPE_BOOLEAN);
    assertThat(valueAsJson.containsKey(GraphSONTokens.VALUE)).isTrue();
    assertThat(valueAsJson.get(GraphSONTokens.VALUE)).isEqualTo(true);
  }
}
