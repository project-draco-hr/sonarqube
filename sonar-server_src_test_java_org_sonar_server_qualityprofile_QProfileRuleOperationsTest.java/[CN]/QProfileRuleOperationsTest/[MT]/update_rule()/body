{
  RuleDto rule=new RuleDto().setId(11).setRepositoryKey("squid").setRuleKey("XPath_1387869254").setConfigKey("Xpath");
  when(ruleDao.selectParameters(eq(11),eq(session))).thenReturn(newArrayList(new RuleParamDto().setId(21).setName("max").setDefaultValue("20")));
  ArrayList<RuleRuleTagDto> ruleTags=newArrayList(new RuleRuleTagDto().setId(30L).setTag("style").setType(RuleTagType.SYSTEM));
  when(ruleDao.selectTags(eq(11),eq(session))).thenReturn(ruleTags);
  Map<String,String> paramsByKey=ImmutableMap.of("max","21");
  operations.updateRule(rule,"Updated Rule",Severity.MAJOR,"Updated Description",paramsByKey,authorizedUserSession);
  ArgumentCaptor<RuleDto> ruleArgument=ArgumentCaptor.forClass(RuleDto.class);
  verify(ruleDao).update(ruleArgument.capture(),eq(session));
  assertThat(ruleArgument.getValue().getName()).isEqualTo("Updated Rule");
  assertThat(ruleArgument.getValue().getDescription()).isEqualTo("Updated Description");
  assertThat(ruleArgument.getValue().getSeverityString()).isEqualTo(Severity.MAJOR);
  ArgumentCaptor<RuleParamDto> ruleParamArgument=ArgumentCaptor.forClass(RuleParamDto.class);
  verify(ruleDao).update(ruleParamArgument.capture(),eq(session));
  assertThat(ruleParamArgument.getValue().getDefaultValue()).isEqualTo("21");
  verify(session).commit();
  verify(ruleRegistry).save(eq(ruleArgument.getValue()),eq(newArrayList(ruleParamArgument.getValue())),eq(ruleTags));
}
