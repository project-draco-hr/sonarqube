{
  List<XmlBugInstance> result=Lists.newArrayList();
  try {
    SMInputFactory inf=new SMInputFactory(XMLInputFactory.newInstance());
    SMInputCursor cursor=inf.rootElementCursor(findbugsXmlReport).advance();
    SMInputCursor bugInstanceCursor=cursor.childElementCursor("BugInstance").advance();
    while (bugInstanceCursor.asEvent() != null) {
      XmlBugInstance xmlBugInstance=new XmlBugInstance();
      xmlBugInstance.type=bugInstanceCursor.getAttrValue("type");
      xmlBugInstance.longMessage="";
      result.add(xmlBugInstance);
      ImmutableList.Builder<XmlSourceLineAnnotation> lines=ImmutableList.builder();
      SMInputCursor bugInstanceChildCursor=bugInstanceCursor.childElementCursor().advance();
      while (bugInstanceChildCursor.asEvent() != null) {
        String nodeName=bugInstanceChildCursor.getLocalName();
        if ("LongMessage".equals(nodeName)) {
          xmlBugInstance.longMessage=bugInstanceChildCursor.collectDescendantText();
        }
 else         if ("SourceLine".equals(nodeName)) {
          XmlSourceLineAnnotation xmlSourceLineAnnotation=new XmlSourceLineAnnotation();
          xmlSourceLineAnnotation.parseStart(bugInstanceChildCursor.getAttrValue("start"));
          xmlSourceLineAnnotation.parseEnd(bugInstanceChildCursor.getAttrValue("end"));
          xmlSourceLineAnnotation.parsePrimary(bugInstanceChildCursor.getAttrValue("primary"));
          xmlSourceLineAnnotation.className=bugInstanceChildCursor.getAttrValue("classname");
          lines.add(xmlSourceLineAnnotation);
        }
        bugInstanceChildCursor.advance();
      }
      xmlBugInstance.sourceLines=lines.build();
      bugInstanceCursor.advance();
    }
    cursor.getStreamReader().closeCompletely();
  }
 catch (  XMLStreamException e) {
    throw new XmlParserException("Unable to parse the Findbugs XML Report '" + findbugsXmlReportPath + "'",e);
  }
  return result;
}
