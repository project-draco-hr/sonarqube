{
  ComponentDto project=ComponentTesting.newProjectDto();
  userSessionRule.login("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  RuleKey ruleKey1=RuleKey.of("squid","AvoidCycle");
  RuleKey ruleKey2=RuleKey.of("squid","AvoidNPE");
  tester.get(DbClient.class).ruleDao().insert(dbSession,RuleTesting.newDto(ruleKey1).setName("Avoid Cycle").setLanguage(ServerTester.Xoo.KEY),RuleTesting.newDto(ruleKey2).setName("Avoid NPE").setLanguage(ServerTester.Xoo.KEY));
  QualityProfileDto profileDto1=QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY,"SonarQube way"),"abcd");
  QualityProfileDto profileDto2=QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY,"Another profile"),"efgh");
  tester.get(DbClient.class).qualityProfileDao().insert(dbSession,profileDto1,profileDto2);
  tester.get(DbClient.class).qualityProfileDao().insertProjectProfileAssociation(project.uuid(),profileDto1.getKee(),dbSession);
  tester.get(RuleActivator.class).activate(dbSession,new RuleActivation(ruleKey1).setSeverity(Severity.MINOR),profileDto1.getKey());
  tester.get(RuleActivator.class).activate(dbSession,new RuleActivation(ruleKey1).setSeverity(Severity.BLOCKER),profileDto2.getKey());
  tester.get(RuleActivator.class).activate(dbSession,new RuleActivation(ruleKey2).setSeverity(Severity.BLOCKER),profileDto2.getKey());
  dbSession.commit();
  ProjectRepositories ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));
  List<ActiveRule> activeRules=newArrayList(ref.activeRules());
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).repositoryKey()).isEqualTo("squid");
  assertThat(activeRules.get(0).ruleKey()).isEqualTo("AvoidCycle");
  assertThat(activeRules.get(0).name()).isEqualTo("Avoid Cycle");
  assertThat(activeRules.get(0).language()).isEqualTo("xoo");
  assertThat(activeRules.get(0).severity()).isEqualTo("MINOR");
}
