{
  MockUserSession.set().setLogin("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  Date ruleUpdatedAt=DateUtils.parseDateTime("2014-01-14T13:00:00+0100");
  ComponentDto project=ComponentTesting.newProjectDto();
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  QualityProfileDto profileDto=QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY,"SonarQube way"),"abcd").setRulesUpdatedAt(DateUtils.formatDateTime(ruleUpdatedAt));
  tester.get(DbClient.class).qualityProfileDao().insert(dbSession,profileDto);
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.profile.xoo").setValue("SonarQube way"),dbSession);
  RuleKey ruleKey=RuleKey.of("squid","AvoidCycle");
  RuleDto rule=RuleTesting.newDto(ruleKey).setName("Avoid Cycle").setConfigKey("squid-1").setLanguage(ServerTester.Xoo.KEY);
  tester.get(DbClient.class).ruleDao().insert(dbSession,rule);
  tester.get(DbClient.class).ruleDao().addRuleParam(dbSession,rule,RuleParamDto.createFor(rule).setName("max").setDefaultValue("10").setType(RuleParamType.INTEGER.type()));
  RuleActivation activation=new RuleActivation(ruleKey);
  activation.setSeverity(Severity.MINOR);
  activation.setParameter("max","2");
  tester.get(RuleActivator.class).activate(dbSession,activation,profileDto.getKey());
  dbSession.commit();
  ProjectReferentials ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));
  List<ActiveRule> activeRules=newArrayList(ref.activeRules());
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).repositoryKey()).isEqualTo("squid");
  assertThat(activeRules.get(0).ruleKey()).isEqualTo("AvoidCycle");
  assertThat(activeRules.get(0).name()).isEqualTo("Avoid Cycle");
  assertThat(activeRules.get(0).language()).isEqualTo("xoo");
  assertThat(activeRules.get(0).severity()).isEqualTo("MINOR");
  assertThat(activeRules.get(0).internalKey()).isEqualTo("squid-1");
  assertThat(activeRules.get(0).language()).isEqualTo("xoo");
  assertThat(activeRules.get(0).params()).isEqualTo(ImmutableMap.of("max","2"));
}
