{
  MockUserSession.set().setLogin("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  ComponentDto project=ComponentTesting.newProjectDto();
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  SnapshotDto projectSnapshot=SnapshotTesting.createForProject(project);
  tester.get(DbClient.class).snapshotDao().insert(dbSession,projectSnapshot);
  addDefaultProfile();
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.jira.project.key").setValue("SONAR").setResourceId(project.getId()),dbSession);
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.jira.login.secured").setValue("john").setResourceId(project.getId()),dbSession);
  ComponentDto module1=ComponentTesting.newModuleDto(project);
  tester.get(DbClient.class).componentDao().insert(dbSession,module1);
  tester.get(DbClient.class).snapshotDao().insert(dbSession,SnapshotTesting.createForComponent(module1,projectSnapshot));
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.jira.project.key").setValue("SONAR-SERVER").setResourceId(module1.getId()),dbSession);
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.coverage.exclusions").setValue("**/*.java").setResourceId(module1.getId()),dbSession);
  ComponentDto module2=ComponentTesting.newModuleDto(project);
  tester.get(DbClient.class).componentDao().insert(dbSession,module2);
  tester.get(DbClient.class).snapshotDao().insert(dbSession,SnapshotTesting.createForComponent(module2,projectSnapshot));
  tester.get(DbClient.class).propertiesDao().setProperty(new PropertyDto().setKey("sonar.jira.project.key").setValue("SONAR-APPLICATION").setResourceId(module2.getId()),dbSession);
  dbSession.commit();
  ProjectReferentials ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));
  assertThat(ref.settings(project.key())).isEqualTo(ImmutableMap.of("sonar.jira.project.key","SONAR","sonar.jira.login.secured","john"));
  assertThat(ref.settings(module1.key())).isEqualTo(ImmutableMap.of("sonar.jira.project.key","SONAR-SERVER","sonar.jira.login.secured","john","sonar.coverage.exclusions","**/*.java"));
  assertThat(ref.settings(module2.key())).isEqualTo(ImmutableMap.of("sonar.jira.project.key","SONAR-APPLICATION","sonar.jira.login.secured","john"));
}
