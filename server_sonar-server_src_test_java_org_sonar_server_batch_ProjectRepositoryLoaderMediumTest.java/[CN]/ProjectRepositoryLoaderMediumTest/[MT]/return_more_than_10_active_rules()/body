{
  ComponentDto project=ComponentTesting.newProjectDto();
  userSessionRule.logon("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  QualityProfileDto profileDto=QProfileTesting.newDto(QProfileName.createFor(ServerTester.Xoo.KEY,"SonarQube way"),"abcd").setRulesUpdatedAt(DateUtils.formatDateTime(DateUtils.parseDateTime("2014-01-14T13:00:00+0100"))).setDefault(true);
  tester.get(DbClient.class).qualityProfileDao().insert(dbSession,profileDto);
  for (int i=0; i < 20; i++) {
    RuleKey ruleKey=RuleKey.of("squid","Rule" + i);
    tester.get(DbClient.class).ruleDao().insert(dbSession,RuleTesting.newDto(ruleKey).setName("Rule" + i).setLanguage(ServerTester.Xoo.KEY));
    tester.get(RuleActivator.class).activate(dbSession,new RuleActivation(ruleKey).setSeverity(Severity.MINOR),profileDto.getKey());
  }
  dbSession.commit();
  ProjectRepositories ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));
  assertThat(ref.activeRules()).hasSize(20);
}
