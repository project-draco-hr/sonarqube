{
  MockUserSession.set().setLogin("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  ComponentDto project=ComponentTesting.newProjectDto();
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  SnapshotDto projectSnapshot=SnapshotTesting.createForProject(project);
  tester.get(DbClient.class).snapshotDao().insert(dbSession,projectSnapshot);
  addDefaultProfile();
  ComponentDto file=ComponentTesting.newFileDto(project,"file");
  tester.get(DbClient.class).componentDao().insert(dbSession,file);
  tester.get(DbClient.class).snapshotDao().insert(dbSession,SnapshotTesting.createForComponent(file,projectSnapshot));
  tester.get(FileSourceDao.class).insert(new FileSourceDto().setFileUuid(file.uuid()).setProjectUuid(project.uuid()).setData(",,,,,,,,,,,,,,,unchanged&#13;&#10;,,,,,,,,,,,,,,,content&#13;&#10;").setDataHash("0263047cd758c68c27683625f072f010").setLineHashes("8d7b3d6b83c0a517eac07e1aac94b773").setCreatedAt(new Date().getTime()).setUpdatedAt(new Date().getTime()).setSrcHash("123456"));
  dbSession.commit();
  ProjectReferentials ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(project.key()));
  assertThat(ref.fileDataByPath(project.key())).hasSize(1);
  FileData fileData=ref.fileData(project.key(),file.path());
  assertThat(fileData.hash()).isEqualTo("123456");
}
