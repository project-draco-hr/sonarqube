{
  ComponentDto project=ComponentTesting.newProjectDto();
  tester.get(DbClient.class).componentDao().insert(dbSession,project);
  addDefaultProfile();
  ComponentDto module=ComponentTesting.newModuleDto(project);
  tester.get(DbClient.class).componentDao().insert(dbSession,module);
  ComponentDto subModule=ComponentTesting.newModuleDto(module);
  userSessionRule.login("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  tester.get(DbClient.class).componentDao().insert(dbSession,subModule);
  tester.get(DbClient.class).propertiesDao().insertProperty(dbSession,new PropertyDto().setKey("sonar.jira.project.key").setValue("SONAR").setResourceId(subModule.getId()));
  tester.get(DbClient.class).propertiesDao().insertProperty(dbSession,new PropertyDto().setKey("sonar.jira.login.secured").setValue("john").setResourceId(subModule.getId()));
  tester.get(DbClient.class).propertiesDao().insertProperty(dbSession,new PropertyDto().setKey("sonar.coverage.exclusions").setValue("**/*.java").setResourceId(subModule.getId()));
  dbSession.commit();
  ProjectRepositories ref=loader.load(ProjectRepositoryQuery.create().setModuleKey(subModule.key()));
  assertThat(ref.settings(project.key())).isEmpty();
  assertThat(ref.settings(module.key())).isEmpty();
  assertThat(ref.settings(subModule.key())).isEqualTo(ImmutableMap.of("sonar.jira.project.key","SONAR","sonar.jira.login.secured","john","sonar.coverage.exclusions","**/*.java"));
}
