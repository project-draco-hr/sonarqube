{
  QualityProfileDto qprofile1=QualityProfileDto.createFor("profile1","java");
  QualityProfileDto qprofile2=QualityProfileDto.createFor("profile2","java");
  tester.get(QualityProfileDao.class).insert(dbSession,qprofile1);
  tester.get(QualityProfileDao.class).insert(dbSession,qprofile2);
  RuleDto rule1=newRuleDto(RuleKey.of("test","rule1"));
  RuleDto rule2=newRuleDto(RuleKey.of("test","rule2"));
  tester.get(RuleDao.class).insert(dbSession,rule1);
  tester.get(RuleDao.class).insert(dbSession,rule2);
  ActiveRuleDto activeRule1=ActiveRuleDto.createFor(qprofile1,rule1).setSeverity(Severity.BLOCKER);
  ActiveRuleDto activeRule2=ActiveRuleDto.createFor(qprofile1,rule2).setSeverity(Severity.BLOCKER);
  ActiveRuleDto activeRule3=ActiveRuleDto.createFor(qprofile2,rule2).setSeverity(Severity.BLOCKER);
  tester.get(ActiveRuleDao.class).insert(dbSession,activeRule1);
  tester.get(ActiveRuleDao.class).insert(dbSession,activeRule2);
  tester.get(ActiveRuleDao.class).insert(dbSession,activeRule3);
  dbSession.commit();
  assertThat(tester.get(RuleDao.class).findAll(dbSession)).hasSize(2);
  assertThat(tester.get(ActiveRuleDao.class).findByRule(rule1,dbSession)).hasSize(1);
  assertThat(tester.get(ActiveRuleDao.class).findByRule(rule2,dbSession)).hasSize(2);
}
