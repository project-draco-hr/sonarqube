{
  when(fs.inputFiles(FileQuery.all())).thenReturn((Iterable)Arrays.asList(newInputFile("src/main/java/foo/bar/Foo.java","","foo/bar/Foo.java","java",false),newInputFile("src/main/java2/foo/bar/Foo.java","","foo/bar/Foo.java","java",false),newInputFile("src/test/java/foo/bar/FooTest.java","","foo/bar/FooTest.java","java",true)));
  Languages languages=new Languages(Java.INSTANCE);
  ComponentIndexer indexer=new ComponentIndexer(project,languages,sonarIndex,settings,mock(ResourceKeyMigration.class),new DefaultModuleLanguages(settings,languages),mock(InputFileCache.class));
  indexer.execute(fs);
  verify(sonarIndex).index(org.sonar.api.resources.File.create("src/main/java/foo/bar/Foo.java","foo/bar/Foo.java",Java.INSTANCE,false));
  verify(sonarIndex).index(org.sonar.api.resources.File.create("src/main/java2/foo/bar/Foo.java","foo/bar/Foo.java",Java.INSTANCE,false));
  verify(sonarIndex).index(argThat(new ArgumentMatcher<org.sonar.api.resources.File>(){
    @Override public boolean matches(    Object arg0){
      org.sonar.api.resources.File javaFile=(org.sonar.api.resources.File)arg0;
      return javaFile.getKey().equals("src/test/java/foo/bar/FooTest.java") && javaFile.getDeprecatedKey().equals("foo.bar.FooTest") && javaFile.getPath().equals("src/test/java/foo/bar/FooTest.java")&& javaFile.getQualifier().equals(Qualifiers.UNIT_TEST_FILE);
    }
  }
));
}
