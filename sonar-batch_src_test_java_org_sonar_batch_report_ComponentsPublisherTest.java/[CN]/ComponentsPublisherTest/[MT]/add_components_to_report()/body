{
  ProjectDefinition rootDef=ProjectDefinition.create().setKey("foo");
  rootDef.properties().put(CoreProperties.PROJECT_VERSION_PROPERTY,"1.0");
  Project root=new Project("foo").setName("Root project").setDescription("Root description").setAnalysisDate(DateUtils.parseDate(("2012-12-12")));
  root.setId(1).setUuid("PROJECT_UUID");
  resourceCache.add(root,null).setInputComponent(new DefaultInputModule("foo"));
  Project module1=new Project("module1").setName("Module1").setDescription("Module description");
  module1.setParent(root);
  module1.setId(2).setUuid("MODULE_UUID");
  resourceCache.add(module1,root).setInputComponent(new DefaultInputModule("module1"));
  rootDef.addSubProject(ProjectDefinition.create().setKey("module1"));
  Directory dir=Directory.create("src");
  dir.setEffectiveKey("module1:src");
  dir.setId(3).setUuid("DIR_UUID");
  resourceCache.add(dir,module1).setInputComponent(new DefaultInputDir("foo","src"));
  org.sonar.api.resources.File file=org.sonar.api.resources.File.create("src/Foo.java",Java.INSTANCE,false);
  file.setEffectiveKey("module1:src/Foo.java");
  file.setId(4).setUuid("FILE_UUID");
  resourceCache.add(file,dir).setInputComponent(new DefaultInputFile("module1","src/Foo.java").setLines(2));
  org.sonar.api.resources.File fileWithoutLang=org.sonar.api.resources.File.create("src/make",null,false);
  fileWithoutLang.setEffectiveKey("module1:src/make");
  fileWithoutLang.setId(5).setUuid("FILE_WITHOUT_LANG_UUID");
  resourceCache.add(fileWithoutLang,dir).setInputComponent(new DefaultInputFile("module1","src/make").setLines(10));
  org.sonar.api.resources.File testFile=org.sonar.api.resources.File.create("test/FooTest.java",Java.INSTANCE,true);
  testFile.setEffectiveKey("module1:test/FooTest.java");
  testFile.setId(6).setUuid("TEST_FILE_UUID");
  resourceCache.add(testFile,dir).setInputComponent(new DefaultInputFile("module1","test/FooTest.java").setLines(4));
  ImmutableProjectReactor reactor=new ImmutableProjectReactor(rootDef);
  ComponentsPublisher publisher=new ComponentsPublisher(reactor,resourceCache);
  File outputDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(outputDir);
  publisher.publish(writer);
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,1)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,2)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,3)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,4)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,5)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,6)).isTrue();
  assertThat(writer.hasComponentData(FileStructure.Domain.COMPONENT,7)).isFalse();
  BatchReportReader reader=new BatchReportReader(outputDir);
  Component rootProtobuf=reader.readComponent(1);
  assertThat(rootProtobuf.getKey()).isEqualTo("foo");
  assertThat(rootProtobuf.getDescription()).isEqualTo("Root description");
  assertThat(rootProtobuf.getVersion()).isEqualTo("1.0");
  assertThat(rootProtobuf.getLinkCount()).isEqualTo(0);
  Component module1Protobuf=reader.readComponent(2);
  assertThat(module1Protobuf.getKey()).isEqualTo("module1");
  assertThat(module1Protobuf.getDescription()).isEqualTo("Module description");
  assertThat(module1Protobuf.getVersion()).isEqualTo("1.0");
}
