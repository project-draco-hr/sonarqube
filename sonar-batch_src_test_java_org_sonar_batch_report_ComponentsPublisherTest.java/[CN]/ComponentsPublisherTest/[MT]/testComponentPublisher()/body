{
  ProjectReactor reactor=new ProjectReactor(ProjectDefinition.create().setKey("foo"));
  ResourceCache resourceCache=new ResourceCache();
  ComponentsPublisher publisher=new ComponentsPublisher(reactor,resourceCache);
  Project root=new Project("foo").setName("Root project").setAnalysisDate(new SimpleDateFormat("dd/MM/yyyy").parse("12/12/2012"));
  root.setId(1);
  resourceCache.add(root,null,new Snapshot().setId(11));
  Project module1=new Project("module1").setName("Module1");
  module1.setParent(root);
  module1.setId(2);
  resourceCache.add(module1,root,new Snapshot().setId(12));
  Directory dir1=Directory.create("src");
  dir1.setEffectiveKey("foo:src");
  dir1.setId(3);
  resourceCache.add(dir1,module1,new Snapshot().setId(13));
  org.sonar.api.resources.File mainFile=org.sonar.api.resources.File.create("src/Foo.java","Foo.java",Java.INSTANCE,false);
  mainFile.setEffectiveKey("foo:src/Foo.java");
  mainFile.setId(4);
  resourceCache.add(mainFile,dir1,new Snapshot().setId(14));
  Directory dir2=Directory.create("test");
  dir2.setEffectiveKey("foo:test");
  dir2.setId(5);
  resourceCache.add(dir2,module1,new Snapshot().setId(15));
  org.sonar.api.resources.File testFile=org.sonar.api.resources.File.create("test/FooTest.java","FooTest.java",Java.INSTANCE,true);
  testFile.setEffectiveKey("foo:test/FooTest.java");
  testFile.setId(6);
  resourceCache.add(testFile,dir2,new Snapshot().setId(16));
  File exportDir=temp.newFolder();
  publisher.export(exportDir);
  System.out.println(FileUtils.readFileToString(new File(exportDir,"components.json")));
  JSONAssert.assertEquals(IOUtils.toString(this.getClass().getResourceAsStream("ComponentsPublisherTest/expected.json"),"UTF-8"),FileUtils.readFileToString(new File(exportDir,"components.json")),true);
}
