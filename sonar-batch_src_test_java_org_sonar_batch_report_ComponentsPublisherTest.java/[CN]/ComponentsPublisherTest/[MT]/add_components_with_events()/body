{
  ProjectDefinition rootDef=ProjectDefinition.create().setKey("foo");
  rootDef.properties().put(CoreProperties.PROJECT_VERSION_PROPERTY,"1.0");
  Project root=new Project("foo").setName("Root project").setAnalysisDate(DateUtils.parseDate(("2012-12-12")));
  root.setId(1).setUuid("PROJECT_UUID");
  resourceCache.add(root,null).setSnapshot(new Snapshot().setId(11));
  Project module1=new Project("module1").setName("Module1");
  module1.setParent(root);
  module1.setId(2).setUuid("MODULE_UUID");
  resourceCache.add(module1,root).setSnapshot(new Snapshot().setId(12));
  ProjectDefinition moduleDef=ProjectDefinition.create().setKey("module1");
  rootDef.addSubProject(moduleDef);
  when(eventCache.getEvents(2)).thenReturn(Arrays.asList(Event.newBuilder().setName("name").setCategory(EventCategory.ALERT).setComponentRef(2).build()));
  Directory dir=Directory.create("src");
  dir.setEffectiveKey("module1:src");
  dir.setId(3).setUuid("DIR_UUID");
  resourceCache.add(dir,module1).setSnapshot(new Snapshot().setId(13));
  ImmutableProjectReactor reactor=new ImmutableProjectReactor(rootDef);
  ComponentsPublisher publisher=new ComponentsPublisher(reactor,resourceCache,eventCache);
  File outputDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(outputDir);
  publisher.publish(writer);
  BatchReportReader reader=new BatchReportReader(outputDir);
  Component rootProtobuf=reader.readComponent(1);
  assertThat(rootProtobuf.getVersion()).isEqualTo("1.0");
  assertThat(rootProtobuf.getEventCount()).isEqualTo(0);
  Component module1Protobuf=reader.readComponent(2);
  assertThat(module1Protobuf.getVersion()).isEqualTo("1.0");
  assertThat(module1Protobuf.getEventCount()).isEqualTo(1);
  assertThat(module1Protobuf.getEvent(0).getCategory()).isEqualTo(EventCategory.ALERT);
}
