{
  MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin("me");
  CharacteristicDto defaultCharacteristic=new CharacteristicDto().setKey("API").setName("API").setEnabled(true);
  tester.get(CharacteristicDao.class).insert(defaultCharacteristic,session);
  CharacteristicDto defaultSubCharacteristic=new CharacteristicDto().setKey("API_ABUSE").setName("API Abuse").setEnabled(true).setParentId(defaultCharacteristic.getId());
  tester.get(CharacteristicDao.class).insert(defaultSubCharacteristic,session);
  CharacteristicDto characteristic=new CharacteristicDto().setKey("OS").setName("OS").setEnabled(true);
  tester.get(CharacteristicDao.class).insert(characteristic,session);
  CharacteristicDto subCharacteristic=new CharacteristicDto().setKey("OS_RELATED_PORTABILITY").setName("Portability").setEnabled(true).setParentId(characteristic.getId());
  tester.get(CharacteristicDao.class).insert(subCharacteristic,session);
  RuleDto ruleDto=ruleDao.insert(session,RuleTesting.newDto(RuleKey.of("java","S001")).setName("Rule S001").setDescription("Rule S001 <b>description</b>").setSeverity(Severity.MINOR).setStatus(RuleStatus.BETA).setConfigKey("InternalKeyS001").setLanguage("xoo").setDefaultSubCharacteristicId(defaultSubCharacteristic.getId()).setDefaultRemediationFunction("LINEAR").setDefaultRemediationCoefficient("5min").setDefaultRemediationOffset(null).setSubCharacteristicId(subCharacteristic.getId()).setRemediationFunction("LINEAR_OFFSET").setRemediationCoefficient("5d").setRemediationOffset("10h"));
  session.commit();
  session.clearCache();
  WsTester.TestRequest request=wsTester.newGetRequest("api/rules","show").setParam("key",ruleDto.getKey().toString());
  request.execute().assertJson(getClass(),"show_rule_with_default_and_overridden_debt_infos.json",false);
}
