{
  when(measureRepository.getRawMeasure(PROJECT_COMPONENT,alertStatusMetric)).thenReturn(of(Measure.newMeasureBuilder().setQualityGateStatus(newQualityGateStatus).createNoValue()));
  when(measureRepository.getBaseMeasure(PROJECT_COMPONENT,alertStatusMetric)).thenReturn(of(Measure.newMeasureBuilder().setQualityGateStatus(new QualityGateStatus(previousAlertStatus)).createNoValue()));
  underTest.execute();
  verify(measureRepository).getRawMeasure(PROJECT_COMPONENT,alertStatusMetric);
  verify(measureRepository).getBaseMeasure(PROJECT_COMPONENT,alertStatusMetric);
  verify(eventRepository).add(eq(PROJECT_COMPONENT),eventArgumentCaptor.capture());
  verifyNoMoreInteractions(measureRepository,eventRepository);
  Event event=eventArgumentCaptor.getValue();
  assertThat(event.getCategory()).isEqualTo(Event.Category.ALERT);
  assertThat(event.getName()).isEqualTo(expectedLabel);
  assertThat(event.getDescription()).isEqualTo(ALERT_TEXT);
  assertThat(event.getData()).isNull();
  verify(notificationService).deliver(notificationArgumentCaptor.capture());
  Notification notification=notificationArgumentCaptor.getValue();
  assertThat(notification.getType()).isEqualTo("alerts");
  assertThat(notification.getFieldValue("projectKey")).isEqualTo(PROJECT_COMPONENT.getKey());
  assertThat(notification.getFieldValue("projectUuid")).isEqualTo(PROJECT_COMPONENT.getUuid());
  assertThat(notification.getFieldValue("projectName")).isEqualTo(PROJECT_COMPONENT.getName());
  assertThat(notification.getFieldValue("alertLevel")).isEqualTo(newQualityGateStatus.getStatus().name());
  assertThat(notification.getFieldValue("alertName")).isEqualTo(expectedLabel);
  reset(measureRepository,eventRepository,notificationService);
}
