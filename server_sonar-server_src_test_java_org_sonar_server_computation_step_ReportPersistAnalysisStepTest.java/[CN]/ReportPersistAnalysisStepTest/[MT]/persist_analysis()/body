{
  ComponentDto projectDto=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(dbTester.getSession(),projectDto);
  ComponentDto moduleDto=ComponentTesting.newModuleDto("BCDE",projectDto).setKey("MODULE_KEY").setName("Module");
  dbClient.componentDao().insert(dbTester.getSession(),moduleDto);
  ComponentDto directoryDto=ComponentTesting.newDirectory(moduleDto,"CDEF","MODULE_KEY:src/main/java/dir").setKey("MODULE_KEY:src/main/java/dir");
  dbClient.componentDao().insert(dbTester.getSession(),directoryDto);
  ComponentDto fileDto=ComponentTesting.newFileDto(moduleDto,"DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(dbTester.getSession(),fileDto);
  dbTester.getSession().commit();
  Component file=ReportComponent.builder(Component.Type.FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").build();
  Component directory=ReportComponent.builder(Component.Type.DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").addChildren(file).build();
  Component module=ReportComponent.builder(Component.Type.MODULE,2).setUuid("BCDE").setKey("MODULE_KEY").setVersion("1.1").addChildren(directory).build();
  Component project=ReportComponent.builder(Component.Type.PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).setVersion("1.0").addChildren(module).build();
  treeRootHolder.setRoot(project);
  dbIdsRepository.setComponentId(project,projectDto.getId());
  dbIdsRepository.setComponentId(module,moduleDto.getId());
  dbIdsRepository.setComponentId(directory,directoryDto.getId());
  dbIdsRepository.setComponentId(file,fileDto.getId());
  underTest.execute();
  assertThat(dbTester.countRowsOfTable("snapshots")).isEqualTo(1);
  SnapshotDto projectSnapshot=getUnprocessedSnapshot(projectDto.uuid());
  assertThat(projectSnapshot.getUuid()).isEqualTo(ANALYSIS_UUID);
  assertThat(projectSnapshot.getComponentUuid()).isEqualTo(project.getUuid());
  assertThat(projectSnapshot.getVersion()).isEqualTo("1.0");
  assertThat(projectSnapshot.getLast()).isFalse();
  assertThat(projectSnapshot.getStatus()).isEqualTo("U");
  assertThat(projectSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(projectSnapshot.getBuildDate()).isEqualTo(now);
  assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());
  assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());
  assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());
}
