{
  ComponentDto developer=newDeveloper("developer").setUuid("developer-uuid");
  ComponentDto project=newProjectDto("project-uuid").setKey("project-key");
  SnapshotDto developerSnapshot=componentDb.insertDeveloperAndSnapshot(developer);
  SnapshotDto projectSnapshot=componentDb.insertProjectAndSnapshot(project);
  SnapshotDto file1Snapshot=componentDb.insertComponentAndSnapshot(newFileDto(project,"file1-uuid"),projectSnapshot);
  SnapshotDto file2Snapshot=componentDb.insertComponentAndSnapshot(newFileDto(project,"file2-uuid"),projectSnapshot);
  componentDb.insertComponentAndSnapshot(newDevProjectCopy("project-uuid-copy",project,developer),developerSnapshot);
  MetricDto ncloc=insertNclocMetric();
  dbClient.measureDao().insert(dbSession,newMeasureDto(ncloc,projectSnapshot.getId()).setDeveloperId(developer.getId()),newMeasureDto(ncloc,file1Snapshot.getId()).setValue(3d).setDeveloperId(developer.getId()),newMeasureDto(ncloc,file1Snapshot.getId()).setDeveloperId(null),newMeasureDto(ncloc,file2Snapshot.getId()).setDeveloperId(null));
  db.commit();
  ComponentTreeWsResponse response=call(ws.newRequest().setParam(PARAM_BASE_COMPONENT_ID,"project-uuid").setParam(PARAM_DEVELOPER_ID,"developer-uuid").setParam(PARAM_STRATEGY,CHILDREN_STRATEGY).setParam(PARAM_METRIC_KEYS,"ncloc"));
  assertThat(response.getComponentsCount()).isEqualTo(2);
  WsMeasures.Component file=response.getComponents(0);
  assertThat(file.getId()).isEqualTo("file1-uuid");
  assertThat(file.getMeasuresCount()).isEqualTo(1);
  assertThat(file.getMeasures(0).getValue()).isEqualTo("3");
}
