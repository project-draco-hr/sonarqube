{
  ComponentDto projectDto=newProjectDto("project-uuid");
  SnapshotDto projectSnapshot=componentDb.insertProjectAndSnapshot(projectDto);
  userSession.anonymous().addProjectUuidPermissions(UserRole.ADMIN,"project-uuid");
  ComponentDto directoryDto=newDirectory(projectDto,"directory-uuid","path/to/directory").setName("directory-1");
  componentDb.insertComponent(directoryDto);
  ComponentDto file=newFileDto(directoryDto,"file-uuid").setName("file-1");
  componentDb.insertComponent(file);
  MetricDto coverage=insertCoverageMetric();
  dbClient.metricDao().insert(dbSession,newMetricDto().setKey("ncloc").setValueType(ValueType.INT.name()).setOptimizedBestValue(true).setBestValue(100d).setWorstValue(1000d));
  dbClient.metricDao().insert(dbSession,newMetricDtoWithoutOptimization().setKey("new_violations").setOptimizedBestValue(true).setBestValue(1984.0d).setValueType(ValueType.INT.name()));
  dbClient.measureDao().insert(dbSession,newMeasureDto(coverage,file,projectSnapshot).setValue(15.5d),newMeasureDto(coverage,directoryDto,projectSnapshot).setValue(42.0d));
  db.commit();
  ComponentTreeWsResponse response=call(ws.newRequest().setParam(PARAM_BASE_COMPONENT_ID,"project-uuid").setParam(PARAM_METRIC_KEYS,"ncloc,coverage,new_violations").setParam(PARAM_ADDITIONAL_FIELDS,"metrics"));
  assertThat(response.getComponentsList().get(0).getMeasuresList()).extracting("metric").containsOnly("coverage");
  List<WsMeasures.Measure> fileMeasures=response.getComponentsList().get(1).getMeasuresList();
  assertThat(fileMeasures).extracting("metric").containsOnly("ncloc","coverage","new_violations");
  assertThat(fileMeasures).extracting("value").containsOnly("100","15.5","");
  List<Common.Metric> metrics=response.getMetrics().getMetricsList();
  assertThat(metrics).extracting("bestValue").contains("100","");
  assertThat(metrics).extracting("worstValue").contains("1000");
}
