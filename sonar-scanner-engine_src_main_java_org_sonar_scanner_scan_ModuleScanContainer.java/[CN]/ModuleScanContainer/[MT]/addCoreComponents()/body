{
  ProjectDefinition moduleDefinition=getComponentByType(DefaultProjectTree.class).getProjectDefinition(module);
  add(moduleDefinition,module,getComponentByType(BatchComponentCache.class).get(module).inputComponent(),ModuleSettings.class);
  ModuleSettings moduleSettings=getComponentByType(ModuleSettings.class);
  module.setSettings(moduleSettings);
  if (getComponentByType(AnalysisMode.class).isIssues()) {
    add(IssuesPhaseExecutor.class,IssuesReports.class);
  }
 else {
    add(PublishPhaseExecutor.class);
  }
  add(EventBus.class,RuleFinderCompatibility.class,PostJobsExecutor.class,SensorsExecutor.class,InitializersExecutor.class,ModuleInputFileCache.class,FileExclusions.class,ExclusionFilters.class,InputFileBuilderFactory.class,FileMetadata.class,StatusDetectionFactory.class,LanguageDetectionFactory.class,FileIndexer.class,ComponentIndexer.class,LanguageVerifier.class,FileSystemLogger.class,DefaultModuleFileSystem.class,ModuleFileSystemInitializer.class,QProfileVerifier.class,SensorOptimizer.class,PostJobOptimizer.class,DefaultPostJobContext.class,DefaultSensorStorage.class,DeprecatedSensorContext.class,BatchExtensionDictionnary.class,IssueFilters.class,CoverageExclusions.class,new RulesProfileProvider(),CheckFactory.class,IssuableFactory.class,ModuleIssues.class,org.sonar.api.issue.NoSonarFilter.class,IssueInclusionPatternInitializer.class,IssueExclusionPatternInitializer.class,IssueExclusionsRegexpScanner.class,IssueExclusionsLoader.class,EnforceIssuesFilter.class,IgnoreIssuesFilter.class,BatchPerspectives.class,HighlightableBuilder.class,SymbolizableBuilder.class,DefaultFileLinesContextFactory.class);
}
