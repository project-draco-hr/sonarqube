{
  File baseDir=prepareProject();
  File xooFileNoScm=new File(baseDir,"src/sample2.xoo");
  FileUtils.write(xooFileNoScm,SAMPLE_XOO_CONTENT);
  TaskBuilder taskBuilder=tester.newTask().properties(ImmutableMap.<String,String>builder().put("sonar.task","scan").put("sonar.projectBaseDir",baseDir.getAbsolutePath()).put("sonar.projectKey","com.foo.project").put("sonar.projectName","Foo Project").put("sonar.projectVersion","1.0-SNAPSHOT").put("sonar.projectDescription","Description of Foo Project").put("sonar.sources","src").put("sonar.scm.provider","xoo").build());
  TaskResult result=taskBuilder.start();
  assertThat(result.measures()).hasSize(1 + 2 * 4);
  assertThat(result.measures()).contains(new DefaultMeasure<Integer>().forMetric(CoreMetrics.LINES).onFile(new DefaultInputFile("com.foo.project","src/sample2.xoo")).withValue(2));
  assertThat(result.measures()).contains(new DefaultMeasure<String>().forMetric(CoreMetrics.SCM_AUTHORS_BY_LINE).onFile(new DefaultInputFile("com.foo.project","src/sample2.xoo")).withValue("1=;2="));
  File xooScmFile=new File(baseDir,"src/sample2.xoo.scm");
  FileUtils.write(xooScmFile,"1,foo,2013-01-04\n" + "1,bar,2013-01-04\n");
  result=taskBuilder.property("sonar.scm.forceReloadAll","true").start();
  assertThat(result.measures()).contains(new DefaultMeasure<String>().forMetric(CoreMetrics.SCM_AUTHORS_BY_LINE).onFile(new DefaultInputFile("com.foo.project","src/sample2.xoo")).withValue("1=foo;2=bar"));
}
