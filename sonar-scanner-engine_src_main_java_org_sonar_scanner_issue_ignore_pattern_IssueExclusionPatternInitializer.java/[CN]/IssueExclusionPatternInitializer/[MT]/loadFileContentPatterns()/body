{
  blockPatterns=Lists.newArrayList();
  String patternConf=StringUtils.defaultIfBlank(getSettings().getString(IssueExclusionProperties.PATTERNS_BLOCK_KEY),"");
  for (  String id : StringUtils.split(patternConf,',')) {
    String propPrefix=IssueExclusionProperties.PATTERNS_BLOCK_KEY + "." + id+ ".";
    String beginBlockRegexp=getSettings().getString(propPrefix + IssueExclusionProperties.BEGIN_BLOCK_REGEXP);
    String endBlockRegexp=getSettings().getString(propPrefix + IssueExclusionProperties.END_BLOCK_REGEXP);
    String[] fields=new String[]{beginBlockRegexp,endBlockRegexp};
    PatternDecoder.checkDoubleRegexpLineConstraints(StringUtils.join(fields,","),fields);
    IssuePattern pattern=new IssuePattern().setBeginBlockRegexp(nullToEmpty(beginBlockRegexp)).setEndBlockRegexp(nullToEmpty(endBlockRegexp));
    blockPatterns.add(pattern);
  }
  allFilePatterns=Lists.newArrayList();
  patternConf=StringUtils.defaultIfBlank(getSettings().getString(IssueExclusionProperties.PATTERNS_ALLFILE_KEY),"");
  for (  String id : StringUtils.split(patternConf,',')) {
    String propPrefix=IssueExclusionProperties.PATTERNS_ALLFILE_KEY + "." + id+ ".";
    String allFileRegexp=getSettings().getString(propPrefix + IssueExclusionProperties.FILE_REGEXP);
    PatternDecoder.checkWholeFileRegexp(allFileRegexp);
    IssuePattern pattern=new IssuePattern().setAllFileRegexp(nullToEmpty(allFileRegexp));
    allFilePatterns.add(pattern);
  }
}
