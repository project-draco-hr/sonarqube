{
  Rule rule=ruleRepository.getByKey(issue.ruleKey());
  DebtRemediationFunction fn=rule.getRemediationFunction();
  if (fn != null) {
    verifyEffortToFix(issue,fn);
    Duration debt=Duration.create(0);
    String gapMultiplier=fn.gapMultiplier();
    if (fn.type().usesGapMultiplier() && !Strings.isNullOrEmpty(gapMultiplier)) {
      int effortToFixValue=Objects.firstNonNull(issue.effortToFix(),1).intValue();
      debt=durations.decode(gapMultiplier).multiply(effortToFixValue);
    }
    String baseEffort=fn.baseEffort();
    if (fn.type().usesBaseEffort() && !Strings.isNullOrEmpty(baseEffort)) {
      debt=debt.add(durations.decode(baseEffort));
    }
    return debt;
  }
  return null;
}
