{
  if (other == org.sonarqube.ws.Issues.Search.getDefaultInstance())   return this;
  if (other.hasTotal()) {
    setTotal(other.getTotal());
  }
  if (other.hasP()) {
    setP(other.getP());
  }
  if (other.hasPs()) {
    setPs(other.getPs());
  }
  if (other.hasPaging()) {
    mergePaging(other.getPaging());
  }
  if (other.hasDebtTotal()) {
    setDebtTotal(other.getDebtTotal());
  }
  if (issuesBuilder_ == null) {
    if (!other.issues_.isEmpty()) {
      if (issues_.isEmpty()) {
        issues_=other.issues_;
        bitField0_=(bitField0_ & ~0x00000020);
      }
 else {
        ensureIssuesIsMutable();
        issues_.addAll(other.issues_);
      }
      onChanged();
    }
  }
 else {
    if (!other.issues_.isEmpty()) {
      if (issuesBuilder_.isEmpty()) {
        issuesBuilder_.dispose();
        issuesBuilder_=null;
        issues_=other.issues_;
        bitField0_=(bitField0_ & ~0x00000020);
        issuesBuilder_=com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getIssuesFieldBuilder() : null;
      }
 else {
        issuesBuilder_.addAllMessages(other.issues_);
      }
    }
  }
  if (componentsBuilder_ == null) {
    if (!other.components_.isEmpty()) {
      if (components_.isEmpty()) {
        components_=other.components_;
        bitField0_=(bitField0_ & ~0x00000040);
      }
 else {
        ensureComponentsIsMutable();
        components_.addAll(other.components_);
      }
      onChanged();
    }
  }
 else {
    if (!other.components_.isEmpty()) {
      if (componentsBuilder_.isEmpty()) {
        componentsBuilder_.dispose();
        componentsBuilder_=null;
        components_=other.components_;
        bitField0_=(bitField0_ & ~0x00000040);
        componentsBuilder_=com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getComponentsFieldBuilder() : null;
      }
 else {
        componentsBuilder_.addAllMessages(other.components_);
      }
    }
  }
  if (other.hasRules()) {
    mergeRules(other.getRules());
  }
  if (other.hasUsers()) {
    mergeUsers(other.getUsers());
  }
  if (other.hasActionPlans()) {
    mergeActionPlans(other.getActionPlans());
  }
  if (other.hasLanguages()) {
    mergeLanguages(other.getLanguages());
  }
  if (other.hasFacets()) {
    mergeFacets(other.getFacets());
  }
  this.mergeUnknownFields(other.unknownFields);
  onChanged();
  return this;
}
