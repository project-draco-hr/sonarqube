{
  ProjectDefinition projectDefinition=container.getComponentByType(ProjectTree.class).getProjectDefinition(project);
  container.addSingleton(projectDefinition);
  container.addSingleton(project);
  container.addSingleton(project.getConfiguration());
  container.addSingleton(ProjectSettings.class);
  container.addSingleton(UnsupportedProperties.class);
  for (  Object component : projectDefinition.getContainerExtensions()) {
    container.addSingleton(component);
  }
  container.addSingleton(Languages.class);
  container.addSingleton(DefaultProjectClasspath.class);
  container.addSingleton(DefaultProjectFileSystem2.class);
  container.addSingleton(RulesDao.class);
  container.addSingleton(container.getComponentByType(DefaultResourcePersister.class).getSnapshot(project));
  container.addSingleton(TimeMachineConfiguration.class);
  container.addSingleton(org.sonar.api.database.daos.MeasuresDao.class);
  container.addSingleton(ProfilesDao.class);
  container.addSingleton(DefaultSensorContext.class);
  container.addSingleton(BatchExtensionDictionnary.class);
  container.addSingleton(DefaultTimeMachine.class);
  container.addSingleton(ViolationFilters.class);
  container.addSingleton(ResourceFilters.class);
  container.addSingleton(DefaultModelFinder.class);
  container.addSingleton(DefaultProfileLoader.class);
  container.addSingleton(DryRunExporter.class);
  container.addPicoAdapter(new ProfileProvider());
}
