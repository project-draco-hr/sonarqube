{
  DumbComponent project=builder(PROJECT,1).addChildren(builder(MODULE,11).addChildren(builder(DIRECTORY,111).addChildren(builder(Component.Type.FILE,1111).build(),builder(Component.Type.FILE,1112).build()).build()).build(),builder(MODULE,12).addChildren(builder(DIRECTORY,121).addChildren(builder(Component.Type.FILE,1211).build()).build()).build()).build();
  treeRootHolder.setRoot(project);
  measureRepository.addRawMeasure(1111,COMPLEXITY_IN_FUNCTIONS_KEY,newMeasureBuilder().create(5));
  measureRepository.addRawMeasure(1111,FUNCTIONS_KEY,newMeasureBuilder().create(2));
  measureRepository.addRawMeasure(1112,COMPLEXITY_IN_FUNCTIONS_KEY,newMeasureBuilder().create(1));
  measureRepository.addRawMeasure(1112,FUNCTIONS_KEY,newMeasureBuilder().create(1));
  measureRepository.addRawMeasure(1211,COMPLEXITY_IN_FUNCTIONS_KEY,newMeasureBuilder().create(9));
  measureRepository.addRawMeasure(1211,FUNCTIONS_KEY,newMeasureBuilder().create(2));
  underTest.visit(project);
  assertThat(measureRepository.getAddedRawMeasure(1,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(3d);
  assertThat(measureRepository.getAddedRawMeasure(11,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(2d);
  assertThat(measureRepository.getAddedRawMeasure(111,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(2d);
  assertThat(measureRepository.getAddedRawMeasure(1111,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(2.5d);
  assertThat(measureRepository.getAddedRawMeasure(1112,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(1d);
  assertThat(measureRepository.getAddedRawMeasure(12,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(4.5d);
  assertThat(measureRepository.getAddedRawMeasure(121,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(4.5d);
  assertThat(measureRepository.getAddedRawMeasure(1211,FUNCTION_COMPLEXITY_KEY).get().getDoubleValue()).isEqualTo(4.5d);
}
