{
  ComponentDto project=ComponentTesting.newProjectDto();
  dbClient.componentDao().insert(session,project);
  ComponentDto project2=ComponentTesting.newProjectDto();
  dbClient.componentDao().insert(session,project2);
  UserDto user=UserTesting.newUserDto();
  dbClient.userDao().insert(session,user);
  String key="key";
  String anotherKey="anotherKey";
  insertProperties(newGlobalPropertyDto().setKey(key),newComponentPropertyDto(project).setKey(key),newComponentPropertyDto(project2).setKey(key),newComponentPropertyDto(project2).setKey(anotherKey),newUserPropertyDto(user).setKey(key));
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet(key),newHashSet(project.getId()))).extracting("key","resourceId").containsOnly(Tuple.tuple(key,project.getId()));
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet(key),newHashSet(project.getId(),project2.getId()))).extracting("key","resourceId").containsOnly(Tuple.tuple(key,project.getId()),Tuple.tuple(key,project2.getId()));
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet(key,anotherKey),newHashSet(project.getId(),project2.getId()))).extracting("key","resourceId").containsOnly(Tuple.tuple(key,project.getId()),Tuple.tuple(key,project2.getId()),Tuple.tuple(anotherKey,project2.getId()));
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet("unknown"),newHashSet(project.getId()))).isEmpty();
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet("key"),newHashSet(123456789L))).isEmpty();
  assertThat(dao.selectPropertiesByKeysAndComponentIds(session,newHashSet("unknown"),newHashSet(123456789L))).isEmpty();
}
