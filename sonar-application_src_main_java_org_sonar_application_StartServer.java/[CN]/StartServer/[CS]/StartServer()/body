{
  Installation installation=new Installation();
  Thread shutdownHook=new Thread(new Runnable(){
    @Override public void run(){
      LOGGER.info("JVM Shutdown start");
      stop();
      LOGGER.info("JVM Shutdown end");
    }
  }
);
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  monitor=new Monitor();
  String opts=installation.prop("sonar.es.javaOpts","-server -Xmx256m -Xms128m -Xss256k -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly");
  elasticsearch=new ProcessWrapper("ES").setWorkDir(installation.homeDir()).setJmxPort(NetworkUtils.freePort()).addJavaOpts(opts).addJavaOpts("-Djava.io.tmpdir=" + installation.tempDir().getAbsolutePath()).addJavaOpts("-Dsonar.path.logs=" + installation.logsDir().getAbsolutePath()).setClassName("org.sonar.search.ElasticSearch").setProperties(installation.props().cryptedProperties()).addClasspath(installation.starPath("lib/common")).addClasspath(installation.starPath("lib/search")).execute();
  monitor.registerProcess(elasticsearch);
  opts=installation.prop("sonar.web.javaOpts","-Xmx768m -server -XX:MaxPermSize=160m -XX:+HeapDumpOnOutOfMemoryError");
  server=new ProcessWrapper("SQ").setWorkDir(installation.homeDir()).setJmxPort(NetworkUtils.freePort()).addJavaOpts(opts).addJavaOpts("-Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djruby.management.enabled=false").addJavaOpts("-Djava.io.tmpdir=" + installation.tempDir().getAbsolutePath()).addJavaOpts("-Dsonar.path.logs=" + installation.logsDir().getAbsolutePath()).setClassName("org.sonar.server.app.ServerProcess").setProperties(installation.props().cryptedProperties()).addClasspath(installation.starPath("extensions/jdbc-driver/mysql")).addClasspath(installation.starPath("extensions/jdbc-driver/mssql")).addClasspath(installation.starPath("extensions/jdbc-driver/oracle")).addClasspath(installation.starPath("extensions/jdbc-driver/postgresql")).addClasspath(installation.starPath("lib/common")).addClasspath(installation.starPath("lib/server")).execute();
  monitor.registerProcess(server);
  monitor.start();
  try {
    monitor.join();
  }
  finally {
    stop();
  }
}
