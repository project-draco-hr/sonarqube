{
  Installation installation=new Installation();
  String esPort=installation.prop("sonar.es.node.port",null);
  if (esPort == null) {
    esPort=String.valueOf(NetworkUtils.freePort());
  }
  String esCluster=installation.prop("sonar.es.cluster.name",null);
  if (esCluster == null) {
    installation.setProp("sonar.es.cluster.name","sonarqube");
  }
  shutdownHook=new Thread(new Runnable(){
    @Override public void run(){
      monitor.interrupt();
      terminateAndWait(elasticsearch);
      terminateAndWait(server);
    }
  }
);
  Runtime.getRuntime().addShutdownHook(shutdownHook);
  monitor=new Monitor();
  String opts=installation.prop("sonar.es.javaOpts","-server -Xmx256m -Xms128m -Xss256k -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly");
  elasticsearch=new ProcessWrapper("ES").setWorkDir(installation.homeDir()).addJavaOpts(opts).setClassName("org.sonar.search.ElasticSearch").setArguments(installation.props()).setArgument("sonar.es.node.port",esPort).addClasspath(installation.starPath("lib/common")).addClasspath(installation.starPath("lib/search"));
  monitor.registerProcess(elasticsearch);
  opts=installation.prop("sonar.web.javaOpts","-Xmx768m -server -XX:MaxPermSize=160m -Djava.awt.headless=true -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -Djruby.management.enabled=false");
  server=new ProcessWrapper("SQ").setWorkDir(installation.homeDir()).addJavaOpts(opts).setClassName("org.sonar.server.app.ServerProcess").setEnvProperty("SONAR_HOME",installation.homeDir().getAbsolutePath()).setArguments(installation.props()).setArgument("sonar.es.type","TRANSPORT").addClasspath(installation.starPath("lib/common")).addClasspath(installation.starPath("lib/server"));
  monitor.registerProcess(server);
  monitor.start();
  try {
    monitor.join();
  }
 catch (  InterruptedException e) {
    stop(true);
  }
  stop(true);
}
