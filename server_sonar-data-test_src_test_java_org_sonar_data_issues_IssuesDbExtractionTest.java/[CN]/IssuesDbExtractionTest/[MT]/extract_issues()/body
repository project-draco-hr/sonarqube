{
  for (long p=1; p <= PROJECTS_NUMBER; p++) {
    ComponentDto project=ComponentTesting.newProjectDto().setKey("project-" + p).setName("Project " + p).setLongName("Project " + p);
    componentDao.insert(session,project);
    for (int i=0; i < NUMBER_FILES_PER_PROJECT; i++) {
      String index=p * PROJECTS_NUMBER + i + "";
      ComponentDto file=ComponentTesting.newFileDto(project).setKey("file-" + index).setName("File " + index).setLongName("File " + index);
      componentDao.insert(session,file);
      String status=statuses.next();
      String resolution=null;
      if (status.equals(Issue.STATUS_RESOLVED) || status.equals(Issue.STATUS_CLOSED)) {
        resolution=resolutions.next();
      }
      RuleDto rule=rules.next();
      IssueDto issue=IssueTesting.newDto(rule,file,project).setMessage("Message from rule " + rule.getKey().toString()).setAssignee(users.next()).setReporter(users.next()).setAuthorLogin(users.next()).setSeverity(severities.next()).setStatus(status).setResolution(resolution);
      issueDao.insert(session,issue);
    }
    session.commit();
  }
  long start=System.currentTimeMillis();
  int issueInsertCount=ISSUE_COUNT;
  issueDao.synchronizeAfter(session);
  long stop=System.currentTimeMillis();
  assertThat(issueDao.synchronizedIssues).isEqualTo(issueInsertCount);
  long time=stop - start;
  LOGGER.info("Processed {} Issues in {} ms with avg {} Issue/second",ISSUE_COUNT,time,documentPerSecond(time));
}
