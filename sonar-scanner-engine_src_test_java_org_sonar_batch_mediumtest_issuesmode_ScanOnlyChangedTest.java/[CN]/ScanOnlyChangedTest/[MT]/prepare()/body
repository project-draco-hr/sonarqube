{
  String filePath="xources/hello/HelloJava.xoo";
  String md5sum=DigestUtils.md5Hex(FileUtils.readFileToString(new File(Resources.getResource("mediumtest/xoo/sample/" + filePath).getPath())));
  tester=BatchMediumTester.builder().bootstrapProperties(ImmutableMap.of(CoreProperties.ANALYSIS_MODE,CoreProperties.ANALYSIS_MODE_ISSUES)).registerPlugin("xoo",new XooPlugin()).addDefaultQProfile("xoo","Sonar Way").addRules(new XooRulesDefinition()).addRule("manual:MyManualIssue","manual","MyManualIssue","My manual issue").addRule("manual:MyManualIssueDup","manual","MyManualIssue","My manual issue").addActiveRule("xoo","OneIssuePerLine",null,"One issue per line","MAJOR",null,"xoo").addActiveRule("xoo","OneIssueOnDirPerFile",null,"OneIssueOnDirPerFile","MAJOR",null,"xoo").addActiveRule("xoo","OneIssuePerModule",null,"OneIssuePerModule","MAJOR",null,"xoo").addActiveRule("manual","MyManualIssue",null,"My manual issue","MAJOR",null,null).addFileData("sample",filePath,new FileData(md5sum,null)).setPreviousAnalysisDate(new Date()).mockServerIssue(ServerIssue.newBuilder().setKey("xyz").setModuleKey("sample").setMsg("One issue per Line copied").setPath("xources/hello/HelloJava.xoo").setRuleRepository("xoo").setRuleKey("OneIssuePerLine").setLine(1).setSeverity(Severity.MAJOR).setCreationDate(date("14/03/2004")).setChecksum(DigestUtils.md5Hex("packagehello;")).setStatus("OPEN").build()).mockServerIssue(ServerIssue.newBuilder().setKey("resolved-on-project").setModuleKey("sample").setRuleRepository("xoo").setRuleKey("OneIssuePerModule").setSeverity(Severity.CRITICAL).setCreationDate(date("14/03/2004")).setStatus("OPEN").build()).mockServerIssue(ServerIssue.newBuilder().setKey("manual").setModuleKey("sample").setPath("xources/hello/HelloJava.xoo").setRuleRepository("manual").setRuleKey("MyManualIssue").setLine(1).setSeverity(Severity.MAJOR).setCreationDate(date("14/03/2004")).setChecksum(DigestUtils.md5Hex("packagehello;")).setStatus("OPEN").build()).build();
  tester.start();
}
