{
  LinkedHashMap<String,LinkedHashMap<String,Object>> nodes=new LinkedHashMap<>();
  NodesStatsResponse nodesStats=esClient.prepareNodesStats().all().get();
  for (  Map.Entry<String,NodeStats> entry : nodesStats.getNodesMap().entrySet()) {
    LinkedHashMap<String,Object> nodeAttributes=new LinkedHashMap<>();
    nodes.put(entry.getKey(),nodeAttributes);
    NodeStats stats=entry.getValue();
    nodeAttributes.put("Address",stats.getNode().getAddress().toString());
    nodeAttributes.put("Type",stats.getNode().isMasterNode() ? "Master" : "Slave");
    nodeAttributes.put("Disk Usage",byteCountToDisplaySize(stats.getFs().getTotal().getTotal().bytes()));
    nodeAttributes.put("Disk Available",byteCountToDisplaySize(stats.getFs().getTotal().getAvailable().bytes()));
    nodeAttributes.put("Store Size",byteCountToDisplaySize(stats.getIndices().getStore().getSizeInBytes()));
    nodeAttributes.put("Open Files",stats.getProcess().getOpenFileDescriptors());
    nodeAttributes.put("JVM Heap Usage",formatPercent(stats.getJvm().getMem().getHeapUsedPrecent()));
    nodeAttributes.put("JVM Heap Used",byteCountToDisplaySize(stats.getJvm().getMem().getHeapUsed().bytes()));
    nodeAttributes.put("JVM Heap Max",byteCountToDisplaySize(stats.getJvm().getMem().getHeapMax().bytes()));
    nodeAttributes.put("JVM Non Heap Used",byteCountToDisplaySize(stats.getJvm().getMem().getNonHeapUsed().bytes()));
    nodeAttributes.put("JVM Threads",stats.getJvm().getThreads().count());
    nodeAttributes.put("Field Cache Memory",byteCountToDisplaySize(stats.getIndices().getFieldData().getMemorySizeInBytes()));
    nodeAttributes.put("Filter Cache Memory",byteCountToDisplaySize(stats.getIndices().getFilterCache().getMemorySizeInBytes()));
    nodeAttributes.put("ID Cache Memory",byteCountToDisplaySize(stats.getIndices().getIdCache().getMemorySizeInBytes()));
    nodeAttributes.put("Query Cache Memory",byteCountToDisplaySize(stats.getIndices().getQueryCache().getMemorySizeInBytes()));
  }
  return nodes;
}
