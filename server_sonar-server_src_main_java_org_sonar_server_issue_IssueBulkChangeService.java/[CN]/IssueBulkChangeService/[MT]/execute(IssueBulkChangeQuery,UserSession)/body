{
  LOG.debug("BulkChangeQuery : {}",issueBulkChangeQuery);
  long start=System.currentTimeMillis();
  userSession.checkLoggedIn();
  IssueBulkChangeResult result=new IssueBulkChangeResult();
  List<Issue> issues=getByKeysForUpdate(issueBulkChangeQuery.issues());
  Repository repository=new Repository(issues);
  List<Action> bulkActions=getActionsToApply(issueBulkChangeQuery,issues,userSession);
  IssueChangeContext issueChangeContext=IssueChangeContext.createUser(new Date(),userSession.login());
  Set<String> concernedProjects=new HashSet<String>();
  for (  Issue issue : issues) {
    ActionContext actionContext=new ActionContext(issue,issueChangeContext);
    for (    Action action : bulkActions) {
      applyAction(action,actionContext,issueBulkChangeQuery,result);
    }
    if (result.issuesChanged().contains(issue)) {
      if (issueBulkChangeQuery.hasComment()) {
        applyAction(getAction(CommentAction.KEY),actionContext,issueBulkChangeQuery,result);
      }
      issueStorage.save((DefaultIssue)issue);
      if (issueBulkChangeQuery.sendNotifications()) {
        String projectKey=issue.projectKey();
        if (projectKey != null) {
          Rule rule=repository.rule(issue.ruleKey());
          issueNotifications.sendChanges((DefaultIssue)issue,issueChangeContext.login(),rule != null ? rule.getName() : null,repository.project(projectKey),repository.component(issue.componentKey()),null,false);
        }
      }
      concernedProjects.add(issue.projectKey());
    }
  }
  for (  String projectKey : concernedProjects) {
    dryRunCache.reportResourceModification(projectKey);
  }
  LOG.debug("BulkChange execution time : {} ms",System.currentTimeMillis() - start);
  return result;
}
