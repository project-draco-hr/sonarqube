{
  RuleQuery query=new RuleQuery();
  query.setQueryText(Strings.emptyToNull((String)params.get("searchQuery")));
  query.setKey(Strings.emptyToNull((String)params.get("key")));
  query.setLanguages(RubyUtils.toStrings(params.get("languages")));
  query.setRepositories(RubyUtils.toStrings(params.get("repositories")));
  query.setSeverities(RubyUtils.toStrings(params.get("severities")));
  query.setStatuses(RubyUtils.toEnums(params.get("statuses"),RuleStatus.class));
  query.setTags(RubyUtils.toStrings(params.get("tags")));
  query.setDebtCharacteristics(RubyUtils.toStrings(params.get("debtCharacteristics")));
  query.setHasDebtCharacteristic(RubyUtils.toBoolean(params.get("hasDebtCharacteristic")));
  query.setSortField(RuleNormalizer.RuleField.NAME);
  QueryContext options=new QueryContext();
  Integer pageSize=RubyUtils.toInteger(params.get("pageSize"));
  int size=pageSize != null ? pageSize : 50;
  if (size > -1) {
    Integer page=RubyUtils.toInteger(params.get("p"));
    int pageIndex=page != null ? page : 1;
    options.setPage(pageIndex,size);
    Result<Rule> result=service.search(query,options);
    return new PagedResult<Rule>(result.getHits(),PagingResult.create(options.getLimit(),pageIndex,result.getTotal()));
  }
 else {
    options=new QueryContext().setScroll(true);
    List<Rule> rules=newArrayList(service.search(query,options).scroll());
    return new PagedResult<Rule>(rules,PagingResult.create(Integer.MAX_VALUE,1,rules.size()));
  }
}
