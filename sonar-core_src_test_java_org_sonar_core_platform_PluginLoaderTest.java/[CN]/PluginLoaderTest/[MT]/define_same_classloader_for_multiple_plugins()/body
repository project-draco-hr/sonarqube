{
  File baseJarFile=temp.newFile(), extensionJar1=temp.newFile(), extensionJar2=temp.newFile();
  PluginInfo base=new PluginInfo("foo").setJarFile(baseJarFile).setMainClass("org.foo.FooPlugin").setUseChildFirstClassLoader(false);
  PluginInfo extension1=new PluginInfo("fooExtension1").setJarFile(extensionJar1).setMainClass("org.foo.Extension1Plugin").setBasePlugin("foo");
  PluginInfo extension2=new PluginInfo("fooExtension2").setJarFile(extensionJar2).setMainClass("org.foo.Extension2Plugin").setBasePlugin("foo").setUseChildFirstClassLoader(true);
  PluginLoader loader=new PluginLoader(new FakePluginExploder());
  Collection<ClassloaderDef> defs=loader.defineClassloaders(ImmutableMap.of(base.getKey(),base,extension1.getKey(),extension1,extension2.getKey(),extension2));
  assertThat(defs).hasSize(1);
  ClassloaderDef def=defs.iterator().next();
  assertThat(def.getBasePluginKey()).isEqualTo("foo");
  assertThat(def.isSelfFirstStrategy()).isFalse();
  assertThat(def.getFiles()).containsOnly(baseJarFile,extensionJar1,extensionJar2);
  assertThat(def.getMainClassesByPluginKey()).containsOnly(entry("foo","org.foo.FooPlugin"),entry("fooExtension1","org.foo.Extension1Plugin"),entry("fooExtension2","org.foo.Extension2Plugin"));
}
