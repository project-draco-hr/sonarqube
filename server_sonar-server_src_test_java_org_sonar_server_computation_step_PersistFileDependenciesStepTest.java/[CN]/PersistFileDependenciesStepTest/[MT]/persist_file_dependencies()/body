{
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setUuid(PROJECT_UUID).addChildRef(2).addChildRef(4).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.DIRECTORY).setUuid("DIRECTORY_A").addChildRef(3).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.FILE).setUuid("FILE_A").build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.DIRECTORY).setUuid("DIRECTORY_B").addChildRef(5).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(5).setType(Constants.ComponentType.FILE).setUuid("FILE_B").build());
  writer.writeFileDependencies(3,Collections.singletonList(BatchReport.FileDependency.newBuilder().setToFileRef(5).setWeight(1).build()));
  sut.execute(context);
  List<FileDependencyDto> dtos=dbClient.fileDependencyDao().selectAll(session);
  assertThat(dtos).hasSize(1);
  FileDependencyDto dto=dtos.get(0);
  assertThat(dto.getId()).isNotNull();
  assertThat(dto.getFromComponentUuid()).isEqualTo("FILE_A");
  assertThat(dto.getFromParentUuid()).isEqualTo("DIRECTORY_A");
  assertThat(dto.getToComponentUuid()).isEqualTo("FILE_B");
  assertThat(dto.getToParentUuid()).isEqualTo("DIRECTORY_B");
  assertThat(dto.getRootProjectSnapshotId()).isEqualTo(PROJECT_SNAPSHOT_ID);
  assertThat(dto.getWeight()).isEqualTo(1);
  assertThat(dto.getCreatedAt()).isEqualTo(now);
}
