{
  File baseDir=temp.newFolder();
  File srcDir=new File(baseDir,"src");
  srcDir.mkdir();
  File xooFileInRootDir=new File(srcDir,"sample.xoo");
  FileUtils.write(xooFileInRootDir,"1\n2\n3\n4\n5\n6\n7\n8\n9\n10");
  File xooFileInAnotherDir=new File(srcDir,"package/sample.xoo");
  FileUtils.write(xooFileInAnotherDir,"1\n2\n3\n4\n5\n6\n7\n8\n9\n10");
  TaskResult result=tester.newTask().properties(ImmutableMap.<String,String>builder().put("sonar.task","scan").put("sonar.projectBaseDir",baseDir.getAbsolutePath()).put("sonar.projectKey","com.foo.project").put("sonar.projectName","Foo Project").put("sonar.projectVersion","1.0-SNAPSHOT").put("sonar.projectDescription","Description of Foo Project").put("sonar.sources","src").build()).start();
  assertThat(result.issuesFor(result.inputFile("src/sample.xoo"))).extracting("msg","line").containsOnly(tuple("Issue created using deprecated API",0),tuple("Issue created using deprecated API",1));
  assertThat(result.issuesFor(result.inputFile("src/package/sample.xoo"))).extracting("msg","line").containsOnly(tuple("Issue created using deprecated API",0),tuple("Issue created using deprecated API",1));
  assertThat(result.issuesFor(result.inputDir("src"))).extracting("msg","line").containsOnly(tuple("Issue created using deprecated API",0));
  assertThat(result.issuesFor(result.inputDir("src/package"))).extracting("msg","line").containsOnly(tuple("Issue created using deprecated API",0));
}
