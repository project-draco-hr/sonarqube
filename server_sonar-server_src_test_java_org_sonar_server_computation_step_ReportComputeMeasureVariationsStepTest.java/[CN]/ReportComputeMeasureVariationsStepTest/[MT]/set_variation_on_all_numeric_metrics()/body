{
  SnapshotDto period1ProjectSnapshot=newSnapshotForProject(PROJECT_DTO);
  dbClient.snapshotDao().insert(session,period1ProjectSnapshot);
  dbClient.measureDao().insert(session,newMeasureDto(ISSUES_METRIC.getId(),PROJECT_DTO.uuid(),period1ProjectSnapshot.getUuid(),60d),newMeasureDto(DEBT_METRIC.getId(),PROJECT_DTO.uuid(),period1ProjectSnapshot.getUuid(),10d),newMeasureDto(FILE_COMPLEXITY_METRIC.getId(),PROJECT_DTO.uuid(),period1ProjectSnapshot.getUuid(),2d),newMeasureDto(BUILD_BREAKER_METRIC.getId(),PROJECT_DTO.uuid(),period1ProjectSnapshot.getUuid(),1d));
  session.commit();
  periodsHolder.setPeriods(newPeriod(1,period1ProjectSnapshot));
  treeRootHolder.setRoot(PROJECT);
  addRawMeasure(PROJECT,ISSUES_METRIC,newMeasureBuilder().create(80,null));
  addRawMeasure(PROJECT,DEBT_METRIC,newMeasureBuilder().create(5L,null));
  addRawMeasure(PROJECT,FILE_COMPLEXITY_METRIC,newMeasureBuilder().create(3d,1,null));
  addRawMeasure(PROJECT,BUILD_BREAKER_METRIC,newMeasureBuilder().create(false,null));
  underTest.execute();
  assertThat(measureRepository.getRawMeasures(PROJECT).keys()).hasSize(4);
  assertThat(measureRepository.getRawMeasure(PROJECT,ISSUES_METRIC).get().getVariations().getVariation1()).isEqualTo(20d);
  assertThat(measureRepository.getRawMeasure(PROJECT,DEBT_METRIC).get().getVariations().getVariation1()).isEqualTo(-5d);
  assertThat(measureRepository.getRawMeasure(PROJECT,FILE_COMPLEXITY_METRIC).get().getVariations().getVariation1()).isEqualTo(1d);
  assertThat(measureRepository.getRawMeasure(PROJECT,BUILD_BREAKER_METRIC).get().getVariations().getVariation1()).isEqualTo(-1d);
}
