{
  SnapshotDto period1Snapshot=newAnalysis(PROJECT_DTO);
  dbClient.snapshotDao().insert(session,period1Snapshot);
  dbClient.measureDao().insert(session,newMeasureDto(ISSUES_METRIC.getId(),PROJECT_DTO.uuid(),period1Snapshot.getUuid(),60d));
  ComponentDto directoryDto=ComponentTesting.newDirectory(PROJECT_DTO,"dir");
  dbClient.componentDao().insert(session,directoryDto);
  dbClient.measureDao().insert(session,newMeasureDto(ISSUES_METRIC.getId(),directoryDto.uuid(),period1Snapshot.getUuid(),10d));
  session.commit();
  periodsHolder.setPeriods(newPeriod(1,period1Snapshot));
  Component directory=ReportComponent.builder(Component.Type.DIRECTORY,2).setUuid(directoryDto.uuid()).build();
  Component project=ReportComponent.builder(Component.Type.PROJECT,1).setUuid(PROJECT_DTO.uuid()).addChildren(directory).build();
  treeRootHolder.setRoot(project);
  addRawMeasure(project,ISSUES_METRIC,newMeasureBuilder().create(60,null));
  addRawMeasure(directory,ISSUES_METRIC,newMeasureBuilder().create(10,null));
  underTest.execute();
  assertThat(measureRepository.getRawMeasure(project,ISSUES_METRIC).get().getVariations().getVariation1()).isEqualTo(0d);
  assertThat(measureRepository.getRawMeasure(directory,ISSUES_METRIC).get().getVariations().getVariation1()).isEqualTo(0d);
}
