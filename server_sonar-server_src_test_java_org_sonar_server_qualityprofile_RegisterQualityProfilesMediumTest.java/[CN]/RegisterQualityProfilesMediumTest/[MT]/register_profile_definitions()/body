{
  tester=new ServerTester().withStartupTasks().addXoo().addComponents(XooRulesDefinition.class,XooProfileDefinition.class);
  tester.start();
  dbSession=dbClient().openSession(false);
  QualityProfileDao qualityProfileDao=dbClient().qualityProfileDao();
  assertThat(qualityProfileDao.selectAll(dbSession)).hasSize(1);
  QualityProfileDto profile=qualityProfileDao.selectByNameAndLanguage("Basic","xoo",dbSession);
  assertThat(profile).isNotNull();
  verifyDefaultProfile("xoo","Basic");
  ActiveRuleDao activeRuleDao=dbClient().activeRuleDao();
  assertThat(activeRuleDao.selectByProfileKey(dbSession,profile.getKey())).hasSize(2);
  RuleKey ruleKey=RuleKey.of("xoo","x1");
  ActiveRuleDto activeRule=activeRuleDao.selectByKey(dbSession,ActiveRuleKey.of(profile.getKey(),ruleKey)).get();
  assertThat(activeRule.getKey().qProfile()).isEqualTo(profile.getKey());
  assertThat(activeRule.getKey().ruleKey()).isEqualTo(ruleKey);
  assertThat(activeRule.getSeverityString()).isEqualTo(Severity.CRITICAL);
  Map<String,ActiveRuleParamDto> params=ActiveRuleParamDto.groupByKey(activeRuleDao.selectParamsByActiveRuleKey(dbSession,activeRule.getKey()));
  assertThat(params).hasSize(2);
  assertThat(params.get("acceptWhitespace").getValue()).isEqualTo("true");
  assertThat(params.get("max").getValue()).isEqualTo("10");
}
