{
  StringBuilder currentHtmlLine=new StringBuilder();
  List<String> decoratedHtmlLines=newArrayList();
  int currentLine=1;
  BufferedReader stringBuffer=null;
  try {
    stringBuffer=new BufferedReader(new StringReader(text));
    CharactersReader charsReader=new CharactersReader(stringBuffer);
    while (charsReader.readNextChar()) {
      if (shouldStop(currentLine,to)) {
        break;
      }
      if (shouldStartNewLine(charsReader)) {
        if (canAddLine(currentLine,from)) {
          decoratedHtmlLines.add(currentHtmlLine.toString());
        }
        currentLine++;
        currentHtmlLine=new StringBuilder();
      }
      addCharToCurrentLine(charsReader,currentHtmlLine,decorationDataHolder);
    }
    closeCurrentSyntaxTags(charsReader,currentHtmlLine);
    if (shouldStartNewLine(charsReader)) {
      addLine(decoratedHtmlLines,currentHtmlLine.toString(),currentLine,from,to);
      currentLine++;
      addLine(decoratedHtmlLines,"",currentLine,from,to);
    }
 else     if (currentHtmlLine.length() > 0) {
      addLine(decoratedHtmlLines,currentHtmlLine.toString(),currentLine,from,to);
    }
  }
 catch (  IOException exception) {
    String errorMsg="An exception occurred while highlighting the syntax of one of the project's files";
    LoggerFactory.getLogger(HtmlTextDecorator.class).error(errorMsg);
    throw new IllegalStateException(errorMsg,exception);
  }
 finally {
    Closeables.closeQuietly(stringBuffer);
  }
  return decoratedHtmlLines;
}
