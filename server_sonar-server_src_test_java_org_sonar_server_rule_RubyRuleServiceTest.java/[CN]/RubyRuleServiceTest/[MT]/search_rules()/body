{
  when(ruleService.search(any(RuleQuery.class),any(SearchOptions.class))).thenReturn(mock(SearchIdResult.class));
  HashMap<String,Object> params=newHashMap();
  params.put("searchQuery","Exception");
  params.put("key","S001");
  params.put("languages","xoo,js");
  params.put("repositories","checkstyle,pmd");
  params.put("severities","MAJOR,MINOR");
  params.put("statuses","BETA,READY");
  params.put("tags","tag1,tag2");
  params.put(Param.PAGE,"1");
  params.put("pageSize","40");
  service.find(params);
  verify(ruleService).search(ruleQueryCaptor.capture(),optionsCaptor.capture());
  assertThat(ruleQueryCaptor.getValue().getQueryText()).isEqualTo("Exception");
  assertThat(ruleQueryCaptor.getValue().getKey()).isEqualTo("S001");
  assertThat(ruleQueryCaptor.getValue().getLanguages()).containsOnly("xoo","js");
  assertThat(ruleQueryCaptor.getValue().getRepositories()).containsOnly("checkstyle","pmd");
  assertThat(ruleQueryCaptor.getValue().getRepositories()).containsOnly("checkstyle","pmd");
  assertThat(ruleQueryCaptor.getValue().getSeverities()).containsOnly("MAJOR","MINOR");
  assertThat(ruleQueryCaptor.getValue().getStatuses()).containsOnly(RuleStatus.BETA,RuleStatus.READY);
  assertThat(ruleQueryCaptor.getValue().getTags()).containsOnly("tag1","tag2");
  assertThat(ruleQueryCaptor.getValue().getQProfileKey()).isNull();
  assertThat(ruleQueryCaptor.getValue().getActivation()).isNull();
  assertThat(optionsCaptor.getValue().getLimit()).isEqualTo(40);
  assertThat(optionsCaptor.getValue().getOffset()).isEqualTo(0);
}
