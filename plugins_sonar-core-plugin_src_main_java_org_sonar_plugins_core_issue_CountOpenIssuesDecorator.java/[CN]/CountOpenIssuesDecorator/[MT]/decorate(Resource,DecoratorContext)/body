{
  Issuable issuable=perspectives.as(Issuable.class,resource);
  if (issuable != null) {
    Collection<Issue> issues=getOpenIssues(issuable.issues());
    boolean shouldSaveNewMetrics=shouldSaveNewMetrics(context);
    Multiset<RulePriority> severityBag=HashMultiset.create();
    Map<RulePriority,Multiset<Rule>> rulesPerSeverity=Maps.newHashMap();
    ListMultimap<RulePriority,Issue> issuesPerSeverity=ArrayListMultimap.create();
    int countUnassigned=0;
    int countOpen=0;
    int countReopened=0;
    int countConfirmed=0;
    for (    Issue issue : issues) {
      severityBag.add(RulePriority.valueOf(issue.severity()));
      Multiset<Rule> rulesBag=initRules(rulesPerSeverity,RulePriority.valueOf(issue.severity()));
      rulesBag.add(rulefinder.findByKey(issue.ruleKey().repository(),issue.ruleKey().rule()));
      issuesPerSeverity.put(RulePriority.valueOf(issue.severity()),issue);
      if (issue.assignee() == null) {
        countUnassigned++;
      }
      if (Issue.STATUS_OPEN.equals(issue.status())) {
        countOpen++;
      }
      if (Issue.STATUS_REOPENED.equals(issue.status())) {
        countReopened++;
      }
      if (Issue.STATUS_CONFIRMED.equals(issue.status())) {
        countConfirmed++;
      }
    }
    for (    RulePriority ruleSeverity : RulePriority.values()) {
      saveIssuesForSeverity(context,ruleSeverity,severityBag);
      saveIssuesPerRules(context,ruleSeverity,rulesPerSeverity);
      saveNewIssuesForSeverity(context,ruleSeverity,issuesPerSeverity,shouldSaveNewMetrics);
      saveNewIssuesPerRule(context,ruleSeverity,issues,shouldSaveNewMetrics);
    }
    saveTotalIssues(context,issues);
    saveNewIssues(context,issues,shouldSaveNewMetrics);
    saveMeasure(context,CoreMetrics.UNASSIGNED_ISSUES,countUnassigned);
    saveMeasure(context,CoreMetrics.OPEN_ISSUES,countOpen);
    saveMeasure(context,CoreMetrics.REOPENED_ISSUES,countReopened);
    saveMeasure(context,CoreMetrics.CONFIRMED_ISSUES,countConfirmed);
  }
}
