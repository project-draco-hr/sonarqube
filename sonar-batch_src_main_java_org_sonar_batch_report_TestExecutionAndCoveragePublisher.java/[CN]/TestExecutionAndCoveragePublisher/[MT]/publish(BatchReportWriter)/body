{
  for (  final BatchResource resource : resourceCache.all()) {
    if (!resource.isFile()) {
      continue;
    }
    DefaultInputFile inputFile=(DefaultInputFile)resource.inputPath();
    if (inputFile.type() != Type.TEST) {
      continue;
    }
    final MutableTestPlan testPlan=testPlanBuilder.get(MutableTestPlan.class,inputFile.key());
    if (testPlan == null || Iterables.isEmpty(testPlan.testCases())) {
      continue;
    }
    final Set<String> testNamesWithCoverage=new HashSet<>();
    writer.writeTests(resource.batchId(),Iterables.transform(testPlan.testCases(),new Function<MutableTestCase,BatchReport.Test>(){
      private BatchReport.Test.Builder builder=BatchReport.Test.newBuilder();
      @Override public Test apply(      MutableTestCase testCase){
        builder.clear();
        builder.setName(testCase.name());
        if (testCase.doesCover()) {
          testNamesWithCoverage.add(testCase.name());
        }
        Long durationInMs=testCase.durationInMs();
        if (durationInMs != null) {
          builder.setDurationInMs(durationInMs);
        }
        String msg=testCase.message();
        if (msg != null) {
          builder.setMsg(msg);
        }
        String stack=testCase.stackTrace();
        if (stack != null) {
          builder.setStacktrace(stack);
        }
        TestCase.Status status=testCase.status();
        if (status != null) {
          builder.setStatus(TestStatus.valueOf(status.name()));
        }
        return builder.build();
      }
    }
));
    writer.writeCoverageDetails(resource.batchId(),Iterables.transform(testNamesWithCoverage,new FunctionImplementation(testPlan)));
  }
}
