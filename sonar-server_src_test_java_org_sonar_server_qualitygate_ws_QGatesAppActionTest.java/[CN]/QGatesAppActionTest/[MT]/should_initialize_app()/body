{
  doAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[1];
    }
  }
).when(i18n).message(any(Locale.class),any(String.class),any(String.class));
  Metric metric=mock(Metric.class);
  when(metric.getId()).thenReturn(42);
  when(metric.getKey()).thenReturn("metric");
  when(metric.getName()).thenReturn("Metric");
  when(metric.getType()).thenReturn(ValueType.BOOL);
  when(metric.getDomain()).thenReturn("General");
  when(metric.isHidden()).thenReturn(false);
  when(qGates.gateMetrics()).thenReturn(ImmutableList.of(metric));
  String json=tester.newGetRequest("api/qualitygates","app").execute().outputAsString();
  Map responseJson=(Map)JSONValue.parse(json);
  assertThat((Boolean)responseJson.get("edit")).isFalse();
  Collection<Map> periods=(Collection<Map>)responseJson.get("periods");
  assertThat(periods).hasSize(5);
  Collection<Map> metrics=(Collection<Map>)responseJson.get("metrics");
  assertThat(metrics).hasSize(1);
  Map metricMap=metrics.iterator().next();
  assertThat(metricMap.get("id").toString()).isEqualTo("42");
  assertThat(metricMap.get("key")).isEqualTo("metric");
  assertThat(metricMap.get("name")).isEqualTo("Metric");
  assertThat(metricMap.get("type")).isEqualTo("BOOL");
  assertThat(metricMap.get("domain")).isEqualTo("General");
  assertThat(metricMap.get("hidden")).isEqualTo(false);
}
