{
  return new Iterable<M>(){
    @Override public Iterator<M> iterator(){
      try {
        return new Iterator<M>(){
          final InputStream inputStream=new BufferedInputStream(new FileInputStream(file));
          private M currentMessage;
          @Override public boolean hasNext(){
            if (currentMessage == null) {
              try {
                currentMessage=parser.parseDelimitedFrom(inputStream);
                if (currentMessage == null) {
                  inputStream.close();
                }
              }
 catch (              InvalidProtocolBufferException e) {
                throw new IllegalStateException("Failed to read input stream",e);
              }
catch (              IOException e) {
                throw new IllegalStateException("Failed to close input stream",e);
              }
            }
            return currentMessage != null;
          }
          @Override public M next(){
            if (!hasNext()) {
              throw new NoSuchElementException();
            }
            M messageToReturn=currentMessage;
            currentMessage=null;
            return messageToReturn;
          }
          @Override public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
 catch (      FileNotFoundException e) {
        throw new IllegalStateException("Unable to find file " + file,e);
      }
    }
  }
;
}
