{
  Set<String> existingSystemTags=Sets.newHashSet();
  List<RuleTagDto> newTags=Lists.newArrayList();
  Iterator<RuleTagDto> tagsIterator=existingRules.tags(persistedRule.getId()).iterator();
  while (tagsIterator.hasNext()) {
    RuleTagDto existingTag=tagsIterator.next();
    String existingTagValue=existingTag.getTag();
    if (existingTag.getType() == RuleTagType.SYSTEM) {
      existingSystemTags.add(existingTagValue);
      if (!rule.getTags().contains(existingTagValue)) {
        ruleDao.deleteTag(existingTag,sqlSession);
        tagsIterator.remove();
      }
    }
 else {
      if (rule.getTags().contains(existingTagValue)) {
        ruleDao.deleteTag(existingTag,sqlSession);
        tagsIterator.remove();
        existingSystemTags.add(existingTagValue);
        RuleTagDto newTag=dtoFrom(existingTagValue,persistedRule.getId());
        ruleDao.insert(newTag,sqlSession);
        newTags.add(newTag);
      }
    }
  }
  for (  String newTag : rule.getTags()) {
    if (!existingSystemTags.contains(newTag)) {
      RuleTagDto newTagDto=dtoFrom(newTag,persistedRule.getId());
      ruleDao.insert(newTagDto,sqlSession);
      newTags.add(newTagDto);
    }
  }
  existingRules.tags.putAll(persistedRule.getId(),newTags);
}
