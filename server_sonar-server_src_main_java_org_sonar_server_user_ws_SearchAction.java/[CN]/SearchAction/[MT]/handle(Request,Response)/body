{
  SearchOptions options=new SearchOptions().setPage(request.mandatoryParamAsInt(Param.PAGE),request.mandatoryParamAsInt(Param.PAGE_SIZE));
  List<String> fields=request.paramAsStrings(Param.FIELDS);
  SearchResult<UserDoc> result=userIndex.search(request.param(Param.TEXT_QUERY),options);
  DbSession dbSession=dbClient.openSession(false);
  try {
    List<String> logins=Lists.transform(result.getDocs(),UserDocToLogin.INSTANCE);
    Multimap<String,String> groupsByLogin=dbClient.groupMembershipDao().selectGroupsByLogins(dbSession,logins);
    Map<String,Integer> tokenCountsByLogin=dbClient.userTokenDao().countTokensByLogins(dbSession,logins);
    JsonWriter json=response.newJsonWriter().beginObject();
    options.writeJson(json,result.getTotal());
    List<UserDto> userDtos=dbClient.userDao().selectByOrderedLogins(dbSession,logins);
    writeUsers(json,userDtos,groupsByLogin,tokenCountsByLogin,fields);
    json.endObject().close();
  }
  finally {
    dbClient.closeSession(dbSession);
  }
}
