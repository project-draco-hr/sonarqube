{
  LogFactory.useSlf4jLogging();
  Configuration conf=new Configuration();
  conf.setEnvironment(new Environment("production",createTransactionFactory(),database.getDataSource()));
  conf.setDatabaseId(database.getDialect().getId());
  conf.setUseGeneratedKeys(true);
  conf.setLazyLoadingEnabled(false);
  conf.setJdbcTypeForNull(JdbcType.NULL);
  conf.getVariables().setProperty("_true",database.getDialect().getTrueSqlValue());
  conf.getVariables().setProperty("_false",database.getDialect().getFalseSqlValue());
  loadAlias(conf,"ActiveDashboard",ActiveDashboardDto.class);
  loadAlias(conf,"Author",AuthorDto.class);
  loadAlias(conf,"Dashboard",DashboardDto.class);
  loadAlias(conf,"Dependency",DependencyDto.class);
  loadAlias(conf,"DuplicationUnit",DuplicationUnitDto.class);
  loadAlias(conf,"Graph",GraphDto.class);
  loadAlias(conf,"Group",GroupDto.class);
  loadAlias(conf,"GroupRole",GroupRoleDto.class);
  loadAlias(conf,"LoadedTemplate",LoadedTemplateDto.class);
  loadAlias(conf,"MeasureFilter",MeasureFilterDto.class);
  loadAlias(conf,"Property",PropertyDto.class);
  loadAlias(conf,"PurgeableSnapshot",PurgeableSnapshotDto.class);
  loadAlias(conf,"Resource",ResourceDto.class);
  loadAlias(conf,"ResourceIndex",ResourceIndexDto.class);
  loadAlias(conf,"ResourceSnapshot",ResourceSnapshotDto.class);
  loadAlias(conf,"Rule",RuleDto.class);
  loadAlias(conf,"Snapshot",SnapshotDto.class);
  loadAlias(conf,"Semaphore",SemaphoreDto.class);
  loadAlias(conf,"SchemaMigration",SchemaMigrationDto.class);
  loadAlias(conf,"User",UserDto.class);
  loadAlias(conf,"UserRole",UserRoleDto.class);
  loadAlias(conf,"Widget",WidgetDto.class);
  loadAlias(conf,"WidgetProperty",WidgetPropertyDto.class);
  loadAlias(conf,"MeasureModel",MeasureModel.class);
  loadAlias(conf,"MeasureData",MeasureData.class);
  loadAlias(conf,"Issue",IssueDto.class);
  loadAlias(conf,"IssueChange",IssueChangeDto.class);
  loadAlias(conf,"IssueFilter",IssueFilterDto.class);
  loadAlias(conf,"IssueFilterFavourite",IssueFilterFavouriteDto.class);
  loadAlias(conf,"SnapshotData",SnapshotDataDto.class);
  loadAlias(conf,"ActionPlanIssue",ActionPlanDto.class);
  loadAlias(conf,"ActionPlanStats",ActionPlanStatsDto.class);
  loadAlias(conf,"PermissionTemplate",PermissionTemplateDto.class);
  loadAlias(conf,"PermissionTemplateUser",PermissionTemplateUserDto.class);
  loadAlias(conf,"PermissionTemplateGroup",PermissionTemplateGroupDto.class);
  loadMapper(conf,"org.sonar.core.user.AuthorizationMapper");
  loadMapper(conf,ResourceMapper.class);
  Class<?>[] mappers={ActiveDashboardMapper.class,AuthorMapper.class,DashboardMapper.class,DependencyMapper.class,DuplicationMapper.class,GraphDtoMapper.class,IssueMapper.class,IssueStatsMapper.class,IssueChangeMapper.class,IssueFilterMapper.class,IssueFilterFavouriteMapper.class,LoadedTemplateMapper.class,MeasureFilterMapper.class,PermissionTemplateMapper.class,PropertiesMapper.class,PurgeMapper.class,ResourceKeyUpdaterMapper.class,ResourceIndexerMapper.class,ResourceSnapshotMapper.class,RoleMapper.class,RuleMapper.class,SchemaMigrationMapper.class,SemaphoreMapper.class,UserMapper.class,WidgetMapper.class,WidgetPropertyMapper.class,MeasureMapper.class,SnapshotDataMapper.class,SnapshotSourceMapper.class,ActionPlanMapper.class,ActionPlanStatsMapper.class};
  loadMappers(conf,mappers);
  configureLogback(mappers);
  sessionFactory=new SqlSessionFactoryBuilder().build(conf);
  return this;
}
