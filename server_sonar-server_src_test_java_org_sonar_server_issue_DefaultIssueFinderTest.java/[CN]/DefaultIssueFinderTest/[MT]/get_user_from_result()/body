{
  when(userFinder.findByLogins(anyListOf(String.class))).thenReturn(Lists.<User>newArrayList(new DefaultUser().setLogin("perceval").setName("Perceval"),new DefaultUser().setLogin("arthur").setName("Roi Arthur")));
  IssueQuery query=IssueQuery.builder().build();
  IssueDto issue1=new IssueDto().setId(1L).setRuleId(50).setComponentId(123l).setRootComponentId(100l).setKee("ABC").setAssignee("perceval").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  IssueDto issue2=new IssueDto().setId(2L).setRuleId(50).setComponentId(123l).setRootComponentId(100l).setKee("DEF").setReporter("arthur").setRuleKey_unit_test_only("squid","AvoidCycle").setStatus("OPEN").setResolution("OPEN");
  List<IssueDto> dtoList=newArrayList(issue1,issue2);
  when(issueDao.selectByIds(anyCollection(),any(SqlSession.class))).thenReturn(dtoList);
  IssueQueryResult results=finder.find(query);
  assertThat(results.issues()).hasSize(2);
  assertThat(results.users()).hasSize(2);
  assertThat(results.user("perceval").name()).isEqualTo("Perceval");
  assertThat(results.user("arthur").name()).isEqualTo("Roi Arthur");
}
