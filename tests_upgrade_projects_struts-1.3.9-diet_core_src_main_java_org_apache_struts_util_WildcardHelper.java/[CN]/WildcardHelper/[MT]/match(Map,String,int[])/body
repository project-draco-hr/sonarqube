{
  if (map == null) {
    throw new NullPointerException("No map provided");
  }
  if (data == null) {
    throw new NullPointerException("No data provided");
  }
  if (expr == null) {
    throw new NullPointerException("No pattern expression provided");
  }
  char[] buff=data.toCharArray();
  char[] rslt=new char[expr.length + buff.length];
  int charpos=0;
  int exprpos=0;
  int buffpos=0;
  int rsltpos=0;
  int offset=-1;
  int mcount=0;
  map.put(Integer.toString(mcount),data);
  boolean matchBegin=false;
  if (expr[charpos] == MATCH_BEGIN) {
    matchBegin=true;
    exprpos=++charpos;
  }
  while (expr[charpos] >= 0) {
    charpos++;
  }
  int exprchr=expr[charpos];
  while (true) {
    if (matchBegin) {
      if (!matchArray(expr,exprpos,charpos,buff,buffpos)) {
        return (false);
      }
      matchBegin=false;
    }
 else {
      offset=indexOfArray(expr,exprpos,charpos,buff,buffpos);
      if (offset < 0) {
        return (false);
      }
    }
    if (matchBegin) {
      if (offset != 0) {
        return (false);
      }
      matchBegin=false;
    }
    buffpos+=(charpos - exprpos);
    if (exprchr == MATCH_END) {
      if (rsltpos > 0) {
        map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));
      }
      return (true);
    }
 else     if (exprchr == MATCH_THEEND) {
      if (rsltpos > 0) {
        map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));
      }
      return (buffpos == buff.length);
    }
    exprpos=++charpos;
    while (expr[charpos] >= 0) {
      charpos++;
    }
    int prevchr=exprchr;
    exprchr=expr[charpos];
    offset=(prevchr == MATCH_FILE) ? indexOfArray(expr,exprpos,charpos,buff,buffpos) : lastIndexOfArray(expr,exprpos,charpos,buff,buffpos);
    if (offset < 0) {
      return (false);
    }
    if (prevchr == MATCH_PATH) {
      while (buffpos < offset) {
        rslt[rsltpos++]=buff[buffpos++];
      }
    }
 else {
      while (buffpos < offset) {
        if (buff[buffpos] == '/') {
          return (false);
        }
        rslt[rsltpos++]=buff[buffpos++];
      }
    }
    map.put(Integer.toString(++mcount),new String(rslt,0,rsltpos));
    rsltpos=0;
  }
}
