{
  userSessionRule.login("david").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);
  UserDto user=new UserDto().setLogin("david").setName("David").setEmail("dav@id.com").setCreatedAt(System.currentTimeMillis()).setUpdatedAt(System.currentTimeMillis());
  db.userDao().insert(dbSession,user);
  RuleDto rule=db.ruleDao().getByKey(dbSession,RuleTesting.XOO_X1);
  dbSession.commit();
  tester.get(ActivityService.class).save(ActiveRuleChange.createFor(ActiveRuleChange.Type.ACTIVATED,ActiveRuleKey.of(XOO_P1_KEY,RuleTesting.XOO_X1)).setSeverity(Severity.MAJOR).setParameter("max","10").toActivity());
  Result<QProfileActivity> activities=service.searchActivities(new QProfileActivityQuery(),new SearchOptions());
  assertThat(activities.getHits()).hasSize(1);
  QProfileActivity activity=activities.getHits().get(0);
  assertThat(activity.getType()).isEqualTo(Activity.Type.QPROFILE.name());
  assertThat(activity.getAction()).isEqualTo(ActiveRuleChange.Type.ACTIVATED.name());
  assertThat(activity.ruleKey()).isEqualTo(RuleTesting.XOO_X1);
  assertThat(activity.profileKey()).isEqualTo(XOO_P1_KEY);
  assertThat(activity.severity()).isEqualTo(Severity.MAJOR);
  assertThat(activity.ruleName()).isEqualTo(rule.getName());
  assertThat(activity.getLogin()).isEqualTo("david");
  assertThat(activity.authorName()).isEqualTo("David");
  assertThat(activity.parameters()).hasSize(1);
  assertThat(activity.parameters().get("max")).isEqualTo("10");
}
