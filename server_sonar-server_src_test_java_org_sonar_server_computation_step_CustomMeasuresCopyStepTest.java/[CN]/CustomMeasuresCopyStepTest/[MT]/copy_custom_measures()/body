{
  dbTester.prepareDbUnit(getClass(),"custom-measures.xml");
  MetricImpl floatMetric=new MetricImpl(10,"float_metric","Float Metric",Metric.MetricType.FLOAT);
  when(metricRepository.getById(floatMetric.getId())).thenReturn(floatMetric);
  MetricImpl stringMetric=new MetricImpl(11,"string_metric","String Metric",Metric.MetricType.STRING);
  when(metricRepository.getById(stringMetric.getId())).thenReturn(stringMetric);
  Component file1=DumbComponent.builder(Component.Type.FILE,1).setUuid("FILE1").build();
  Component file2=DumbComponent.builder(Component.Type.FILE,2).setUuid("FILE2").build();
  Component project=DumbComponent.builder(Component.Type.PROJECT,3).setUuid("PROJECT1").addChildren(file1,file2).build();
  treeRootHolder.setRoot(project);
  underTest.execute();
  ArgumentCaptor<Measure> measureCaptor=ArgumentCaptor.forClass(Measure.class);
  verify(measureRepository).add(eq(file1),eq(floatMetric),measureCaptor.capture());
  Measure fileMeasure=measureCaptor.getValue();
  assertThat(fileMeasure.getDoubleValue()).isEqualTo(3.1d);
  verify(measureRepository).add(eq(project),eq(stringMetric),measureCaptor.capture());
  Measure projectMeasure=measureCaptor.getValue();
  assertThat(projectMeasure.getStringValue()).isEqualTo("good");
  verifyNoMoreInteractions(measureRepository);
}
