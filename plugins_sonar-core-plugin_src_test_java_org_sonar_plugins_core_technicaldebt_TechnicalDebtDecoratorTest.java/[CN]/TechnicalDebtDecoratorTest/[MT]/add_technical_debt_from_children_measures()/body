{
  WorkDayDuration technicalDebt1=mock(WorkDayDuration.class);
  when(converter.toDays(technicalDebt1)).thenReturn(1.0);
  Issue issue1=createIssue("rule1","repo1").setTechnicalDebt(technicalDebt1);
  Issue issue2=createIssue("rule1","repo1").setTechnicalDebt(technicalDebt1);
  when(issuable.issues()).thenReturn(newArrayList(issue1,issue2));
  Characteristic rootCharacteristic=new Characteristic().setKey("rootCharacteristic");
  Characteristic characteristic=new Characteristic().setKey("characteristic").setParent(rootCharacteristic);
  RuleKey ruleKey1=RuleKey.of("repo1","rule1");
  Requirement requirement=new Requirement().setRuleKey(ruleKey1).setCharacteristic(characteristic);
  when(technicalDebtModel.requirementsByRule(ruleKey1)).thenReturn(requirement);
  when(technicalDebtModel.requirements()).thenReturn(newArrayList(requirement));
  Measure measure=new Measure().setRequirement(requirement).setValue(5.0);
  when(context.getChildrenMeasures(any(MeasuresFilter.class))).thenReturn(newArrayList(measure));
  decorator.decorate(resource,context);
  verify(context).saveMeasure(argThat(new IsCharacteristicMeasure(CoreMetrics.TECHNICAL_DEBT,7.0)));
  verify(context).saveMeasure(argThat(new IsCharacteristicMeasure(CoreMetrics.TECHNICAL_DEBT,requirement,7.0)));
}
