{
  Issue issue1=createIssue("rule1","repo1").setDebt(ONE_DAY_IN_MINUTES);
  Issue issue2=createIssue("rule1","repo1").setDebt(ONE_DAY_IN_MINUTES);
  when(issuable.issues()).thenReturn(newArrayList(issue1,issue2));
  DefaultCharacteristic rootCharacteristic=new DefaultCharacteristic().setKey("rootCharacteristic");
  DefaultCharacteristic characteristic=new DefaultCharacteristic().setKey("characteristic").setParent(rootCharacteristic);
  RuleKey ruleKey1=RuleKey.of("repo1","rule1");
  DefaultRequirement requirement=new DefaultRequirement().setRuleKey(ruleKey1).setCharacteristic(characteristic);
  when(defaultTechnicalDebtModel.requirementsByRule(ruleKey1)).thenReturn(requirement);
  doReturn(newArrayList(requirement)).when(defaultTechnicalDebtModel).requirements();
  Measure measure=new Measure().setRequirement(requirement).setValue(5d * ONE_DAY_IN_MINUTES);
  when(context.getChildrenMeasures(any(MeasuresFilter.class))).thenReturn(newArrayList(measure));
  decorator.decorate(resource,context);
  verify(context).saveMeasure(CoreMetrics.TECHNICAL_DEBT,7d * ONE_DAY_IN_MINUTES);
  verify(context).saveMeasure(argThat(new IsCharacteristicMeasure(CoreMetrics.TECHNICAL_DEBT,requirement,7d * ONE_DAY_IN_MINUTES)));
}
