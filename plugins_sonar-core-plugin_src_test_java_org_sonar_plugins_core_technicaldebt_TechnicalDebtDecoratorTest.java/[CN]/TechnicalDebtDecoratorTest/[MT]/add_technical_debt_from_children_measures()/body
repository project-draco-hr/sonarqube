{
  Issue issue1=createIssue("rule1","repo1").setDebt(Duration.create(ONE_DAY_IN_MINUTES));
  Issue issue2=createIssue("rule1","repo1").setDebt(Duration.create(ONE_DAY_IN_MINUTES));
  when(issuable.issues()).thenReturn(newArrayList(issue1,issue2));
  when(defaultTechnicalDebtModel.characteristicByKey("MEMORY_EFFICIENCY")).thenReturn(new DefaultCharacteristic().setKey("MEMORY_EFFICIENCY").setParent(new DefaultCharacteristic().setKey("EFFICIENCY")));
  org.sonar.api.rules.Rule oldRule=org.sonar.api.rules.Rule.create(ruleKey1.repository(),ruleKey1.rule());
  Measure measure=new RuleMeasure(CoreMetrics.TECHNICAL_DEBT,oldRule,null,null).setValue(5d * ONE_DAY_IN_MINUTES);
  when(context.getChildrenMeasures(any(MeasuresFilter.class))).thenReturn(newArrayList(measure));
  decorator.decorate(resource,context);
  verify(context).saveMeasure(CoreMetrics.TECHNICAL_DEBT,7d * ONE_DAY_IN_MINUTES);
  verify(context).saveMeasure(argThat(new IsRuleMeasure(CoreMetrics.TECHNICAL_DEBT,ruleKey1,7d * ONE_DAY_IN_MINUTES)));
}
