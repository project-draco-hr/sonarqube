{
  Long technicalDebt1=ONE_DAY_IN_MINUTES;
  Long technicalDebt2=2 * ONE_DAY_IN_MINUTES;
  Issue issue1=createIssue("rule1","repo1").setDebt(Duration.create(technicalDebt1));
  Issue issue2=createIssue("rule1","repo1").setDebt(Duration.create(technicalDebt1));
  Issue issue3=createIssue("rule2","repo2").setDebt(Duration.create(technicalDebt2));
  Issue issue4=createIssue("rule2","repo2").setDebt(Duration.create(technicalDebt2));
  when(issuable.issues()).thenReturn(newArrayList(issue1,issue2,issue3,issue4));
  when(defaultTechnicalDebtModel.characteristicByKey("MEMORY_EFFICIENCY")).thenReturn(new DefaultCharacteristic().setKey("MEMORY_EFFICIENCY").setParent(new DefaultCharacteristic().setKey("EFFICIENCY")),new DefaultCharacteristic().setKey("MODULARITY").setParent(new DefaultCharacteristic().setKey("REUSABILITY")));
  decorator.decorate(resource,context);
  verify(context).saveMeasure(CoreMetrics.TECHNICAL_DEBT,6d * ONE_DAY_IN_MINUTES);
  verify(context).saveMeasure(argThat(new IsRuleMeasure(CoreMetrics.TECHNICAL_DEBT,ruleKey1,2d * ONE_DAY_IN_MINUTES)));
  verify(context).saveMeasure(argThat(new IsRuleMeasure(CoreMetrics.TECHNICAL_DEBT,ruleKey2,4d * ONE_DAY_IN_MINUTES)));
}
