{
  Map<String,QProfile> profilesByKey=Maps.uniqueIndex(profiles,new NonNullInputFunction<QProfile,String>(){
    @Override protected String doApply(    QProfile input){
      return input.key();
    }
  }
);
  Map<String,Long> activeRuleCountByKey=profileLoader.countAllActiveRules();
  Map<String,Long> projectCountByKey=qualityProfileDao.countProjectsByProfileKey();
  WsSearchResponse.Builder response=WsSearchResponse.newBuilder();
  QualityProfile.Builder profileBuilder=QualityProfile.newBuilder();
  for (  QProfile profile : profiles) {
    if (languages.get(profile.language()) == null) {
      continue;
    }
    String key=profile.key();
    Long activeRuleCount=activeRuleCountByKey.containsKey(key) ? activeRuleCountByKey.get(key) : 0L;
    Long projectCount=projectCountByKey.containsKey(key) ? projectCountByKey.get(key) : 0L;
    profileBuilder.clear();
    if (shouldSetValue(FIELD_KEY,profile.key(),fields)) {
      profileBuilder.setKey(profile.key());
    }
    if (shouldSetValue(FIELD_NAME,profile.name(),fields)) {
      profileBuilder.setName(profile.name());
    }
    if (shouldSetValue(FIELD_ACTIVE_RULE_COUNT,activeRuleCount,fields)) {
      profileBuilder.setActiveRuleCount(activeRuleCount);
    }
    if (!profile.isDefault() && shouldSetValue(FIELD_PROJECT_COUNT,projectCount,fields)) {
      profileBuilder.setProjectCount(projectCount);
    }
    writeLanguageFields(profileBuilder,profile,fields);
    writeParentFields(profileBuilder,profile,fields,profilesByKey);
    if (fieldIsNeeded(FIELD_IS_INHERITED,fields)) {
      profileBuilder.setIsInherited(profile.isInherited());
    }
    if (fieldIsNeeded(FIELD_IS_DEFAULT,fields)) {
      profileBuilder.setIsDefault(profile.isDefault());
    }
    response.addProfiles(profileBuilder);
  }
  return response.build();
}
