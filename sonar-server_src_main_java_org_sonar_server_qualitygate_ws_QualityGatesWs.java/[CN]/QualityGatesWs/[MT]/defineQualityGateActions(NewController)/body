{
  controller.newAction("create").setDescription("Create a quality gate, given its name.").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      create(request,response);
    }
  }
).newParam(PARAM_NAME).setDescription("The name of the quality gate to create.");
  controller.newAction("set_as_default").setDescription("Select the default quality gate.").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      setDefault(request,response);
    }
  }
).newParam(PARAM_ID).setDescription("The ID of the quality gate to use as default.");
  controller.newAction("unset_default").setDescription("Unselect the default quality gate.").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      unsetDefault(response);
    }
  }
);
  NewAction rename=controller.newAction("rename").setDescription("Rename a quality gate, given its id and new name.").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      rename(request,response);
    }
  }
);
  rename.newParam(PARAM_ID).setDescription("The ID of the quality gate to rename.");
  rename.newParam(PARAM_NAME).setDescription("The new name for the quality gate.");
  controller.newAction("list").setDescription("List all quality gates.").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      list(request,response);
    }
  }
);
  controller.newAction("show").setDescription("Show a quality gate in details, with associated conditions.").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      show(request,response);
    }
  }
).newParam(PARAM_ID).setDescription("The ID of the quality gate.");
  controller.newAction("metrics").setDescription("List metrics available for definition of conditions.").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      listMetrics(request,response);
    }
  }
);
  controller.newAction("destroy").setDescription("Destroy a quality gate, given its id.").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      destroy(request,response);
    }
  }
).newParam(PARAM_ID).setDescription("The numerical ID of the quality gate to destroy.");
  NewAction search=controller.newAction("search").setDescription("Search projects associated (or not) with a quality gate.").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      search(request,response);
    }
  }
);
  search.newParam(PARAM_GATE_ID).setDescription("The numerical ID of the quality gate.");
  search.newParam(PARAM_SELECTED).setDescription("Optionally, to search for projects associated (selected=selected) or not (selected=deselected).");
  search.newParam(PARAM_QUERY).setDescription("Optionally, part of the name of the projects to search for.");
  search.newParam(PARAM_PAGE);
  search.newParam(PARAM_PAGE_SIZE);
  NewAction select=controller.newAction("select").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      select(request,response);
    }
  }
);
  select.newParam(PARAM_GATE_ID);
  select.newParam(PARAM_PROJECT_ID);
  NewAction deselect=controller.newAction("deselect").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      deselect(request,response);
    }
  }
);
  deselect.newParam(PARAM_GATE_ID);
  deselect.newParam(PARAM_PROJECT_ID);
}
