{
  ComponentDto project=new ComponentDto().setKey("MyProject");
  db.componentDao().insert(session,project);
  tester.get(PermissionFacade.class).insertGroupPermission(project.getId(),DefaultGroups.ANYONE,UserRole.USER,session);
  db.issueAuthorizationDao().synchronizeAfter(session,new Date(0));
  ComponentDto resource=new ComponentDto().setProjectId_unit_test_only(project.getId()).setKey("MyComponent");
  db.componentDao().insert(session,resource);
  db.snapshotDao().insert(session,SnapshotTesting.createForComponent(resource,project));
  RuleDto rule=RuleTesting.newXooX1();
  tester.get(RuleDao.class).insert(session,rule);
  List<String> issueKeys=newArrayList();
  for (int i=0; i < 2001; i++) {
    IssueDto issue=IssueTesting.newDto(rule,resource,project);
    tester.get(IssueDao.class).insert(session,issue);
    issueKeys.add(issue.getKey());
  }
  session.commit();
  session.clearCache();
  tester.get(BackendCleanup.class).clearIndex(IndexDefinition.ISSUES);
  MockUserSession.set().setLogin("john").setGlobalPermissions(GlobalPermissions.SCAN_EXECUTION);
  WsTester.TestRequest request=wsTester.newGetRequest(BatchWs.API_ENDPOINT,UploadReportAction.UPLOAD_REPORT_ACTION);
  request.setParam(UploadReportAction.PARAM_PROJECT,project.key());
  request.execute();
  session.commit();
  session.clearCache();
  assertThat(tester.get(IssueIndex.class).search(IssueQuery.builder().build(),new QueryContext()).getTotal()).isEqualTo(2001);
}
