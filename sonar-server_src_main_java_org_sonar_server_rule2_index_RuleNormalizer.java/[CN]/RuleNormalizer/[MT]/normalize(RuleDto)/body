{
  Map<String,Object> update=new HashMap<String,Object>();
  update.put(RuleField.KEY.key(),rule.getKey().toString());
  update.put(RuleField.REPOSITORY.key(),rule.getRepositoryKey());
  update.put(RuleField.NAME.key(),rule.getName());
  update.put(RuleField.CREATED_AT.key(),rule.getCreatedAt());
  update.put(RuleField.UPDATED_AT.key(),rule.getUpdatedAt());
  update.put(RuleField.HTML_DESCRIPTION.key(),rule.getDescription());
  update.put(RuleField.SEVERITY.key(),rule.getSeverityString());
  update.put(RuleField.STATUS.key(),rule.getStatus());
  update.put(RuleField.LANGUAGE.key(),rule.getLanguage());
  update.put(RuleField.INTERNAL_KEY.key(),rule.getConfigKey());
  update.put(RuleField.TEMPLATE.key(),rule.getCardinality() == Cardinality.MULTIPLE);
  update.put(RuleField.NOTE.key(),rule.getNoteData());
  update.put(RuleField.NOTE_LOGIN.key(),rule.getNoteUserLogin());
  update.put(RuleField.NOTE_CREATED_AT.key(),rule.getNoteCreatedAt());
  update.put(RuleField.NOTE_UPDATED_AT.key(),rule.getNoteUpdatedAt());
  CharacteristicDto characteristic=null;
  if (rule.getDefaultSubCharacteristicId() != null) {
    characteristic=db.debtCharacteristicDao().selectById(rule.getDefaultSubCharacteristicId());
  }
  if (rule.getSubCharacteristicId() != null) {
    characteristic=db.debtCharacteristicDao().selectById(rule.getSubCharacteristicId());
  }
  if (characteristic != null) {
    update.put(RuleField.SUB_CHARACTERISTIC.key(),characteristic.getKey());
    if (characteristic.getParentId() != null) {
      update.put(RuleField.CHARACTERISTIC.key(),db.debtCharacteristicDao().selectById(characteristic.getParentId()).getKey());
    }
  }
  String dType=null, dCoefficient=null, dOffset=null;
  if (rule.getDefaultRemediationFunction() != null) {
    dType=rule.getDefaultRemediationFunction();
    dCoefficient=rule.getDefaultRemediationCoefficient();
    dOffset=rule.getDefaultRemediationOffset();
  }
  if (rule.getRemediationFunction() != null) {
    dType=rule.getRemediationFunction();
    dCoefficient=rule.getRemediationCoefficient();
    dOffset=rule.getRemediationOffset();
  }
  update.put(RuleField.DEBT_FUNCTION_TYPE.key(),dType);
  update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.key(),dCoefficient);
  update.put(RuleField.DEBT_FUNCTION_OFFSET.key(),dOffset);
  update.put(RuleField.TAGS.key(),rule.getTags());
  update.put(RuleField.SYSTEM_TAGS.key(),rule.getSystemTags());
  update.put(RuleField._TAGS.key(),Sets.union(rule.getSystemTags(),rule.getTags()));
  Map<String,Object> upsert=new HashMap<String,Object>(update);
  upsert.put(RuleField.KEY.key(),rule.getKey().toString());
  upsert.put(RuleField.PARAMS.key(),new ArrayList<String>());
  return new UpdateRequest().doc(update).upsert(upsert);
}
