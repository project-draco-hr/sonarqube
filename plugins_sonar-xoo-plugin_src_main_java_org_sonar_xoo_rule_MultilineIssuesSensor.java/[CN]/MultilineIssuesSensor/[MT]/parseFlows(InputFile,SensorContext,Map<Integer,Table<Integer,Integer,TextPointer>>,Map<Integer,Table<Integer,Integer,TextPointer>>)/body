{
  int currentLine=0;
  try {
    for (    String lineStr : Files.readAllLines(file.path(),context.fileSystem().encoding())) {
      currentLine++;
      Matcher m=START_FLOW_PATTERN.matcher(lineStr);
      while (m.find()) {
        Integer issueId=Integer.parseInt(m.group(1));
        Integer issueFlowId=Integer.parseInt(m.group(2));
        Integer issueFlowNum=Integer.parseInt(m.group(3));
        TextPointer newPointer=file.newPointer(currentLine,m.end());
        if (!startFlowsPositions.containsKey(issueId)) {
          startFlowsPositions.put(issueId,HashBasedTable.<Integer,Integer,TextPointer>create());
        }
        startFlowsPositions.get(issueId).row(issueFlowId).put(issueFlowNum,newPointer);
      }
      m=END_FLOW_PATTERN.matcher(lineStr);
      while (m.find()) {
        Integer issueId=Integer.parseInt(m.group(1));
        Integer issueFlowId=Integer.parseInt(m.group(2));
        Integer issueFlowNum=Integer.parseInt(m.group(3));
        TextPointer newPointer=file.newPointer(currentLine,m.start());
        if (!endFlowsPositions.containsKey(issueId)) {
          endFlowsPositions.put(issueId,HashBasedTable.<Integer,Integer,TextPointer>create());
        }
        endFlowsPositions.get(issueId).row(issueFlowId).put(issueFlowNum,newPointer);
      }
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unable to read file",e);
  }
}
