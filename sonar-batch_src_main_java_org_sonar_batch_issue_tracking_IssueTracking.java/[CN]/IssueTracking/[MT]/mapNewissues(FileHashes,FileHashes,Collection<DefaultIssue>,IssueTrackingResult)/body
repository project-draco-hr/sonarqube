{
  IssueTrackingBlocksRecognizer rec=new IssueTrackingBlocksRecognizer(hashedReference,hashedSource);
  RollingFileHashes a=RollingFileHashes.create(hashedReference,5);
  RollingFileHashes b=RollingFileHashes.create(hashedSource,5);
  Multimap<Integer,DefaultIssue> newIssuesByLines=newIssuesByLines(newIssues,rec,result);
  Multimap<Integer,PreviousIssue> lastIssuesByLines=lastIssuesByLines(result.unmatched(),rec);
  Map<Integer,HashOccurrence> map=Maps.newHashMap();
  for (  Integer line : lastIssuesByLines.keySet()) {
    int hash=a.getHash(line);
    HashOccurrence hashOccurrence=map.get(hash);
    if (hashOccurrence == null) {
      hashOccurrence=new HashOccurrence();
      hashOccurrence.lineA=line;
      hashOccurrence.countA=1;
      map.put(hash,hashOccurrence);
    }
 else {
      hashOccurrence.countA++;
    }
  }
  for (  Integer line : newIssuesByLines.keySet()) {
    int hash=b.getHash(line);
    HashOccurrence hashOccurrence=map.get(hash);
    if (hashOccurrence != null) {
      hashOccurrence.lineB=line;
      hashOccurrence.countB++;
    }
  }
  for (  HashOccurrence hashOccurrence : map.values()) {
    if (hashOccurrence.countA == 1 && hashOccurrence.countB == 1) {
      map(newIssuesByLines.get(hashOccurrence.lineB),lastIssuesByLines.get(hashOccurrence.lineA),result);
      lastIssuesByLines.removeAll(hashOccurrence.lineA);
      newIssuesByLines.removeAll(hashOccurrence.lineB);
    }
  }
  if (lastIssuesByLines.keySet().size() * newIssuesByLines.keySet().size() < 250000) {
    List<LinePair> possibleLinePairs=Lists.newArrayList();
    for (    Integer oldLine : lastIssuesByLines.keySet()) {
      for (      Integer newLine : newIssuesByLines.keySet()) {
        int weight=rec.computeLengthOfMaximalBlock(oldLine,newLine);
        possibleLinePairs.add(new LinePair(oldLine,newLine,weight));
      }
    }
    Collections.sort(possibleLinePairs,LINE_PAIR_COMPARATOR);
    for (    LinePair linePair : possibleLinePairs) {
      map(newIssuesByLines.get(linePair.lineB),lastIssuesByLines.get(linePair.lineA),result);
    }
  }
}
