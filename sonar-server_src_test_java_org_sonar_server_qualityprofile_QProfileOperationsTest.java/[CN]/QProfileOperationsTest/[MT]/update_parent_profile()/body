{
  QualityProfileDto oldParent=new QualityProfileDto().setId(2).setName("Old Parent").setLanguage("java");
  when(profileLookup.profile(1)).thenReturn(new QProfile().setId(1).setName("Child").setLanguage("java").setParent("Old Parent"));
  when(profileLookup.profile(3)).thenReturn(new QProfile().setId(3).setName("Parent").setLanguage("java"));
  when(qualityProfileDao.selectParent(2,session)).thenReturn(oldParent);
  when(profilesManager.profileParentChanged(anyInt(),anyString(),anyString())).thenReturn(new ProfilesManager.RuleInheritanceActions());
  operations.updateParentProfile(1,3,authorizedUserSession);
  ArgumentCaptor<QualityProfileDto> profileArgument=ArgumentCaptor.forClass(QualityProfileDto.class);
  verify(qualityProfileDao).update(profileArgument.capture(),eq(session));
  assertThat(profileArgument.getValue().getParent()).isEqualTo("Parent");
  assertThat(profileArgument.getValue().getLanguage()).isEqualTo("java");
  verify(profilesManager).profileParentChanged(1,"Parent","Nicolas");
  verify(ruleRegistry).deleteActiveRules(anyListOf(Integer.class));
  verify(ruleRegistry).bulkIndexActiveRules(anyListOf(Integer.class),eq(session));
}
