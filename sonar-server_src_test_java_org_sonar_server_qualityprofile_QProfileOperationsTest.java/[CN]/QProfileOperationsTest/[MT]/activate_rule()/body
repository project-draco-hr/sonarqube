{
  QualityProfileDto qualityProfile=new QualityProfileDto().setId(1).setName("My profile").setLanguage("java");
  Rule rule=Rule.create().setRepositoryKey("squid").setKey("AvoidCycle");
  rule.setId(10);
  when(ruleDao.selectParameters(eq(10),eq(session))).thenReturn(newArrayList(new RuleParamDto().setId(20).setName("max").setDefaultValue("10")));
  when(profileRules.getFromActiveRuleId(anyInt())).thenReturn(mock(QProfileRule.class));
  final int idActiveRuleToUpdate=42;
  final int idActiveRuleToDelete=24;
  RuleInheritanceActions inheritanceActions=new RuleInheritanceActions().addToIndex(idActiveRuleToUpdate).addToDelete(idActiveRuleToDelete);
  when(profilesManager.activated(eq(1),anyInt(),eq("nicolas"))).thenReturn(inheritanceActions);
  RuleActivationResult result=operations.createActiveRule(qualityProfile,rule,Severity.CRITICAL,MockUserSession.create().setName("nicolas").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN));
  assertThat(result.profile()).isNotNull();
  assertThat(result.rule()).isNotNull();
  assertThat(result.rule().activeRuleId()).isNotNull();
  ArgumentCaptor<ActiveRuleDto> activeRuleArgument=ArgumentCaptor.forClass(ActiveRuleDto.class);
  verify(activeRuleDao).insert(activeRuleArgument.capture(),eq(session));
  assertThat(activeRuleArgument.getValue().getRulId()).isEqualTo(10);
  assertThat(activeRuleArgument.getValue().getSeverity()).isEqualTo(3);
  ArgumentCaptor<ActiveRuleParamDto> activeRuleParamArgument=ArgumentCaptor.forClass(ActiveRuleParamDto.class);
  verify(activeRuleDao).insert(activeRuleParamArgument.capture(),eq(session));
  assertThat(activeRuleParamArgument.getValue().getKey()).isEqualTo("max");
  assertThat(activeRuleParamArgument.getValue().getValue()).isEqualTo("10");
  verify(session).commit();
  verify(profileRules).getFromActiveRuleId(anyInt());
  verify(profilesManager).activated(eq(1),anyInt(),eq("nicolas"));
}
