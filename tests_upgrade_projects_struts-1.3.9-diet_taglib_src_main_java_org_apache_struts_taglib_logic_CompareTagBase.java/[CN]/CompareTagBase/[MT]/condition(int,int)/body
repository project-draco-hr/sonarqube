{
  int type=-1;
  double doubleValue=0.0;
  long longValue=0;
  if ((type < 0) && (value.length() > 0)) {
    try {
      doubleValue=Double.parseDouble(value);
      type=DOUBLE_COMPARE;
    }
 catch (    NumberFormatException e) {
      ;
    }
  }
  if ((type < 0) && (value.length() > 0)) {
    try {
      longValue=Long.parseLong(value);
      type=LONG_COMPARE;
    }
 catch (    NumberFormatException e) {
      ;
    }
  }
  if (type < 0) {
    type=STRING_COMPARE;
  }
  Object variable=null;
  if (cookie != null) {
    Cookie[] cookies=((HttpServletRequest)pageContext.getRequest()).getCookies();
    if (cookies == null) {
      cookies=new Cookie[0];
    }
    for (int i=0; i < cookies.length; i++) {
      if (cookie.equals(cookies[i].getName())) {
        variable=cookies[i].getValue();
        break;
      }
    }
  }
 else   if (header != null) {
    variable=((HttpServletRequest)pageContext.getRequest()).getHeader(header);
  }
 else   if (name != null) {
    Object bean=TagUtils.getInstance().lookup(pageContext,name,scope);
    if (property != null) {
      if (bean == null) {
        JspException e=new JspException(messages.getMessage("logic.bean",name));
        TagUtils.getInstance().saveException(pageContext,e);
        throw e;
      }
      try {
        variable=PropertyUtils.getProperty(bean,property);
      }
 catch (      InvocationTargetException e) {
        Throwable t=e.getTargetException();
        if (t == null) {
          t=e;
        }
        TagUtils.getInstance().saveException(pageContext,t);
        throw new JspException(messages.getMessage("logic.property",name,property,t.toString()));
      }
catch (      Throwable t) {
        TagUtils.getInstance().saveException(pageContext,t);
        throw new JspException(messages.getMessage("logic.property",name,property,t.toString()));
      }
    }
 else {
      variable=bean;
    }
  }
 else   if (parameter != null) {
    variable=pageContext.getRequest().getParameter(parameter);
  }
 else {
    JspException e=new JspException(messages.getMessage("logic.selector"));
    TagUtils.getInstance().saveException(pageContext,e);
    throw e;
  }
  if (variable == null) {
    variable="";
  }
  int result=0;
  if (type == DOUBLE_COMPARE) {
    try {
      double doubleVariable=Double.parseDouble(variable.toString());
      if (doubleVariable < doubleValue) {
        result=-1;
      }
 else       if (doubleVariable > doubleValue) {
        result=+1;
      }
    }
 catch (    NumberFormatException e) {
      result=variable.toString().compareTo(value);
    }
  }
 else   if (type == LONG_COMPARE) {
    try {
      long longVariable=Long.parseLong(variable.toString());
      if (longVariable < longValue) {
        result=-1;
      }
 else       if (longVariable > longValue) {
        result=+1;
      }
    }
 catch (    NumberFormatException e) {
      result=variable.toString().compareTo(value);
    }
  }
 else {
    result=variable.toString().compareTo(value);
  }
  if (result < 0) {
    result=-1;
  }
 else   if (result > 0) {
    result=+1;
  }
  return ((result == desired1) || (result == desired2));
}
