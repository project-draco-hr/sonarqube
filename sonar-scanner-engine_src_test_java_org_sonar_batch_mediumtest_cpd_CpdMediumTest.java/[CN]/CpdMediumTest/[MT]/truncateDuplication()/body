{
  File srcDir=new File(baseDir,"src");
  srcDir.mkdir();
  String duplicatedStuff="Sample xoo\n";
  int blockCount=10000;
  File xooFile1=new File(srcDir,"sample.xoo");
  for (int i=0; i < blockCount; i++) {
    FileUtils.write(xooFile1,duplicatedStuff,true);
    FileUtils.write(xooFile1,"" + i + "\n",true);
  }
  TaskResult result=tester.newTask().properties(builder.put("sonar.sources","src").put("sonar.cpd.xoo.minimumTokens","1").put("sonar.cpd.xoo.minimumLines","1").build()).start();
  Map<String,List<Measure>> allMeasures=result.allMeasures();
  assertThat(allMeasures.get("com.foo.project")).extracting("metricKey").containsOnly(CoreMetrics.QUALITY_PROFILES_KEY);
  assertThat(allMeasures.get("com.foo.project:src/sample.xoo")).extracting("metricKey","intValue.value").containsOnly(tuple(CoreMetrics.LINES_KEY,blockCount * 2 + 1));
  List<org.sonar.scanner.protocol.output.ScannerReport.Duplication> duplicationGroups=result.duplicationsFor(result.inputFile("src/sample.xoo"));
  assertThat(duplicationGroups).hasSize(1);
  org.sonar.scanner.protocol.output.ScannerReport.Duplication cloneGroup=duplicationGroups.get(0);
  assertThat(cloneGroup.getDuplicateList()).hasSize(100);
}
