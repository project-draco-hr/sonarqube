{
  final DateUtils.ThreadSafeDateFormat format=new DateUtils.ThreadSafeDateFormat("yyyy-MM-dd'T'HH:mm:ss,S z");
  final Date now=new Date();
  final List<Throwable> throwables=Lists.newArrayList();
  final ThreadGroup tg=new ThreadGroup("shouldBeThreadSafe"){
    public void uncaughtException(    Thread t,    Throwable e){
      throwables.add(e);
      super.uncaughtException(t,e);
    }
  }
;
  final int[] counter=new int[1];
  counter[0]=0;
  final Thread[] threads=new Thread[10];
  for (int i=0; i < threads.length; ++i) {
    threads[i]=new Thread(tg,"JUnit Thread " + i){
      public void run(){
        int i=0;
        try {
synchronized (this) {
            notifyAll();
            wait();
          }
          while (i < 1000 && !interrupted()) {
            String formatted=format.format(now);
            Thread.yield();
            assertEquals(now,format.parse(formatted));
            ++i;
          }
        }
 catch (        Exception e) {
          fail("Unexpected exception: " + e);
        }
synchronized (counter) {
          counter[0]+=i;
        }
      }
    }
;
  }
  for (int i=0; i < threads.length; ++i) {
synchronized (threads[i]) {
      threads[i].start();
      threads[i].wait();
    }
  }
  for (int i=0; i < threads.length; ++i) {
synchronized (threads[i]) {
      threads[i].notifyAll();
    }
  }
  Thread.sleep(1000);
  for (int i=0; i < threads.length; ++i) {
    threads[i].interrupt();
  }
  for (int i=0; i < threads.length; ++i) {
synchronized (threads[i]) {
      threads[i].join();
    }
  }
  assertThat(throwables.size(),is(0));
  assertThat(counter[0],greaterThanOrEqualTo(threads.length));
}
