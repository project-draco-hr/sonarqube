{
  Measure measure1=new Measure();
  Measure measure2=new Measure();
  assertThat(measure1.equals(null)).isFalse();
  assertThat(measure1.equals("")).isFalse();
  assertThat(measure1.equals(measure1)).isTrue();
  assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());
  assertThat(measure1.equals(measure2)).isTrue();
  assertThat(measure2.equals(measure1)).isTrue();
  assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());
  measure1.setMetric(CoreMetrics.COVERAGE);
  assertThat(measure1.equals(measure2)).isFalse();
  assertThat(measure2.equals(measure1)).isFalse();
  assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());
  measure2.setMetric(CoreMetrics.LINES);
  assertThat(measure1.equals(measure2)).isFalse();
  assertThat(measure2.equals(measure1)).isFalse();
  assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());
  measure2.setMetric(CoreMetrics.COVERAGE);
  assertThat(measure1.equals(measure2)).isTrue();
  assertThat(measure2.equals(measure1)).isTrue();
  assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());
  measure1.setPersonId(1);
  assertThat(measure1.equals(measure2)).isFalse();
  assertThat(measure2.equals(measure1)).isFalse();
  assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());
  measure2.setPersonId(2);
  assertThat(measure1.equals(measure2)).isFalse();
  assertThat(measure2.equals(measure1)).isFalse();
  assertThat(measure1.hashCode()).isNotEqualTo(measure2.hashCode());
  measure2.setPersonId(1);
  assertThat(measure1.equals(measure2)).isTrue();
  assertThat(measure2.equals(measure1)).isTrue();
  assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());
  measure1.setValue(1.0);
  measure2.setValue(2.0);
  assertThat(measure1.equals(measure2)).isTrue();
  assertThat(measure2.equals(measure1)).isTrue();
  assertThat(measure1.hashCode()).isEqualTo(measure2.hashCode());
}
