{
  List<InputFile> result=Lists.newArrayList();
  if (directories == null) {
    return result;
  }
  IOFileFilter suffixFilter=getFileSuffixFilter(langs);
  WildcardPattern[] exclusionPatterns=getExclusionPatterns(applyExclusionPatterns);
  IOFileFilter initialFilesFilter=TrueFileFilter.INSTANCE;
  if (initialFiles != null && !initialFiles.isEmpty()) {
    initialFilesFilter=new FileSelectionFilter(initialFiles);
  }
  for (  File dir : directories) {
    if (dir.exists()) {
      IOFileFilter exclusionFilter=new ExclusionFilter(dir,exclusionPatterns);
      IOFileFilter visibleFileFilter=HiddenFileFilter.VISIBLE;
      List<IOFileFilter> fileFilters=Lists.newArrayList(visibleFileFilter,suffixFilter,exclusionFilter,initialFilesFilter);
      fileFilters.addAll(this.filters);
      List<File> files=(List<File>)FileUtils.listFiles(dir,new AndFileFilter(fileFilters),HiddenFileFilter.VISIBLE);
      for (      File file : files) {
        String relativePath=DefaultProjectFileSystem.getRelativePath(file,dir);
        result.add(InputFileUtils.create(dir,relativePath));
      }
    }
  }
  return result;
}
