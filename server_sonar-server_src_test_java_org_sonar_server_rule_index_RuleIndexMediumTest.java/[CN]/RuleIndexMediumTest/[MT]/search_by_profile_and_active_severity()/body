{
  QualityProfileDto qualityProfileDto1=QProfileTesting.newXooP1();
  QualityProfileDto qualityProfileDto2=QProfileTesting.newXooP2();
  db.qualityProfileDao().insert(dbSession,qualityProfileDto1,qualityProfileDto2);
  RuleDto rule1=RuleTesting.newXooX1().setSeverity("MAJOR");
  RuleDto rule2=RuleTesting.newXooX2().setSeverity("MINOR");
  RuleDto rule3=RuleTesting.newXooX3().setSeverity("INFO");
  dao.insert(dbSession,rule1,rule2,rule3);
  db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(qualityProfileDto1,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto2,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto1,rule2).setSeverity("CRITICAL"));
  dbSession.commit();
  dbSession.clearCache();
  Result<Rule> result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto1.getKey()),new QueryContext(userSessionRule));
  assertThat(result.getHits()).hasSize(2);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto1.getKey()).setActiveSeverities(Arrays.asList("CRITICAL")),new QueryContext(userSessionRule).addFacets(Arrays.asList(RuleIndex.FACET_ACTIVE_SEVERITIES)));
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule2.getName());
  assertThat(result.getFacetValues(RuleIndex.FACET_ACTIVE_SEVERITIES)).containsOnly(new FacetValue("BLOCKER",1),new FacetValue("CRITICAL",1));
  result=index.search(new RuleQuery(),new QueryContext(userSessionRule).addFacets(Arrays.asList(RuleIndex.FACET_ACTIVE_SEVERITIES)));
  assertThat(result.getHits()).hasSize(3);
  assertThat(result.getFacetValues(RuleIndex.FACET_ACTIVE_SEVERITIES)).containsOnly(new FacetValue("BLOCKER",2),new FacetValue("CRITICAL",1));
}
