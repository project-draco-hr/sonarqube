{
  CharacteristicDto char1=DebtTesting.newCharacteristicDto("RELIABILITY");
  db.debtCharacteristicDao().insert(dbSession,char1);
  CharacteristicDto char11=DebtTesting.newCharacteristicDto("SOFT_RELIABILITY").setParentId(char1.getId());
  db.debtCharacteristicDao().insert(dbSession,char11);
  dbSession.commit();
  CharacteristicDto char2=DebtTesting.newCharacteristicDto("TESTABILITY");
  db.debtCharacteristicDao().insert(dbSession,char2);
  CharacteristicDto char21=DebtTesting.newCharacteristicDto("UNIT_TESTABILITY").setParentId(char2.getId());
  db.debtCharacteristicDao().insert(dbSession,char21);
  dbSession.commit();
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("java","S001")).setSubCharacteristicId(char11.getId()).setDefaultSubCharacteristicId(null));
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("java","S002")).setSubCharacteristicId(null).setDefaultSubCharacteristicId(char11.getId()));
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("java","S003")).setSubCharacteristicId(char21.getId())).setDefaultSubCharacteristicId(char11.getId());
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("java","S004")).setSubCharacteristicId(char11.getId())).setDefaultSubCharacteristicId(char11.getId());
  dbSession.commit();
  dbSession.clearCache();
  RuleQuery query;
  Result<Rule> results;
  results=index.search(new RuleQuery(),new QueryContext(userSessionRule));
  assertThat(results.getHits()).hasSize(4);
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char11.getKey()));
  assertThat(ruleKeys(index.search(query,new QueryContext(userSessionRule)).getHits())).containsOnly("S001","S002","S004");
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char21.getKey()));
  assertThat(ruleKeys(index.search(query,new QueryContext(userSessionRule)).getHits())).containsOnly("S003");
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char1.getKey()));
  assertThat(ruleKeys(index.search(query,new QueryContext(userSessionRule)).getHits())).containsOnly("S001","S002","S004");
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char2.getKey()));
  assertThat(ruleKeys(index.search(query,new QueryContext(userSessionRule)).getHits())).containsOnly("S003");
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char11.getKey(),char1.getKey(),char2.getKey(),char21.getKey()));
  assertThat(ruleKeys(index.search(query,new QueryContext(userSessionRule)).getHits())).containsOnly("S001","S002","S003","S004");
}
