{
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("php","S001")).setSystemTags(ImmutableSet.of("sysTag"))).setTags(ImmutableSet.<String>of());
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("php","S002")).setSystemTags(ImmutableSet.<String>of())).setTags(ImmutableSet.of("tag1"));
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("javascript","S002")).setTags(ImmutableSet.of("tag1","tag2"))).setSystemTags(ImmutableSet.<String>of());
  dbSession.commit();
  RuleQuery query=new RuleQuery();
  Result result=index.search(query,new QueryOptions().setFacet(false));
  assertThat(result.getFacets()).isEmpty();
  result=index.search(new RuleQuery().setQueryText("aeiou"),new QueryOptions().setFacet(true));
  assertThat(result.getFacets()).isEmpty();
  result=index.search(query,new QueryOptions().setFacet(true));
  assertThat(result.getFacets()).isNotNull();
  assertThat(result.getFacets()).hasSize(3);
  Collection<FacetValue> repoFacets=result.getFacetValues("repositories");
  assertThat(repoFacets).hasSize(2);
  assertThat(Iterables.get(repoFacets,0).getKey()).isEqualTo("php");
  assertThat(Iterables.get(repoFacets,0).getValue()).isEqualTo(2);
  assertThat(Iterables.get(repoFacets,1).getKey()).isEqualTo("javascript");
  assertThat(Iterables.get(repoFacets,1).getValue()).isEqualTo(1);
  Collection<FacetValue> tagFacet=result.getFacetValues("tags");
  assertThat(tagFacet).hasSize(3);
  assertThat(Iterables.get(tagFacet,0).getKey()).isEqualTo("tag1");
  assertThat(Iterables.get(tagFacet,0).getValue()).isEqualTo(2);
}
