{
  QualityProfileDto qualityProfileDto1=QProfileTesting.newXooP1();
  QualityProfileDto qualityProfileDto2=QProfileTesting.newXooP2().setParentKee(QProfileTesting.XOO_P1_KEY);
  db.qualityProfileDao().insert(dbSession,qualityProfileDto1,qualityProfileDto2);
  RuleDto rule1=RuleTesting.newDto(RuleKey.of("xoo","S001"));
  RuleDto rule2=RuleTesting.newDto(RuleKey.of("xoo","S002"));
  RuleDto rule3=RuleTesting.newDto(RuleKey.of("xoo","S003"));
  RuleDto rule4=RuleTesting.newDto(RuleKey.of("xoo","S004"));
  dao.insert(dbSession,rule1,rule2,rule3,rule4);
  db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(qualityProfileDto1,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto1,rule2).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto1,rule3).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto2,rule1).setSeverity("MINOR").setInheritance(ActiveRule.Inheritance.INHERITED.name()),ActiveRuleDto.createFor(qualityProfileDto2,rule2).setSeverity("BLOCKER").setInheritance(ActiveRule.Inheritance.OVERRIDES.name()),ActiveRuleDto.createFor(qualityProfileDto2,rule3).setSeverity("BLOCKER").setInheritance(ActiveRule.Inheritance.INHERITED.name()));
  dbSession.commit();
  Result<Rule> result=index.search(new RuleQuery(),new QueryOptions());
  assertThat(result.getHits()).hasSize(4);
  result=index.search(new RuleQuery().setActivation(true),new QueryOptions());
  assertThat(result.getHits()).hasSize(3);
  result=index.search(new RuleQuery().setActivation(false),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule4.getName());
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto1.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.INHERITED.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(0);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto2.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.INHERITED.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(2);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto1.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.OVERRIDES.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(0);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto2.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.OVERRIDES.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto1.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.INHERITED.name(),ActiveRule.Inheritance.OVERRIDES.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(0);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto2.getKey()).setInheritance(ImmutableSet.of(ActiveRule.Inheritance.INHERITED.name(),ActiveRule.Inheritance.OVERRIDES.name())),new QueryOptions());
  assertThat(result.getHits()).hasSize(3);
}
