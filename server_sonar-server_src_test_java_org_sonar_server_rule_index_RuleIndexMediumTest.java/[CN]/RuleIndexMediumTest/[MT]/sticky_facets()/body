{
  Integer numberOfSystemTags=2;
  dao.insert(dbSession,RuleTesting.newDto(RuleKey.of("xoo","S001")).setLanguage("java").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("xoo","S002")).setLanguage("java").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("xoo","S003")).setLanguage("java").setTags(ImmutableSet.<String>of("T1","T2")),RuleTesting.newDto(RuleKey.of("xoo","S011")).setLanguage("cobol").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("xoo","S012")).setLanguage("cobol").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("foo","S013")).setLanguage("cobol").setTags(ImmutableSet.<String>of("T3","T4")),RuleTesting.newDto(RuleKey.of("foo","S111")).setLanguage("cpp").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("foo","S112")).setLanguage("cpp").setTags(ImmutableSet.<String>of()),RuleTesting.newDto(RuleKey.of("foo","S113")).setLanguage("cpp").setTags(ImmutableSet.<String>of("T2","T3")));
  dbSession.commit();
  assertThat(index.countAll()).isEqualTo(9);
  assertThat(index.search(new RuleQuery(),new QueryContext()).getHits()).hasSize(9);
  Map<String,Collection<FacetValue>> facets=index.search(new RuleQuery(),new QueryContext().setFacet(true)).getFacets();
  assertThat(facets.keySet()).hasSize(3);
  assertThat(facets.get(RuleIndex.FACET_LANGUAGES)).onProperty("key").containsOnly("cpp","java","cobol");
  assertThat(facets.get(RuleIndex.FACET_REPOSITORIES)).onProperty("key").containsOnly("xoo","foo");
  assertThat(facets.get(RuleIndex.FACET_TAGS)).onProperty("key").containsOnly("systag1","systag2","T1","T2","T3","T4");
  Result<Rule> result=index.search(new RuleQuery().setLanguages(ImmutableList.<String>of("cpp")),new QueryContext().setFacet(true));
  assertThat(result.getHits()).hasSize(3);
  assertThat(result.getFacets()).hasSize(3);
  assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty("key").containsOnly("cpp","java","cobol");
  result=index.search(new RuleQuery().setLanguages(ImmutableList.<String>of("cpp")).setTags(ImmutableList.<String>of("T2")),new QueryContext().setFacet(true));
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getFacets().keySet()).hasSize(3);
  assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty("key").containsOnly("cpp","java");
  assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).onProperty("key").containsOnly("foo");
  assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).onProperty("key").containsOnly("systag1","systag2","T2","T3");
  result=index.search(new RuleQuery().setLanguages(ImmutableList.<String>of("cpp","java")).setTags(ImmutableList.<String>of("T2")),new QueryContext().setFacet(true));
  assertThat(result.getHits()).hasSize(2);
  assertThat(result.getFacets().keySet()).hasSize(3);
  assertThat(result.getFacets().get(RuleIndex.FACET_LANGUAGES)).onProperty("key").containsOnly("cpp","java");
  assertThat(result.getFacets().get(RuleIndex.FACET_REPOSITORIES)).onProperty("key").containsOnly("foo","xoo");
  assertThat(result.getFacets().get(RuleIndex.FACET_TAGS)).onProperty("key").containsOnly("systag1","systag2","T1","T2","T3");
}
