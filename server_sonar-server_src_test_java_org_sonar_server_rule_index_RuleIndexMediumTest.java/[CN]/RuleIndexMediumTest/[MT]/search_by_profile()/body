{
  QualityProfileDto qualityProfileDto1=QProfileTesting.newXooP1();
  QualityProfileDto qualityProfileDto2=QProfileTesting.newXooP2();
  db.qualityProfileDao().insert(dbSession,qualityProfileDto1,qualityProfileDto2);
  RuleDto rule1=RuleTesting.newXooX1();
  RuleDto rule2=RuleTesting.newXooX2();
  RuleDto rule3=RuleTesting.newXooX3();
  dao.insert(dbSession,rule1,rule2,rule3);
  db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(qualityProfileDto1,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto2,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto1,rule2).setSeverity("BLOCKER"));
  dbSession.commit();
  dbSession.clearCache();
  Result<Rule> result=index.search(new RuleQuery().setActivation(true),new QueryContext());
  assertThat(result.getHits()).hasSize(2);
  result=index.search(new RuleQuery().setActivation(false),new QueryContext());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule3.getName());
  index.search(new RuleQuery().setActivation(false).setQProfileKey(qualityProfileDto2.getKey()),new QueryContext());
  assertThat(result.getHits()).hasSize(1);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto2.getKey()),new QueryContext());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule1.getName());
}
