{
  RuleQuery query=service.newRuleQuery();
  query.setQueryText(Strings.emptyToNull((String)params.get("searchQuery")));
  query.setKey(Strings.emptyToNull((String)params.get("key")));
  query.setLanguages(RubyUtils.toStrings(params.get("languages")));
  query.setRepositories(RubyUtils.toStrings(params.get("repositories")));
  query.setSeverities(RubyUtils.toStrings(params.get("severities")));
  query.setStatuses(RubyUtils.toEnums(params.get("statuses"),RuleStatus.class));
  query.setTags(RubyUtils.toStrings(params.get("tags")));
  query.setDebtCharacteristics(RubyUtils.toStrings(params.get("debtCharacteristics")));
  query.setHasDebtCharacteristic(RubyUtils.toBoolean(params.get("hasDebtCharacteristic")));
  query.setSortField(RuleNormalizer.RuleField.NAME);
  QueryOptions options=new QueryOptions();
  Integer page=RubyUtils.toInteger(params.get("p"));
  int pageIndex=page != null ? page : 1;
  Integer pageSize=RubyUtils.toInteger(params.get("pageSize"));
  options.setPage(pageIndex,pageSize != null ? pageSize : 50);
  Result<Rule> result=service.search(query,options);
  return new PagedResult<Rule>(result.getHits(),PagingResult.create(options.getLimit(),pageIndex,result.getTotal()));
}
