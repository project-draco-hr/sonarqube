{
  RuleQuery query=service.newRuleQuery();
  query.setQueryText(Strings.emptyToNull((String)params.get("searchQuery")));
  query.setKey(Strings.emptyToNull((String)params.get("key")));
  query.setLanguages(RubyUtils.toStrings(params.get("languages")));
  query.setRepositories(RubyUtils.toStrings(params.get("repositories")));
  query.setSeverities(RubyUtils.toStrings(params.get("severities")));
  query.setStatuses(RubyUtils.toEnums(params.get("statuses"),RuleStatus.class));
  query.setTags(RubyUtils.toStrings(params.get("tags")));
  query.setDebtCharacteristics(RubyUtils.toStrings(params.get("debtCharacteristics")));
  query.setHasDebtCharacteristic(RubyUtils.toBoolean(params.get("hasDebtCharacteristic")));
  query.setSortField(RuleNormalizer.RuleField.NAME);
  QueryOptions options=new QueryOptions().setScroll(true);
  List<Rule> rules=Lists.newArrayList(service.search(query,options).scroll());
  return new PagedResult<org.sonar.server.rule.Rule>(rules,PagingResult.create(Integer.MAX_VALUE,1,rules.size()));
}
