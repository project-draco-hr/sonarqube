{
  RuleQuery query=service.newRuleQuery();
  query.setQueryText(Strings.emptyToNull((String)params.get("searchQuery")));
  query.setKey(Strings.emptyToNull((String)params.get("key")));
  query.setLanguages(RubyUtils.toStrings(params.get("languages")));
  query.setRepositories(RubyUtils.toStrings(params.get("repositories")));
  query.setSeverities(RubyUtils.toStrings(params.get("severities")));
  query.setStatuses(RubyUtils.toEnums(params.get("statuses"),RuleStatus.class));
  query.setTags(RubyUtils.toStrings(params.get("tags")));
  query.setDebtCharacteristics(RubyUtils.toStrings(params.get("debtCharacteristics")));
  query.setHasDebtCharacteristic(RubyUtils.toBoolean(params.get("hasDebtCharacteristic")));
  query.setSortField(RuleNormalizer.RuleField.NAME);
  QueryOptions options=new QueryOptions();
  options.setLimit(QueryOptions.MAX_LIMIT);
  List<Rule> rules=Lists.newArrayList();
  boolean more=true;
  int offset=0;
  while (more) {
    options.setOffset(offset);
    RuleResult result=service.search(query,options);
    rules.addAll(result.getRules());
    if (result.getHits().size() < QueryOptions.MAX_LIMIT) {
      more=false;
    }
 else {
      offset+=QueryOptions.MAX_LIMIT;
    }
  }
  return new PagedResult<org.sonar.server.rule.Rule>(rules,PagingResult.create(Integer.MAX_VALUE,1,rules.size()));
}
