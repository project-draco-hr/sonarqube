{
  return new Iterator(){
    private int index=m_head;
    private int lastReturnedIndex=-1;
    public boolean hasNext(){
      return index != m_tail;
    }
    public Object next(){
      if (!hasNext())       throw new NoSuchElementException();
      lastReturnedIndex=index;
      index=increment(index);
      return m_buffer[lastReturnedIndex];
    }
    public void remove(){
      if (lastReturnedIndex == -1)       throw new IllegalStateException();
      if (lastReturnedIndex == m_head) {
        UnboundedFifoBuffer.this.remove();
        lastReturnedIndex=-1;
        return;
      }
      int i=increment(lastReturnedIndex);
      while (i != m_tail) {
        m_buffer[decrement(i)]=m_buffer[i];
        i=increment(i);
      }
      lastReturnedIndex=-1;
      m_tail=decrement(m_tail);
      m_buffer[m_tail]=null;
      index=decrement(index);
    }
  }
;
}
