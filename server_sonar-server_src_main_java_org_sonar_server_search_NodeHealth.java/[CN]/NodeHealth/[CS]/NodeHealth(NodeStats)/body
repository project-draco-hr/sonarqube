{
  setMaster(nodesStats.getNode().isMasterNode());
  setAddress(nodesStats.getNode().getAddress().toString());
  setJvmHeapMax(nodesStats.getJvm().getMem().getHeapMax().bytes());
  setJvmHeapUsed(nodesStats.getJvm().getMem().getHeapUsed().bytes());
  setFsTotal(nodesStats.getFs().getTotal().getTotal().bytes());
  setFsAvailable(nodesStats.getFs().getTotal().getAvailable().bytes());
  setJvmThreads(nodesStats.getJvm().getThreads().count());
  if (nodesStats.getProcess().getCpu() != null) {
    setProcessCpuPercent(nodesStats.getProcess().cpu().getPercent());
  }
  setOpenFiles(nodesStats.getProcess().getOpenFileDescriptors());
  setJvmUptimeMillis(nodesStats.getJvm().getUptime().getMillis());
  performanceStats=new ArrayList<Performance>();
  double indexCount=nodesStats.getIndices().getIndexing().getTotal().getIndexCount();
  double indexTotalTime=nodesStats.getIndices().getIndexing().getTotal().getIndexTimeInMillis();
  performanceStats.add(new Performance("Average Indexing Time").setWarnThreshold(10).setErrorThreshold(50).setMessage("Too complex documents or low IO/CPU").setValue(indexTotalTime / indexCount));
  double queryCount=nodesStats.getIndices().getSearch().getTotal().getQueryCount();
  double queryTotalTime=nodesStats.getIndices().getSearch().getTotal().getQueryTimeInMillis();
  performanceStats.add(new Performance("Average Querying Time").setWarnThreshold(50).setErrorThreshold(500).setMessage("Inefficient query and/or filters").setValue(queryTotalTime / queryCount));
  double fetchCount=nodesStats.getIndices().getSearch().getTotal().getFetchCount();
  double fetchTotalTime=nodesStats.getIndices().getSearch().getTotal().getFetchTimeInMillis();
  performanceStats.add(new Performance("Average Fetching Time").setWarnThreshold(8).setErrorThreshold(15).setMessage("Slow IO, fetch-size too large or documents too big").setValue(fetchTotalTime / fetchCount));
  double getCount=nodesStats.getIndices().getGet().getCount();
  double getTotalTime=nodesStats.getIndices().getGet().getTimeInMillis();
  performanceStats.add(new Performance("Average Get Time").setWarnThreshold(5).setErrorThreshold(10).setMessage("Slow IO").setValue(getTotalTime / getCount));
  double refreshCount=nodesStats.getIndices().getRefresh().getTotal();
  double refreshTotalTime=nodesStats.getIndices().getRefresh().getTotalTimeInMillis();
  performanceStats.add(new Performance("Average Refreshing Time").setWarnThreshold(10).setErrorThreshold(20).setMessage("Slow IO").setValue(refreshTotalTime / refreshCount));
  fieldCacheMemory=nodesStats.getIndices().getFieldData().getMemorySizeInBytes();
  double fieldCacheEviction=nodesStats.getIndices().getFieldData().getEvictions();
  performanceStats.add(new Performance("Field Cache Eviction Count").setWarnThreshold(1).setErrorThreshold(1).setMessage("Insufficient RAM available for queries").setValue(fieldCacheEviction));
  filterCacheMemory=nodesStats.getIndices().getFilterCache().getMemorySizeInBytes();
  double filterCacheEviction=nodesStats.getIndices().getFilterCache().getEvictions();
  performanceStats.add(new Performance("Filter Cache Eviction Count").setWarnThreshold(1).setErrorThreshold(1).setMessage("Insufficient RAM or too many orphaned filters").setValue(filterCacheEviction));
}
