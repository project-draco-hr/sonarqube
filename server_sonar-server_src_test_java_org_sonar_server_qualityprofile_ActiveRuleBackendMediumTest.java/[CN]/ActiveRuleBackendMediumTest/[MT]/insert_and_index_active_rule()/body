{
  QualityProfileDto profileDto=QProfileTesting.newXooP1();
  db.qualityProfileDao().insert(dbSession,profileDto);
  RuleKey ruleKey=RuleTesting.XOO_X1;
  RuleDto ruleDto=newRuleDto(ruleKey);
  db.deprecatedRuleDao().insert(dbSession,ruleDto);
  ActiveRuleDto activeRule=ActiveRuleDto.createFor(profileDto,ruleDto).setInheritance(ActiveRule.Inheritance.INHERITED.name()).setSeverity(Severity.BLOCKER);
  db.activeRuleDao().insert(dbSession,activeRule);
  dbSession.commit();
  assertThat(db.activeRuleDao().getByKey(dbSession,activeRule.getKey())).isNotNull();
  List<ActiveRuleDto> persistedDtos=db.activeRuleDao().selectByRule(dbSession,ruleDto);
  assertThat(persistedDtos).hasSize(1);
  ActiveRule hit=index.get(ActiveRuleIndex.class).getByKey(activeRule.getKey());
  assertThat(hit).isNotNull();
  assertThat(hit.key()).isEqualTo(activeRule.getKey());
  assertThat(hit.inheritance().name()).isEqualTo(activeRule.getInheritance());
  assertThat(hit.parentKey()).isNull();
  assertThat(hit.severity()).isEqualTo(activeRule.getSeverityString());
}
