{
  RuleDto ruleDto1=newRuleDto(RuleTesting.XOO_X1);
  RuleDto ruleDto2=newRuleDto(RuleTesting.XOO_X2);
  db.deprecatedRuleDao().insert(dbSession,ruleDto1,ruleDto2);
  List<String> profileKeys=newArrayList();
  for (int i=0; i < 30; i++) {
    QualityProfileDto profileDto=QProfileTesting.newDto(QProfileName.createFor("xoo","profile-" + i),"profile-" + i);
    profileKeys.add(profileDto.getKey());
    db.qualityProfileDao().insert(dbSession,profileDto);
    db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(profileDto,ruleDto1).setSeverity(Severity.BLOCKER),ActiveRuleDto.createFor(profileDto,ruleDto2).setSeverity(Severity.MAJOR));
  }
  dbSession.commit();
  dbSession.clearCache();
  Map<String,Multimap<String,FacetValue>> stats=index.get(ActiveRuleIndex.class).getStatsByProfileKeys(profileKeys);
  assertThat(stats).hasSize(30);
}
