{
  QualityProfileDto profileDto1=QProfileTesting.newXooP1();
  QualityProfileDto profileDto2=QProfileTesting.newXooP2();
  db.qualityProfileDao().insert(dbSession,profileDto1,profileDto2);
  RuleDto ruleDto1=newRuleDto(RuleTesting.XOO_X1);
  RuleDto ruleDto2=newRuleDto(RuleTesting.XOO_X2);
  db.ruleDao().insert(dbSession,ruleDto1,ruleDto2);
  db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(profileDto1,ruleDto1).setInheritance(ActiveRule.Inheritance.INHERITED.name()).setSeverity(Severity.BLOCKER),ActiveRuleDto.createFor(profileDto2,ruleDto1).setInheritance(ActiveRule.Inheritance.INHERITED.name()).setSeverity(Severity.MINOR),ActiveRuleDto.createFor(profileDto1,ruleDto2).setInheritance(ActiveRule.Inheritance.OVERRIDES.name()).setSeverity(Severity.MAJOR),ActiveRuleDto.createFor(profileDto2,ruleDto2).setInheritance(ActiveRule.Inheritance.INHERITED.name()).setSeverity(Severity.BLOCKER));
  dbSession.commit();
  dbSession.clearCache();
  assertThat(index.get(ActiveRuleIndex.class).countAll()).isEqualTo(4);
  Map<String,Multimap<String,FacetValue>> stats=index.get(ActiveRuleIndex.class).getStatsByProfileKeys(ImmutableList.of(profileDto1.getKey(),profileDto2.getKey()));
  assertThat(stats).hasSize(2);
}
