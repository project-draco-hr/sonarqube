{
  reportReader.setMetadata(BatchReport.Metadata.newBuilder().setRootComponentRef(1).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").addChildRef(2).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setName("Module").addChildRef(3).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.MODULE).setKey("SUB_MODULE_KEY").setName("Sub Module").addChildRef(4).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(5).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(5).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").build());
  ComputationContext context=new ComputationContext(ComponentTreeBuilders.from(reportReader));
  sut.execute(context);
  Map<Integer,Component> componentsByRef=getComponentsByRef(context.getRoot());
  assertThat(componentsByRef.get(4).getKey()).isEqualTo("SUB_MODULE_KEY:src/main/java/dir");
  assertThat(componentsByRef.get(5).getKey()).isEqualTo("SUB_MODULE_KEY:src/main/java/dir/Foo.java");
}
