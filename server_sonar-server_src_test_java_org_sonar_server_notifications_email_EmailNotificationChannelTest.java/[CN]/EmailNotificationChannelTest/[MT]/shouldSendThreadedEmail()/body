{
  configure();
  EmailMessage emailMessage=new EmailMessage().setMessageId("reviews/view/1").setFrom("Full Username").setTo("user@nowhere").setSubject("Review #3").setMessage("I'll take care of this violation.");
  channel.deliver(emailMessage);
  List<WiserMessage> messages=server.getMessages();
  assertThat(messages).hasSize(1);
  MimeMessage email=messages.get(0).getMimeMessage();
  Assertions.assertThat(email.getHeader("Content-Type",null)).isEqualTo("text/plain; charset=UTF-8");
  Assertions.assertThat(email.getHeader("In-Reply-To",null)).isEqualTo("<reviews/view/1@nemo.sonarsource.org>");
  Assertions.assertThat(email.getHeader("References",null)).isEqualTo("<reviews/view/1@nemo.sonarsource.org>");
  Assertions.assertThat(email.getHeader("List-ID",null)).isEqualTo("SonarQube <sonar.nemo.sonarsource.org>");
  Assertions.assertThat(email.getHeader("List-Archive",null)).isEqualTo("http://nemo.sonarsource.org");
  Assertions.assertThat(email.getHeader("From",",")).isEqualTo("\"Full Username (SonarQube)\" <server@nowhere>");
  Assertions.assertThat(email.getHeader("To",null)).isEqualTo("<user@nowhere>");
  Assertions.assertThat(email.getHeader("Subject",null)).isEqualTo("[SONARQUBE] Review #3");
  assertThat((String)email.getContent()).startsWith("I'll take care of this violation.");
}
