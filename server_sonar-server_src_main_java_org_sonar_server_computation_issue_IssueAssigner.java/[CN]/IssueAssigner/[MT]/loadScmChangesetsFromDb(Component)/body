{
  DbSession dbSession=dbClient.openSession(false);
  try {
    Optional<Iterable<DbFileSources.Line>> lines=sourceService.getLines(dbSession,component.getUuid(),1,Integer.MAX_VALUE);
    Map<String,BatchReport.Changesets.Changeset> changesetByRevision=new HashMap<>();
    BatchReport.Changesets.Builder scmBuilder=BatchReport.Changesets.newBuilder().setComponentRef(component.getReportAttributes().getRef());
    if (lines.isPresent()) {
      for (      DbFileSources.Line sourceLine : lines.get()) {
        String scmRevision=sourceLine.getScmRevision();
        if (scmRevision == null || changesetByRevision.get(scmRevision) == null) {
          BatchReport.Changesets.Changeset.Builder changeSetBuilder=BatchReport.Changesets.Changeset.newBuilder();
          if (sourceLine.hasScmAuthor()) {
            changeSetBuilder.setAuthor(sourceLine.getScmAuthor());
          }
          if (sourceLine.hasScmDate()) {
            changeSetBuilder.setDate(sourceLine.getScmDate());
          }
          if (scmRevision != null) {
            changeSetBuilder.setRevision(scmRevision);
          }
          BatchReport.Changesets.Changeset changeset=changeSetBuilder.build();
          scmBuilder.addChangeset(changeset);
          scmBuilder.addChangesetIndexByLine(scmBuilder.getChangesetCount() - 1);
          if (scmRevision != null) {
            changesetByRevision.put(scmRevision,changeset);
          }
        }
 else {
          scmBuilder.addChangesetIndexByLine(scmBuilder.getChangesetList().indexOf(changesetByRevision.get(scmRevision)));
        }
      }
    }
    return scmBuilder.build();
  }
  finally {
    dbClient.closeSession(dbSession);
  }
}
