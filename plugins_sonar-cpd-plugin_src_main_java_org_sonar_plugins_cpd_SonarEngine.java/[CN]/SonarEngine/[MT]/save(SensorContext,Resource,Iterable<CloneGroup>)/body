{
  if (clones == null || !clones.iterator().hasNext()) {
    return;
  }
  Set<Integer> duplicatedLines=new HashSet<Integer>();
  double duplicatedBlocks=0;
  for (  CloneGroup clone : clones) {
    ClonePart origin=clone.getOriginPart();
    for (    ClonePart part : clone.getCloneParts()) {
      if (part.getResourceId().equals(origin.getResourceId())) {
        duplicatedBlocks++;
        for (int duplicatedLine=part.getStartLine(); duplicatedLine < part.getStartLine() + part.getLines(); duplicatedLine++) {
          duplicatedLines.add(duplicatedLine);
        }
      }
    }
  }
  StringBuilder xml=new StringBuilder();
  xml.append("<duplications>");
  for (  CloneGroup clone : clones) {
    xml.append("<g>");
    for (    ClonePart part : clone.getCloneParts()) {
      xml.append("<b s=\"").append(part.getStartLine()).append("\" l=\"").append(part.getLines()).append("\" r=\"").append(part.getResourceId()).append("\"/>");
    }
    xml.append("</g>");
  }
  xml.append("</duplications>");
  context.saveMeasure(resource,CoreMetrics.DUPLICATED_FILES,1d);
  context.saveMeasure(resource,CoreMetrics.DUPLICATED_LINES,(double)duplicatedLines.size());
  context.saveMeasure(resource,CoreMetrics.DUPLICATED_BLOCKS,duplicatedBlocks);
  context.saveMeasure(resource,new Measure(CoreMetrics.DUPLICATIONS_DATA,xml.toString()));
}
