{
  List<InputFile> inputFiles=project.getFileSystem().mainFiles(project.getLanguageKey());
  if (inputFiles.isEmpty()) {
    return;
  }
  final SonarDuplicationsIndex index;
  if (isCrossProject(project)) {
    Logs.INFO.info("Cross-project analysis enabled");
    index=new SonarDuplicationsIndex(new DbDuplicationsIndex(dbSession,resourcePersister,project));
  }
 else {
    Logs.INFO.info("Cross-project analysis disabled");
    index=new SonarDuplicationsIndex();
  }
  TokenChunker tokenChunker=JavaTokenProducer.build();
  StatementChunker statementChunker=JavaStatementBuilder.build();
  BlockChunker blockChunker=new BlockChunker(BLOCK_SIZE);
  for (  InputFile inputFile : inputFiles) {
    Resource resource=getResource(inputFile);
    String resourceKey=getFullKey(project,resource);
    List<Statement> statements;
    Reader reader=null;
    try {
      reader=new InputStreamReader(new FileInputStream(inputFile.getFile()),project.getFileSystem().getSourceCharset());
      statements=statementChunker.chunk(tokenChunker.chunk(reader));
    }
 catch (    FileNotFoundException e) {
      throw new SonarException(e);
    }
 finally {
      IOUtils.closeQuietly(reader);
    }
    List<Block> blocks=blockChunker.chunk(resourceKey,statements);
    index.insert(resource,blocks);
  }
  for (  InputFile inputFile : inputFiles) {
    Resource resource=getResource(inputFile);
    String resourceKey=getFullKey(project,resource);
    Collection<Block> fileBlocks=index.getByResource(resource,resourceKey);
    List<CloneGroup> clones=OriginalCloneDetectionAlgorithm.detect(index,fileBlocks);
    if (!clones.isEmpty()) {
      DuplicationsData data=new DuplicationsData(resource,context);
      for (      CloneGroup clone : clones) {
        poplulateData(data,clone);
      }
      data.save();
    }
  }
}
