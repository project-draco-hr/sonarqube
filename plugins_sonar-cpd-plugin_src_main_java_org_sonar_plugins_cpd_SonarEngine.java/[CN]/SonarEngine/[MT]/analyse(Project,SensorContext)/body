{
  List<InputFile> inputFiles=project.getFileSystem().mainFiles(project.getLanguageKey());
  if (inputFiles.isEmpty()) {
    return;
  }
  final SonarCloneIndex index;
  if (isCrossProject(project)) {
    Logs.INFO.info("Enabled cross-project analysis");
    index=new SonarCloneIndex(new DbCloneIndex(dbSession,resourcePersister,project));
  }
 else {
    index=new SonarCloneIndex();
  }
  TokenChunker tokenChunker=JavaTokenProducer.build();
  StatementChunker statementChunker=JavaStatementBuilder.build();
  BlockChunker blockChunker=new BlockChunker(BLOCK_SIZE);
  for (  InputFile inputFile : inputFiles) {
    Resource resource=getResource(inputFile);
    String resourceKey=getFullKey(project,resource);
    File file=inputFile.getFile();
    TokenQueue tokenQueue=tokenChunker.chunk(file);
    List<Statement> statements=statementChunker.chunk(tokenQueue);
    List<Block> blocks=blockChunker.chunk(resourceKey,statements);
    index.insert(resource,blocks);
  }
  for (  InputFile inputFile : inputFiles) {
    Resource resource=getResource(inputFile);
    String resourceKey=getFullKey(project,resource);
    Collection<Block> fileBlocks=index.getByResource(resource,resourceKey);
    List<CloneGroup> clones=OriginalCloneDetectionAlgorithm.detect(index,fileBlocks);
    if (!clones.isEmpty()) {
      DuplicationsData data=new DuplicationsData();
      for (      CloneGroup clone : clones) {
        poplulateData(data,clone);
      }
      data.save(context,resource);
    }
  }
}
