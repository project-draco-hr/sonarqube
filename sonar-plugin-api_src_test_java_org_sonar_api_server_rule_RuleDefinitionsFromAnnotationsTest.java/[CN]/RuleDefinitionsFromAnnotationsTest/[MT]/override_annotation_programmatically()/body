{
  RuleDefinitions.Context context=new RuleDefinitions.Context();
  RuleDefinitions.NewRepository newRepository=context.createRepository("squid","java");
  NewRule newRule=newRepository.loadAnnotatedClass(RuleWithProperty.class);
  newRule.setName("Overriden name");
  newRule.param("property").setDefaultValue("true");
  newRule.param("property").setDescription("Overriden");
  newRepository.done();
  RuleDefinitions.Repository repository=context.repository("squid");
  assertThat(repository.rules()).hasSize(1);
  RuleDefinitions.Rule rule=repository.rules().get(0);
  assertThat(rule.key()).isEqualTo("foo");
  assertThat(rule.status()).isEqualTo(RuleStatus.BETA);
  assertThat(rule.name()).isEqualTo("Overriden name");
  assertThat(rule.htmlDescription()).isEqualTo("Foo Bar");
  assertThat(rule.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(rule.params()).hasSize(1);
  RuleDefinitions.Param prop=rule.param("property");
  assertThat(prop.key()).isEqualTo("property");
  assertThat(prop.description()).isEqualTo("Overriden");
  assertThat(prop.defaultValue()).isEqualTo("true");
  assertThat(prop.type()).isEqualTo(RuleParamType.STRING);
}
