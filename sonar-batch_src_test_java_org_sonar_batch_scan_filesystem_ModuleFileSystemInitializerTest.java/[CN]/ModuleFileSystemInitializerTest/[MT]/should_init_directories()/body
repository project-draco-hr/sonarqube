{
  File baseDir=temp.newFolder("base");
  File buildDir=temp.newFolder("build");
  File sourceDir=new File(baseDir,"src/main/java");
  FileUtils.forceMkdir(sourceDir);
  File testDir=new File(baseDir,"src/test/java");
  FileUtils.forceMkdir(testDir);
  File binaryDir=new File(baseDir,"target/classes");
  FileUtils.forceMkdir(binaryDir);
  ProjectDefinition project=ProjectDefinition.create().setBaseDir(baseDir).setBuildDir(buildDir).addSourceDirs("src/main/java","src/main/unknown").addTestDirs("src/test/java","src/test/unknown").addBinaryDir("target/classes");
  ModuleFileSystemInitializer initializer=new ModuleFileSystemInitializer(project,mock(TempUtils.class),pathResolver);
  assertThat(initializer.baseDir().getCanonicalPath()).isEqualTo(baseDir.getCanonicalPath());
  assertThat(initializer.buildDir().getCanonicalPath()).isEqualTo(buildDir.getCanonicalPath());
  assertThat(initializer.sourceDirs()).hasSize(1);
  assertThat(path(initializer.sourceDirs().get(0))).endsWith("src/main/java");
  assertThat(initializer.testDirs()).hasSize(1);
  assertThat(path(initializer.testDirs().get(0))).endsWith("src/test/java");
  assertThat(initializer.binaryDirs()).hasSize(1);
  assertThat(path(initializer.binaryDirs().get(0))).endsWith("target/classes");
}
