{
  RuleDto ruleDto=RuleTesting.newXooX1();
  dao.insert(dbSession,ruleDto);
  dbSession.commit();
  RuleParamDto minParamDto=new RuleParamDto().setName("min").setType(RuleParamType.INTEGER.type()).setDefaultValue("2").setDescription("Minimum");
  dao.addRuleParam(dbSession,ruleDto,minParamDto);
  RuleParamDto maxParamDto=new RuleParamDto().setName("max").setType(RuleParamType.INTEGER.type()).setDefaultValue("10").setDescription("Maximum");
  dao.addRuleParam(dbSession,ruleDto,maxParamDto);
  dbSession.commit();
  RuleDto theRule=dao.getNullableByKey(dbSession,RuleTesting.XOO_X1);
  assertThat(theRule.getCreatedAt()).isNotNull();
  assertThat(theRule.getUpdatedAt()).isNotNull();
  List<RuleParamDto> persistedDtos=dao.findRuleParamsByRuleKey(dbSession,theRule.getKey());
  assertThat(persistedDtos).hasSize(2);
  Rule hit=index.getByKey(RuleTesting.XOO_X1);
  assertThat(hit).isNotNull();
  assertThat(hit.key()).isNotNull();
  RuleService service=tester.get(RuleService.class);
  Rule rule=service.getByKey(RuleTesting.XOO_X1);
  assertThat(rule.params()).hasSize(2);
  assertThat(Iterables.getLast(rule.params(),null).key()).isEqualTo("max");
}
