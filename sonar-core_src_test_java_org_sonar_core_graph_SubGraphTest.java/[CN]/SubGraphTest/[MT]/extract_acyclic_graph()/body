{
  TinkerGraph graph=new TinkerGraph();
  Vertex a=GraphHelper.addVertex(graph,null,"key","a");
  Vertex b=GraphHelper.addVertex(graph,null,"key","b");
  Vertex c=GraphHelper.addVertex(graph,null,"key","c");
  Vertex d=GraphHelper.addVertex(graph,null,"key","d");
  Vertex e=GraphHelper.addVertex(graph,null,"key","e");
  Edge ab=GraphHelper.addEdge(graph,null,a,b,"uses");
  Edge bc=GraphHelper.addEdge(graph,null,b,c,"inherits");
  Edge ad=GraphHelper.addEdge(graph,null,a,d,"uses");
  Edge de=GraphHelper.addEdge(graph,null,d,e,"implements");
  Graph sub=SubGraph.extract(a,"uses",Direction.OUT,"implements",Direction.OUT);
  assertThat(sub.getVertices()).hasSize(4);
  assertThat(sub.getVertex(a.getId()).getProperty("key")).isEqualTo("a");
  assertThat(sub.getVertex(b.getId()).getProperty("key")).isEqualTo("b");
  assertThat(sub.getVertex(c.getId())).isNull();
  assertThat(sub.getVertex(d.getId()).getProperty("key")).isEqualTo("d");
  assertThat(sub.getVertex(e.getId()).getProperty("key")).isEqualTo("e");
  assertThat(sub.getEdges()).hasSize(3);
  assertThat(sub.getEdge(ab.getId()).getLabel()).isEqualTo("uses");
  assertThat(sub.getEdge(ab.getId()).getId()).isEqualTo(ab.getId());
  assertThat(sub.getEdge(bc.getId())).isNull();
  assertThat(sub.getEdge(ad.getId()).getId()).isEqualTo(ad.getId());
  assertThat(sub.getEdge(de.getId()).getId()).isEqualTo(de.getId());
}
