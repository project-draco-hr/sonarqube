{
  if (duplications == null || Iterables.isEmpty(duplications)) {
    return;
  }
  Set<Integer> duplicatedLines=new HashSet<Integer>();
  int duplicatedBlocks=computeBlockAndLineCount(duplications,duplicatedLines);
  Map<Integer,Integer> duplicationByLine=new HashMap<Integer,Integer>();
  for (int i=1; i <= inputFile.lines(); i++) {
    duplicationByLine.put(i,duplicatedLines.contains(i) ? 1 : 0);
  }
  ((DefaultMeasure<String>)context.<String>newMeasure().forMetric(CoreMetrics.DUPLICATION_LINES_DATA).onFile(inputFile).withValue(KeyValueFormat.format(duplicationByLine))).setFromCore().save();
  context.<Integer>newMeasure().forMetric(CoreMetrics.DUPLICATED_FILES).onFile(inputFile).withValue(1).save();
  context.<Integer>newMeasure().forMetric(CoreMetrics.DUPLICATED_LINES).onFile(inputFile).withValue(duplicatedLines.size()).save();
  context.<Integer>newMeasure().forMetric(CoreMetrics.DUPLICATED_BLOCKS).onFile(inputFile).withValue(duplicatedBlocks).save();
  DuplicationBuilder builder=context.duplicationBuilder(inputFile);
  for (  CloneGroup duplication : duplications) {
    builder.originBlock(duplication.getOriginPart().getStartLine(),duplication.getOriginPart().getEndLine());
    for (    ClonePart part : duplication.getCloneParts()) {
      if (!part.equals(duplication.getOriginPart())) {
        ((DefaultDuplicationBuilder)builder).isDuplicatedBy(part.getResourceId(),part.getStartLine(),part.getEndLine());
      }
    }
  }
  context.saveDuplications(inputFile,builder.build());
}
