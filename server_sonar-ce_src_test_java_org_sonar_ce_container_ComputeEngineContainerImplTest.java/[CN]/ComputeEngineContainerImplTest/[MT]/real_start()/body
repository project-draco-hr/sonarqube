{
  Properties properties=ProcessProperties.defaults();
  File homeDir=tempFolder.newFolder();
  File dataDir=new File(homeDir,"data");
  File tmpDir=new File(homeDir,"tmp");
  properties.setProperty(PATH_HOME,homeDir.getAbsolutePath());
  properties.setProperty(PATH_DATA,dataDir.getAbsolutePath());
  properties.setProperty(PATH_TEMP,tmpDir.getAbsolutePath());
  properties.setProperty(PROPERTY_PROCESS_INDEX,valueOf(ProcessId.COMPUTE_ENGINE.getIpcIndex()));
  properties.setProperty(PROPERTY_SHARED_PATH,tmpDir.getAbsolutePath());
  properties.setProperty(DatabaseProperties.PROP_URL,((BasicDataSource)dbTester.database().getDataSource()).getUrl());
  properties.setProperty(DatabaseProperties.PROP_USER,"sonar");
  properties.setProperty(DatabaseProperties.PROP_PASSWORD,"sonar");
  insertProperty(CoreProperties.SERVER_ID,"a_startup_id");
  insertProperty(CoreProperties.SERVER_STARTTIME,DateUtils.formatDateTime(new Date()));
  underTest.start(new Props(properties));
  MutablePicoContainer picoContainer=underTest.getComponentContainer().getPicoContainer();
  assertThat(picoContainer.getComponentAdapters()).hasSize(CONTAINER_ITSELF + 74 + 4+ 3+ 5+ 4+ 4);
  assertThat(picoContainer.getParent().getComponentAdapters()).hasSize(CONTAINER_ITSELF + 4);
  assertThat(picoContainer.getParent().getParent().getComponentAdapters()).hasSize(CONTAINER_ITSELF + 14);
  assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize(COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION + 24 + 50+ 2+ 61+ 1);
  assertThat(picoContainer.getParent().getParent().getParent().getParent()).isNull();
  underTest.stop();
  assertThat(picoContainer.getLifecycleState().isStarted()).isFalse();
  assertThat(picoContainer.getLifecycleState().isStopped()).isFalse();
  assertThat(picoContainer.getLifecycleState().isDisposed()).isTrue();
}
