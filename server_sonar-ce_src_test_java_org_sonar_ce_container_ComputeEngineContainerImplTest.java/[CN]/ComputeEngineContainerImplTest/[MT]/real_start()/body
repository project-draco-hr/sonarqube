{
  Properties properties=new Properties();
  File homeDir=tempFolder.newFolder();
  File dataDir=new File(homeDir,"data");
  File tmpDir=new File(homeDir,"tmp");
  properties.setProperty(ProcessProperties.PATH_HOME,homeDir.getAbsolutePath());
  properties.setProperty(ProcessProperties.PATH_DATA,dataDir.getAbsolutePath());
  properties.setProperty(ProcessProperties.PATH_TEMP,tmpDir.getAbsolutePath());
  String url=((BasicDataSource)dbTester.database().getDataSource()).getUrl();
  properties.setProperty(DatabaseProperties.PROP_URL,url);
  properties.setProperty(DatabaseProperties.PROP_USER,"sonar");
  properties.setProperty(DatabaseProperties.PROP_PASSWORD,"sonar");
  underTest.start(new Props(properties));
  MutablePicoContainer picoContainer=underTest.getComponentContainer().getPicoContainer();
  assertThat(picoContainer.getComponentAdapters()).hasSize(CONTAINER_ITSELF + 77 + 5+ 7+ 4+ 4);
  assertThat(picoContainer.getParent().getComponentAdapters()).hasSize(CONTAINER_ITSELF + 2);
  assertThat(picoContainer.getParent().getParent().getComponentAdapters()).hasSize(CONTAINER_ITSELF + 10);
  assertThat(picoContainer.getParent().getParent().getParent().getComponentAdapters()).hasSize(COMPONENTS_IN_LEVEL_1_AT_CONSTRUCTION + 22 + 47+ 1+ 58+ 1);
  assertThat(picoContainer.getParent().getParent().getParent().getParent()).isNull();
  underTest.stop();
  assertThat(picoContainer.getLifecycleState().isStarted()).isFalse();
  assertThat(picoContainer.getLifecycleState().isStopped()).isFalse();
  assertThat(picoContainer.getLifecycleState().isDisposed()).isTrue();
}
