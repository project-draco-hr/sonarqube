{
  Matcher matcher;
  if ((matcher=LINE_PATTERN.matcher(line)).find()) {
    String lineNumberStr=matcher.group(1);
    lineNumber=Integer.parseInt(lineNumberStr);
    insideCommitSection=false;
    insideMergedSection=false;
  }
 else   if (line.contains("<commit") && !insideMergedSection) {
    insideCommitSection=true;
  }
 else   if (line.contains("<merged")) {
    insideMergedSection=true;
    insideCommitSection=false;
  }
 else   if ((matcher=REVISION_PATTERN.matcher(line)).find()) {
    if (insideCommitSection) {
      committerRevision=matcher.group(1);
    }
 else     if (insideMergedSection) {
      authorRevision=matcher.group(1);
    }
  }
 else   if ((matcher=AUTHOR_PATTERN.matcher(line)).find()) {
    if (insideCommitSection) {
      committer=matcher.group(1);
    }
 else     if (insideMergedSection) {
      author=matcher.group(1);
    }
  }
 else   if ((matcher=DATE_PATTERN.matcher(line)).find()) {
    String date=matcher.group(1);
    String time=matcher.group(2);
    Date dateTime=parseDateTime(date + " " + time);
    if (insideCommitSection) {
      committerDate=dateTime;
    }
 else     if (insideMergedSection) {
      authorDate=dateTime;
    }
  }
 else   if (line.contains("</entry>")) {
    if (authorRevision != null) {
      lines.add(new BlameLine().revision(authorRevision).author(author).date(authorDate));
    }
 else     if (committerRevision != null) {
      lines.add(new BlameLine().revision(committerRevision).author(committer).date(committerDate));
    }
 else {
      throw new IllegalStateException("Unable to blame file " + filename + ". No blame info at line "+ lineNumber+ ". Is file commited?");
    }
    insideCommitSection=false;
    insideMergedSection=false;
    author=null;
    committer=null;
    committerRevision=null;
    authorRevision=null;
  }
}
