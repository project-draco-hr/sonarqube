{
  List<ActiveRuleDto> activeRules=db.activeRuleDao().selectByProfileKey(dbSession,profileKey);
  assertThat(activeRules).hasSize(1);
  ActiveRuleDto activeRule=activeRules.get(0);
  assertThat(activeRule.getSeverityString()).isEqualTo(expectedSeverity);
  assertThat(activeRule.getInheritance()).isEqualTo(expectedInheritance);
  ActiveRuleDto activeRuleDto=db.activeRuleDao().selectOrFailByKey(dbSession,activeRule.getKey());
  List<ActiveRuleParamDto> params=db.activeRuleDao().selectParamsByActiveRuleId(dbSession,activeRuleDto.getId());
  assertThat(params).hasSize(expectedParams.size());
  Map<String,ActiveRuleParamDto> paramsByKey=ActiveRuleParamDto.groupByKey(params);
  for (  Map.Entry<String,String> entry : expectedParams.entrySet()) {
    String value=paramsByKey.get(entry.getKey()).getValue();
    assertThat(value).isEqualTo(entry.getValue());
  }
  assertThat(tester.get(RuleIndex.class).searchAll(new RuleQuery().setQProfileKey(profileKey).setActivation(true))).hasSize(1);
}
