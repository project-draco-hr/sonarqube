{
  return ImmutableList.of(PropertyDefinition.builder(PATTERNS_MULTICRITERIA_EXCLUSION_KEY).category(CoreProperties.CATEGORY_EXCLUSIONS).subCategory(SUB_CATEGORY_IGNORE_ISSUES).name("Ignore Issues on Multiple Criteria").description("Patterns to ignore issues on certain components and for certain coding rules." + PROPERTY_RULE_KEY_PATTERN_HELP).onQualifiers(Qualifiers.PROJECT).index(3).fields(PropertyFieldDefinition.build(RULE_KEY).name(PROPERTY_RULE_KEY_PATTERN).description("Pattern to match rules which should be ignored.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build(),PropertyFieldDefinition.build(RESOURCE_KEY).name(PROPERTY_FILE_PATH_PATTERN).description("Pattern to match files which should be ignored.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build()).build(),PropertyDefinition.builder(PATTERNS_BLOCK_KEY).category(CoreProperties.CATEGORY_EXCLUSIONS).subCategory(SUB_CATEGORY_IGNORE_ISSUES).name("Ignore Issues in Blocks").description("Patterns to ignore all issues on specific blocks of code, while continuing to scan and mark issues on the remainder of the file.").onQualifiers(Qualifiers.PROJECT).index(2).fields(PropertyFieldDefinition.build(BEGIN_BLOCK_REGEXP).name("Regular Expression for Start of Block").description("If this regular expression is found in a file, then following lines are ignored until end of block.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build(),PropertyFieldDefinition.build(END_BLOCK_REGEXP).name("Regular Expression for End of Block").description("If specified, this regular expression is used to determine the end of code blocks to ignore. If not, then block ends at the end of file.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build()).build(),PropertyDefinition.builder(PATTERNS_ALLFILE_KEY).category(CoreProperties.CATEGORY_EXCLUSIONS).subCategory(SUB_CATEGORY_IGNORE_ISSUES).name("Ignore Issues on Files").description("Patterns to ignore all issues on files that contain a block of code matching a given regular expression.").onQualifiers(Qualifiers.PROJECT).index(1).fields(PropertyFieldDefinition.build(FILE_REGEXP).name("Regular Expression").description("If this regular expression is found in a file, then the whole file is ignored.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build()).build(),PropertyDefinition.builder(PATTERNS_MULTICRITERIA_INCLUSION_KEY).category(CoreProperties.CATEGORY_EXCLUSIONS).subCategory(SUB_CATEGORY_IGNORE_ISSUES).name("Restrict Scope of Coding Rules").description("Patterns to restrict the application of a rule to only certain components, ignoring all others." + PROPERTY_RULE_KEY_PATTERN_HELP).onQualifiers(Qualifiers.PROJECT).index(4).fields(PropertyFieldDefinition.build(RULE_KEY).name(PROPERTY_RULE_KEY_PATTERN).description("Pattern used to match rules which should be restricted.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build(),PropertyFieldDefinition.build(RESOURCE_KEY).name(PROPERTY_FILE_PATH_PATTERN).description("Pattern used to match files to which the rules should be restricted.").type(PropertyType.STRING).indicativeSize(LARGE_SIZE).build()).build());
}
