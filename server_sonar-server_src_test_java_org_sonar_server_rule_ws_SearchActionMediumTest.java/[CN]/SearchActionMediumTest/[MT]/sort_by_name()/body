{
  ruleDao.insert(dbSession,RuleTesting.newXooX1().setName("Dodgy - Consider returning a zero length array rather than null "));
  ruleDao.insert(dbSession,RuleTesting.newXooX2().setName("Bad practice - Creates an empty zip file entry"));
  ruleDao.insert(dbSession,RuleTesting.newXooX3().setName("XPath rule"));
  dbSession.commit();
  ruleIndexer.index();
  WsTester.TestRequest request=tester.wsTester().newGetRequest(API_ENDPOINT,API_SEARCH_METHOD);
  request.setParam(WebService.Param.FIELDS,"");
  request.setParam(WebService.Param.SORT,"name");
  request.setParam(WebService.Param.ASCENDING,"true");
  WsTester.Result result=request.execute();
  result.assertJson("{\"total\":3,\"p\":1,\"ps\":100,\"rules\":[{\"key\":\"xoo:x2\"},{\"key\":\"xoo:x1\"},{\"key\":\"xoo:x3\"}]}");
  request=tester.wsTester().newGetRequest(API_ENDPOINT,API_SEARCH_METHOD);
  request.setParam(WebService.Param.FIELDS,"");
  request.setParam(WebService.Param.SORT,RuleNormalizer.RuleField.NAME.field());
  request.setParam(WebService.Param.ASCENDING,"false");
  result=request.execute();
  result.assertJson("{\"total\":3,\"p\":1,\"ps\":100,\"rules\":[{\"key\":\"xoo:x3\"},{\"key\":\"xoo:x1\"},{\"key\":\"xoo:x2\"}]}");
}
