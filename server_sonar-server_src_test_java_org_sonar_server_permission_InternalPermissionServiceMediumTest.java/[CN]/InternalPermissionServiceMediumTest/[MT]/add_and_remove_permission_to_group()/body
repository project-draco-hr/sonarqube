{
  userSessionRule.login("admin").addProjectPermissions(UserRole.ADMIN,project.key());
  GroupDto group=new GroupDto().setName("group1");
  db.groupDao().insert(session,group);
  session.commit();
  assertThat(tester.get(RoleDao.class).selectGroupPermissions(session,group.getName(),project.getId())).isEmpty();
  PermissionChange change=new PermissionChange().setPermission(UserRole.USER).setGroup(group.getName()).setComponentKey(project.key());
  service.addPermission(change);
  session.commit();
  assertThat(tester.get(RoleDao.class).selectGroupPermissions(session,group.getName(),project.getId())).hasSize(1);
  assertThat(countIssueAuthorizationDocs()).isEqualTo(1);
  service.removePermission(change);
  session.commit();
  assertThat(tester.get(RoleDao.class).selectGroupPermissions(session,group.getName(),project.getId())).hasSize(0);
  SearchResponse docs=getAllIndexDocs();
  assertThat(docs.getHits().getTotalHits()).isEqualTo(1L);
  SearchHit doc=docs.getHits().getAt(0);
  assertThat((Collection)doc.sourceAsMap().get(IssueIndexDefinition.FIELD_AUTHORIZATION_USERS)).hasSize(0);
  assertThat((Collection)doc.sourceAsMap().get(IssueIndexDefinition.FIELD_AUTHORIZATION_GROUPS)).hasSize(0);
}
