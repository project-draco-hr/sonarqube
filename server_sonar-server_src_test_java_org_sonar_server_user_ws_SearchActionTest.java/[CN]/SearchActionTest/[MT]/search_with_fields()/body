{
  loginAsSimpleUser();
  injectUsers(1);
  assertThat(ws.newGetRequest("api/users","search").execute().outputAsString()).contains("login").contains("name").contains("email").contains("scmAccounts").doesNotContain("groups");
  assertThat(ws.newGetRequest("api/users","search").setParam(Param.FIELDS,"").execute().outputAsString()).contains("login").contains("name").contains("email").contains("scmAccounts").doesNotContain("groups");
  assertThat(ws.newGetRequest("api/users","search").setParam(Param.FIELDS,"scmAccounts").execute().outputAsString()).contains("login").doesNotContain("name").doesNotContain("email").contains("scmAccounts").doesNotContain("groups");
  assertThat(ws.newGetRequest("api/users","search").setParam(Param.FIELDS,"groups").execute().outputAsString()).contains("login").doesNotContain("name").doesNotContain("email").doesNotContain("scmAccounts").doesNotContain("groups");
  loginAsAdmin();
  assertThat(ws.newGetRequest("api/users","search").execute().outputAsString()).contains("login").contains("name").contains("email").contains("scmAccounts").contains("groups");
  assertThat(ws.newGetRequest("api/users","search").setParam(Param.FIELDS,"groups").execute().outputAsString()).contains("login").doesNotContain("name").doesNotContain("email").doesNotContain("scmAccounts").contains("groups");
}
