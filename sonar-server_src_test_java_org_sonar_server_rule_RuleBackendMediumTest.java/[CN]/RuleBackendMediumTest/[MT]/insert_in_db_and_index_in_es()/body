{
  RuleDto ruleDto=RuleTesting.newXooX1();
  dao.insert(dbSession,ruleDto);
  dbSession.commit();
  RuleDto persistedDto=dao.getNullableByKey(dbSession,RuleTesting.XOO_X1);
  assertThat(persistedDto).isNotNull();
  assertThat(persistedDto.getId()).isGreaterThanOrEqualTo(0);
  assertThat(persistedDto.getRuleKey()).isEqualTo(ruleDto.getRuleKey());
  assertThat(persistedDto.getLanguage()).isEqualTo(ruleDto.getLanguage());
  assertThat(persistedDto.getCreatedAt()).isNotNull();
  assertThat(persistedDto.getUpdatedAt()).isNotNull();
  Rule hit=index.getByKey(RuleTesting.XOO_X1);
  assertThat(hit).isNotNull();
  assertThat(hit.key().repository()).isEqualTo(ruleDto.getRepositoryKey());
  assertThat(hit.key().rule()).isEqualTo(ruleDto.getRuleKey());
  assertThat(hit.language()).isEqualTo(ruleDto.getLanguage());
  assertThat(hit.name()).isEqualTo(ruleDto.getName());
  assertThat(hit.htmlDescription()).isEqualTo(ruleDto.getDescription());
  assertThat(hit.status()).isEqualTo(RuleStatus.READY);
  assertThat(hit.createdAt()).isNotNull();
  assertThat(hit.updatedAt()).isNotNull();
  assertThat(hit.internalKey()).isEqualTo(ruleDto.getConfigKey());
  assertThat(hit.severity()).isEqualTo(ruleDto.getSeverityString());
  assertThat(hit.isTemplate()).isFalse();
  assertThat(hit.effortToFixDescription()).isEqualTo(ruleDto.getEffortToFixDescription());
}
