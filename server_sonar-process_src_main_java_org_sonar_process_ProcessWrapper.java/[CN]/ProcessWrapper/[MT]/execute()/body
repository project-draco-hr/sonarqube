{
  List<String> command=new ArrayList<String>();
  command.add(buildJavaCommand());
  command.addAll(javaOpts);
  command.addAll(buildJMXOptions());
  command.addAll(buildClasspath());
  command.add(className);
  command.add(buildPropertiesFile().getAbsolutePath());
  ProcessBuilder processBuilder=new ProcessBuilder();
  processBuilder.command(command);
  processBuilder.directory(workDir);
  processBuilder.environment().putAll(envProperties);
  try {
    LOGGER.debug("ProcessWrapper::executeProcess() -- Starting process with command '{}'",StringUtils.join(command," "));
    process=processBuilder.start();
    LOGGER.debug("ProcessWrapper::executeProcess() -- Process started: {}",process.toString());
    errorGobbler=new StreamGobbler(process.getErrorStream(),this.getName() + "-ERROR");
    outputGobbler=new StreamGobbler(process.getInputStream(),this.getName());
    outputGobbler.start();
    errorGobbler.start();
    processMXBean=waitForJMX();
    return this;
  }
 catch (  IOException e) {
    throw new IllegalStateException("Fail to start process: " + StringUtils.join(command," "),e);
  }
}
