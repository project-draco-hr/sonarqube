{
  LOGGER.info("ProcessWrapper::executeProcess() START");
  ProcessBuilder processBuilder=new ProcessBuilder();
  processBuilder.command().add(getJavaCommand());
  if (!StringUtils.isEmpty(javaOpts)) {
    processBuilder.command().add(javaOpts);
  }
  processBuilder.command().addAll(getJMXOptions());
  processBuilder.command().addAll(getClassPath());
  processBuilder.command().add(className);
  processBuilder.command().add(getPropertyFile());
  File workDirectory=new File(workDir);
  if (!workDirectory.exists()) {
    throw new IllegalStateException("Work directory does not exist.");
  }
 else {
    processBuilder.directory(FileUtils.getFile(workDir));
  }
  try {
    LOGGER.debug("ProcessWrapper::executeProcess() -- Starting process with command '{}'",StringUtils.join(processBuilder.command()," "));
    java.lang.Process process=processBuilder.start();
    LOGGER.debug("ProcessWrapper::executeProcess() -- Process started: {}",process.toString());
    errorGobbler=new StreamGobbler(process.getErrorStream(),this.getName() + "-ERROR");
    outputGobbler=new StreamGobbler(process.getInputStream(),this.getName());
    outputGobbler.start();
    errorGobbler.start();
    LOGGER.trace("ProcessWrapper::executeProcess() END");
    return process;
  }
 catch (  IOException e) {
    throw new IllegalStateException("Io Exception in ProcessWrapper",e);
  }
}
