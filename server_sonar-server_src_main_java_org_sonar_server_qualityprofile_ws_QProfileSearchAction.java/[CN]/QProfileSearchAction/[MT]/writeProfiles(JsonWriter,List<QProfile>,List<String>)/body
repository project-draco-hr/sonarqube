{
  Map<String,QProfile> profilesByKey=Maps.uniqueIndex(profiles,new NonNullInputFunction<QProfile,String>(){
    @Override protected String doApply(    QProfile input){
      return input.key();
    }
  }
);
  Map<String,Long> activeRuleCountByKey=profileLoader.countAllActiveRules();
  json.name("profiles").beginArray();
  for (  QProfile profile : profiles) {
    if (languages.get(profile.language()) == null) {
      continue;
    }
    String key=profile.key();
    Long activeRuleCount=activeRuleCountByKey.containsKey(key) ? activeRuleCountByKey.get(key) : 0L;
    json.beginObject().prop(FIELD_KEY,nullUnlessNeeded(FIELD_KEY,key,fields)).prop(FIELD_NAME,nullUnlessNeeded(FIELD_NAME,profile.name(),fields)).prop(FIELD_ACTIVE_RULE_COUNT,nullUnlessNeeded(FIELD_ACTIVE_RULE_COUNT,activeRuleCount,fields));
    writeLanguageFields(json,profile,fields);
    writeParentFields(json,profile,fields,profilesByKey);
    if (fieldIsNeeded(FIELD_IS_INHERITED,fields)) {
      json.prop(FIELD_IS_INHERITED,profile.isInherited());
    }
    if (fieldIsNeeded(FIELD_IS_DEFAULT,fields)) {
      json.prop(FIELD_IS_DEFAULT,profile.isDefault());
    }
    json.endObject();
  }
  json.endArray();
}
