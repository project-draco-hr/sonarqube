{
  List<ActiveRuleChange> changes=Lists.newArrayList();
  RuleActivatorContext context=contextFactory.create(key.qProfile(),key.ruleKey(),dbSession);
  ActiveRuleChange change;
  if (context.activeRule() == null) {
    return changes;
  }
  if (!force && !isCascade && context.activeRule().getInheritance() != null) {
    throw new BadRequestException("Cannot deactivate inherited rule '" + key.ruleKey() + "'");
  }
  change=ActiveRuleChange.createFor(ActiveRuleChange.Type.DEACTIVATED,key);
  changes.add(change);
  persist(change,context,dbSession);
  List<QualityProfileDto> profiles=db.qualityProfileDao().findChildren(dbSession,key.qProfile());
  for (  QualityProfileDto profile : profiles) {
    ActiveRuleKey activeRuleKey=ActiveRuleKey.of(profile.getKey(),key.ruleKey());
    changes.addAll(cascadeDeactivation(activeRuleKey,dbSession,true,force));
  }
  if (!changes.isEmpty()) {
    updateProfileDate(dbSession,context);
    previewCache.reportGlobalModification(dbSession);
  }
  return changes;
}
