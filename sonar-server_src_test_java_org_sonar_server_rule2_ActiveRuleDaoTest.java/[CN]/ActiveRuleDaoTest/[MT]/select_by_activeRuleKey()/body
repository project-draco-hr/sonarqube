{
  QualityProfileDto qdto=new QualityProfileDto().setName("name").setLanguage("lang");
  qDao.insert(qdto);
  RuleDto rdto=new RuleDto().setRuleKey("ruleKey").setRepositoryKey("repositoryKey");
  ruleDao.insert(rdto);
  ActiveRuleDto dto=new ActiveRuleDto().setProfileId(qdto.getId()).setRuleId(rdto.getId()).setSeverity(Severity.BLOCKER).setInheritance(null).setNoteData("text");
  dao.insert(dto);
  ActiveRuleDto newDto=dao.getByKey(ActiveRuleKey.of(QualityProfileKey.of(qdto.getName(),qdto.getLanguage()),RuleKey.of(rdto.getRepositoryKey(),rdto.getRuleKey())));
  assertThat(newDto.getKey()).isNotNull();
  assertThat(newDto.getKey().ruleKey()).isNotNull();
  assertThat(newDto.getKey().ruleKey().rule()).isEqualTo(rdto.getRuleKey());
  assertThat(newDto.getKey().ruleKey().repository()).isEqualTo(rdto.getRepositoryKey());
  assertThat(newDto.getKey().qProfile()).isNotNull();
  assertThat(newDto.getKey().qProfile().name()).isEqualTo(qdto.getName());
  assertThat(newDto.getKey().qProfile().lang()).isEqualTo(qdto.getLanguage());
  assertThat(newDto.getSeverityString()).isEqualTo(dto.getSeverityString());
  assertThat(newDto.getNoteData()).isEqualTo(dto.getNoteData());
}
