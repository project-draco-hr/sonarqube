{
  String projectKey=ResourceDictionary.getResourceKey();
  final List<Metric> metricsToGet=new ArrayList<Metric>();
  for (  SizeMetric size : SIZE_METRICS) {
    metricsToGet.add(size.getSizeMetric());
  }
  for (  Metric color : COLOR_METRICS) {
    metricsToGet.add(color);
  }
  if (projectKey != null) {
    cloudsPanel.add(new LoadingLabel());
    Query<Resources> resourcesQuery=ResourcesQuery.get(projectKey).setDepth(-1).setScopes(Resource.SCOPE_ENTITY).setMetrics(metricsToGet);
    QueryCallBack<Resources> resourcesCb=new BaseQueryCallback<Resources>(){
      public void onResponse(      Resources response,      JavaScriptObject jsonRawResponse){
        resources=response;
      }
    }
;
    Query<MetricsList> metrics=MetricsQuery.get().setUserManaged(false);
    QueryCallBack<MetricsList> metricsCb=new BaseQueryCallback<MetricsList>(){
      public void onResponse(      MetricsList response,      JavaScriptObject jsonRawResponse){
      }
    }
;
    metricsCb=WSMetrics.getUpdateMetricsFromServer(metricsCb);
    QueryCallBack<VoidResponse> updateCloudsCb=new BaseQueryCallback<VoidResponse>(){
      public void onResponse(      VoidResponse response,      JavaScriptObject jsonRawResponse){
        updateClouds(resources);
      }
    }
;
    SequentialQueries.get().add(resourcesQuery,resourcesCb).add(metrics,metricsCb).execute(updateCloudsCb);
  }
}
