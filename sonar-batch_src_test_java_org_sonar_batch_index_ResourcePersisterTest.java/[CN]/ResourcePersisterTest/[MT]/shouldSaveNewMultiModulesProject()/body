{
  setupData("shared");
  resourceCache.add(multiModuleProject,null).setSnapshot(persister.persist(null,multiModuleProject,null));
  resourceCache.add(moduleA,multiModuleProject).setSnapshot(persister.persist(null,moduleA,multiModuleProject));
  resourceCache.add(moduleB,multiModuleProject).setSnapshot(persister.persist(null,moduleB,multiModuleProject));
  resourceCache.add(moduleB1,moduleB).setSnapshot(persister.persist(null,moduleB1,moduleB));
  Resource file=File.create("src/main/java/org/Foo.java").setEffectiveKey("b1:src/main/java/org/Foo.java");
  file.getParent().setEffectiveKey("b1:src/main/java/org");
  resourceCache.add(file.getParent(),moduleB1).setSnapshot(persister.persist(moduleB1,file.getParent(),null));
  persister.persist(moduleB1,file,file.getParent());
  checkTables("shouldSaveNewMultiModulesProject",new String[]{"build_date","created_at","authorization_updated_at","uuid","project_uuid","module_uuid","module_uuid_path"},"projects","snapshots");
  enableSnapshot(1001);
  enableSnapshot(1002);
  enableSnapshot(1003);
  enableSnapshot(1004);
  enableSnapshot(1005);
  enableSnapshot(1006);
  try (SqlSession session=getMyBatis().openSession(false)){
    ComponentDto root=session.getMapper(ComponentMapper.class).selectByKey("root");
    assertThat(root.uuid()).isNotNull();
    assertThat(root.projectUuid()).isEqualTo(root.uuid());
    assertThat(root.moduleUuid()).isNull();
    assertThat(root.moduleUuidPath()).isEqualTo(".");
    ComponentDto a=session.getMapper(ComponentMapper.class).selectByKey("a");
    assertThat(a.uuid()).isNotNull();
    assertThat(a.projectUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuidPath()).isEqualTo("." + root.uuid() + ".");
    ComponentDto b=session.getMapper(ComponentMapper.class).selectByKey("b");
    assertThat(b.uuid()).isNotNull();
    assertThat(b.projectUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuidPath()).isEqualTo("." + root.uuid() + ".");
    ComponentDto b1=session.getMapper(ComponentMapper.class).selectByKey("b1");
    assertThat(b1.uuid()).isNotNull();
    assertThat(b1.projectUuid()).isEqualTo(root.uuid());
    assertThat(b1.moduleUuid()).isEqualTo(b.uuid());
    assertThat(b1.moduleUuidPath()).isEqualTo("." + root.uuid() + "."+ b.uuid()+ ".");
    ComponentDto dir=session.getMapper(ComponentMapper.class).selectByKey("b1:src/main/java/org");
    assertThat(dir.uuid()).isNotNull();
    assertThat(dir.projectUuid()).isEqualTo(root.uuid());
    assertThat(dir.moduleUuid()).isEqualTo(b1.uuid());
    assertThat(dir.moduleUuidPath()).isEqualTo("." + root.uuid() + "."+ b.uuid()+ "."+ b1.uuid()+ ".");
    ComponentDto fileComp=session.getMapper(ComponentMapper.class).selectByKey("b1:src/main/java/org/Foo.java");
    assertThat(fileComp.uuid()).isNotNull();
    assertThat(fileComp.projectUuid()).isEqualTo(root.uuid());
    assertThat(fileComp.moduleUuid()).isEqualTo(b1.uuid());
    assertThat(fileComp.moduleUuidPath()).isEqualTo("." + root.uuid() + "."+ b.uuid()+ "."+ b1.uuid()+ ".");
  }
 }
