{
  setupData("shared");
  java.io.File baseDir=temp.newFolder();
  when(projectTree.getRootProject()).thenReturn(multiModuleProject);
  when(projectTree.getProjectDefinition(multiModuleProject)).thenReturn(ProjectDefinition.create().setBaseDir(baseDir));
  when(projectTree.getProjectDefinition(moduleA)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleA")));
  when(projectTree.getProjectDefinition(moduleB)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleB")));
  when(projectTree.getProjectDefinition(moduleB1)).thenReturn(ProjectDefinition.create().setBaseDir(new java.io.File(baseDir,"moduleB/moduleB1")));
  DefaultIndex index=new DefaultIndex(resourceCache,null,null,projectTree,mock(MetricFinder.class),mock(ResourceKeyMigration.class),mock(MeasureCache.class));
  index.start();
  Resource file=File.create("src/main/java/org/Foo.java");
  index.setCurrentProject(moduleB1,null);
  index.index(file);
  index.addResource(new Library(moduleA.getKey(),"1.0"));
  persister.persist();
  checkTables("shouldSaveNewMultiModulesProjectAndLibrary",new String[]{"build_date","created_at","authorization_updated_at","uuid","project_uuid","module_uuid","module_uuid_path"},"projects","snapshots");
  enableSnapshot(1001);
  enableSnapshot(1002);
  enableSnapshot(1003);
  enableSnapshot(1004);
  enableSnapshot(1005);
  enableSnapshot(1006);
  try (SqlSession session=getMyBatis().openSession(false)){
    ComponentDto root=session.getMapper(ComponentMapper.class).selectByKey("root");
    System.out.println("Root: " + root.uuid());
    assertThat(root.uuid()).isNotNull();
    assertThat(root.projectUuid()).isEqualTo(root.uuid());
    assertThat(root.moduleUuid()).isNull();
    assertThat(root.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR);
    ComponentDto a=session.getMapper(ComponentMapper.class).selectByKey("a");
    System.out.println("A: " + a.uuid());
    assertThat(a.uuid()).isNotNull();
    assertThat(a.projectUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuid()).isEqualTo(root.uuid());
    assertThat(a.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR+ a.uuid()+ MODULE_UUID_PATH_SEPARATOR);
    ComponentDto b=session.getMapper(ComponentMapper.class).selectByKey("b");
    System.out.println("B: " + b.uuid());
    assertThat(b.uuid()).isNotNull();
    assertThat(b.projectUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuid()).isEqualTo(root.uuid());
    assertThat(b.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR+ b.uuid()+ MODULE_UUID_PATH_SEPARATOR);
    ComponentDto b1=session.getMapper(ComponentMapper.class).selectByKey("b1");
    System.out.println("B1: " + b1.uuid());
    assertThat(b1.uuid()).isNotNull();
    assertThat(b1.projectUuid()).isEqualTo(root.uuid());
    assertThat(b1.moduleUuid()).isEqualTo(b.uuid());
    assertThat(b1.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR+ b.uuid()+ MODULE_UUID_PATH_SEPARATOR+ b1.uuid()+ MODULE_UUID_PATH_SEPARATOR);
    ComponentDto dir=session.getMapper(ComponentMapper.class).selectByKey("b1:src/main/java/org");
    assertThat(dir.uuid()).isNotNull();
    assertThat(dir.projectUuid()).isEqualTo(root.uuid());
    assertThat(dir.moduleUuid()).isEqualTo(b1.uuid());
    assertThat(dir.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR+ b.uuid()+ MODULE_UUID_PATH_SEPARATOR+ b1.uuid()+ MODULE_UUID_PATH_SEPARATOR);
    ComponentDto fileComp=session.getMapper(ComponentMapper.class).selectByKey("b1:src/main/java/org/Foo.java");
    assertThat(fileComp.uuid()).isNotNull();
    assertThat(fileComp.projectUuid()).isEqualTo(root.uuid());
    assertThat(fileComp.moduleUuid()).isEqualTo(b1.uuid());
    assertThat(fileComp.moduleUuidPath()).isEqualTo(MODULE_UUID_PATH_SEPARATOR + root.uuid() + MODULE_UUID_PATH_SEPARATOR+ b.uuid()+ MODULE_UUID_PATH_SEPARATOR+ b1.uuid()+ MODULE_UUID_PATH_SEPARATOR);
  }
 }
