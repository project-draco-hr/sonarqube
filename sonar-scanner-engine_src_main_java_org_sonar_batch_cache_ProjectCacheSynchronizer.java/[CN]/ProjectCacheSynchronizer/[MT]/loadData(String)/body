{
  Profiler profiler=Profiler.create(Loggers.get(ProjectCacheSynchronizer.class));
  profiler.startInfo("Load rules");
  rulesLoader.load(null);
  profiler.stopInfo();
  profiler.startInfo("Load project settings");
  ProjectRepositories projectRepo=projectRepositoriesLoader.load(projectKey,true,null);
  if (!projectRepo.exists()) {
    LOG.debug("Project doesn't exist in the server");
  }
 else   if (projectRepo.lastAnalysisDate() == null) {
    LOG.debug("No previous analysis found");
  }
  profiler.stopInfo();
  profiler.startInfo("Load project quality profiles");
  Collection<QualityProfile> qProfiles;
  if (projectRepo.exists()) {
    qProfiles=qualityProfileLoader.load(projectKey,null,null);
  }
 else {
    qProfiles=qualityProfileLoader.loadDefault(null,null);
  }
  profiler.stopInfo();
  profiler.startInfo("Load project active rules");
  Collection<String> keys=getKeys(qProfiles);
  for (  String k : keys) {
    activeRulesLoader.load(k,null);
  }
  profiler.stopInfo();
  if (projectRepo.lastAnalysisDate() != null) {
    profiler.startInfo("Load server issues");
    UserLoginAccumulator consumer=new UserLoginAccumulator();
    issuesLoader.load(projectKey,consumer);
    profiler.stopInfo();
    profiler.startInfo("Load user information");
    for (    String login : consumer.loginSet) {
      userRepository.load(login,null);
    }
    profiler.stopInfo("Load user information");
  }
}
