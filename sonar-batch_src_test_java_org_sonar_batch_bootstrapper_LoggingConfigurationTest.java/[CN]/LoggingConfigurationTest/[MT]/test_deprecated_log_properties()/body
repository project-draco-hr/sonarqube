{
  Map<String,String> properties=Maps.newHashMap();
  assertThat(LoggingConfiguration.create(null).setProperties(properties).getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);
  properties.put("sonar.verbose","true");
  LoggingConfiguration conf=LoggingConfiguration.create(null).setProperties(properties);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_VERBOSE);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo("WARN");
  properties.put("sonar.verbose","false");
  conf=LoggingConfiguration.create(null).setProperties(properties);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo(LoggingConfiguration.LEVEL_ROOT_DEFAULT);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo("WARN");
  properties.put("sonar.verbose","false");
  properties.put("sonar.log.profilingLevel","FULL");
  conf=LoggingConfiguration.create(null).setProperties(properties);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo("DEBUG");
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo("TRACE");
  properties.put("sonar.verbose","false");
  properties.put("sonar.log.profilingLevel","BASIC");
  conf=LoggingConfiguration.create(null).setProperties(properties);
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_ROOT_LOGGER_LEVEL)).isEqualTo("DEBUG");
  assertThat(conf.getSubstitutionVariable(LoggingConfiguration.PROPERTY_SQL_LOGGER_LEVEL)).isEqualTo("WARN");
}
