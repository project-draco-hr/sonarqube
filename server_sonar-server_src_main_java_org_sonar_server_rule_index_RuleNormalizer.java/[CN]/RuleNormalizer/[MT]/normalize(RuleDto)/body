{
  List<UpdateRequest> requests=new ArrayList<UpdateRequest>();
  DbSession session=db.openSession(false);
  try {
    Map<String,Object> update=new HashMap<String,Object>();
    update.put(RuleField.ID.field(),rule.getId());
    update.put(RuleField.KEY.field(),rule.getKey().toString());
    update.put(RuleField._KEY.field(),ImmutableList.of(rule.getKey().repository(),rule.getKey().rule()));
    update.put(RuleField.REPOSITORY.field(),rule.getRepositoryKey());
    update.put(RuleField.RULE_KEY.field(),rule.getRuleKey());
    update.put(RuleField.NAME.field(),rule.getName());
    update.put(RuleField.CREATED_AT.field(),rule.getCreatedAt());
    update.put(RuleField.UPDATED_AT.field(),rule.getUpdatedAt());
    if (RuleDto.Format.HTML.equals(rule.getDescriptionFormat())) {
      update.put(RuleField.HTML_DESCRIPTION.field(),rule.getDescription());
      update.put(RuleField.MARKDOWN_DESCRIPTION.field(),null);
    }
 else {
      update.put(RuleField.HTML_DESCRIPTION.field(),rule.getDescription() == null ? null : Markdown.convertToHtml(rule.getDescription()));
      update.put(RuleField.MARKDOWN_DESCRIPTION.field(),rule.getDescription());
    }
    update.put(RuleField.FIX_DESCRIPTION.field(),rule.getEffortToFixDescription());
    update.put(RuleField.SEVERITY.field(),rule.getSeverityString());
    RuleStatus status=rule.getStatus();
    update.put(RuleField.STATUS.field(),status != null ? rule.getStatus().name() : null);
    update.put(RuleField.LANGUAGE.field(),rule.getLanguage());
    update.put(RuleField.INTERNAL_KEY.field(),rule.getConfigKey());
    update.put(RuleField.IS_TEMPLATE.field(),rule.isTemplate());
    update.put(RuleField.NOTE.field(),rule.getNoteData());
    update.put(RuleField.NOTE_LOGIN.field(),rule.getNoteUserLogin());
    update.put(RuleField.NOTE_CREATED_AT.field(),rule.getNoteCreatedAt());
    update.put(RuleField.NOTE_UPDATED_AT.field(),rule.getNoteUpdatedAt());
    Integer templateId=rule.getTemplateId();
    if (templateId != null) {
      RuleDto templateRule=db.ruleDao().getById(session,templateId);
      RuleKey templateKey=templateRule.getKey();
      update.put(RuleField.TEMPLATE_KEY.field(),templateKey != null ? templateKey.toString() : null);
    }
 else {
      update.put(RuleField.TEMPLATE_KEY.field(),null);
    }
    update.put(RuleField.CHARACTERISTIC.field(),null);
    update.put(RuleField.SUB_CHARACTERISTIC.field(),null);
    update.put(RuleField.DEFAULT_CHARACTERISTIC.field(),null);
    update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(),null);
    update.put(RuleField.DEFAULT_CHARACTERISTIC.field(),null);
    update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(),null);
    Integer defaultSubCharacteristicId=rule.getDefaultSubCharacteristicId();
    if (defaultSubCharacteristicId != null) {
      CharacteristicDto subCharacteristic=db.debtCharacteristicDao().selectById(defaultSubCharacteristicId,session);
      if (subCharacteristic != null) {
        Integer characteristicId=subCharacteristic.getParentId();
        if (characteristicId != null) {
          CharacteristicDto characteristic=db.debtCharacteristicDao().selectById(characteristicId);
          if (characteristic != null) {
            update.put(RuleField.DEFAULT_CHARACTERISTIC.field(),characteristic.getKey());
            update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(),subCharacteristic.getKey());
          }
        }
      }
    }
    Integer subCharacteristicId=rule.getSubCharacteristicId();
    if (subCharacteristicId != null) {
      if (subCharacteristicId.equals(-1)) {
        update.put(RuleField.CHARACTERISTIC.field(),DebtCharacteristic.NONE);
        update.put(RuleField.SUB_CHARACTERISTIC.field(),DebtCharacteristic.NONE);
      }
 else {
        CharacteristicDto subCharacteristic=db.debtCharacteristicDao().selectById(subCharacteristicId,session);
        if (subCharacteristic != null) {
          Integer characteristicId=subCharacteristic.getParentId();
          if (characteristicId != null) {
            CharacteristicDto characteristic=db.debtCharacteristicDao().selectById(characteristicId);
            if (characteristic != null) {
              update.put(RuleField.CHARACTERISTIC.field(),characteristic.getKey());
              update.put(RuleField.SUB_CHARACTERISTIC.field(),subCharacteristic.getKey());
            }
          }
        }
      }
    }
 else {
      update.put(RuleField.CHARACTERISTIC.field(),null);
      update.put(RuleField.SUB_CHARACTERISTIC.field(),null);
    }
    if (rule.getDefaultRemediationFunction() != null) {
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(),rule.getDefaultRemediationFunction());
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(),rule.getDefaultRemediationCoefficient());
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(),rule.getDefaultRemediationOffset());
    }
 else {
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(),null);
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(),null);
      update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(),null);
    }
    if (rule.getRemediationFunction() != null) {
      update.put(RuleField.DEBT_FUNCTION_TYPE.field(),rule.getRemediationFunction());
      update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(),rule.getRemediationCoefficient());
      update.put(RuleField.DEBT_FUNCTION_OFFSET.field(),rule.getRemediationOffset());
    }
 else {
      update.put(RuleField.DEBT_FUNCTION_TYPE.field(),null);
      update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(),null);
      update.put(RuleField.DEBT_FUNCTION_OFFSET.field(),null);
    }
    update.put(RuleField.TAGS.field(),rule.getTags());
    update.put(RuleField.SYSTEM_TAGS.field(),rule.getSystemTags());
    update.put(RuleField._TAGS.field(),Sets.union(rule.getSystemTags(),rule.getTags()));
    Map<String,Object> upsert=getUpsertFor(RuleField.ALL_FIELDS,update);
    upsert.put(RuleField.KEY.field(),rule.getKey().toString());
    requests.add(new UpdateRequest().replicationType(ReplicationType.ASYNC).consistencyLevel(WriteConsistencyLevel.QUORUM).id(rule.getKey().toString()).doc(update).upsert(upsert));
    for (    RuleParamDto param : db.ruleDao().findRuleParamsByRuleKey(session,rule.getKey())) {
      requests.addAll(normalizeNested(param,rule.getKey()));
    }
  }
  finally {
    session.close();
  }
  return requests;
}
