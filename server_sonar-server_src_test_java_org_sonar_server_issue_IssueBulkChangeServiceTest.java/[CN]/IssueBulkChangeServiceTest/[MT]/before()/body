{
  when(dbClient.openSession(false)).thenReturn(dbSession);
  when(dbClient.componentDao()).thenReturn(componentDao);
  rule=Rule.create("repo","key");
  when(ruleFinder.findByKeys(newHashSet(rule.ruleKey()))).thenReturn(newArrayList(rule));
  project=new ComponentDto().setId(1L).setKey("MyProject").setLongName("My Project").setQualifier(Qualifiers.PROJECT).setScope(Scopes.PROJECT);
  when(componentDao.getByKeys(dbSession,newHashSet(project.key()))).thenReturn(newArrayList(project));
  file=new ComponentDto().setId(2L).setProjectId_unit_test_only(project.getId()).setSubProjectId(project.getId()).setKey("MyComponent").setLongName("My Component");
  when(componentDao.getByKeys(dbSession,newHashSet(file.key()))).thenReturn(newArrayList(file));
  issue=new DefaultIssue().setKey("ABCD").setRuleKey(rule.ruleKey()).setProjectKey(project.key()).setComponentKey(file.key());
  when(issueService.search(anyListOf(String.class))).thenReturn(newArrayList((Issue)issue));
  actions=newArrayList();
  service=new IssueBulkChangeService(dbClient,issueService,issueStorage,ruleFinder,issueNotifications,actions,mock(PreviewCache.class));
}
