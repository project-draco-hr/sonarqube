{
  when(dbClient.openSession(false)).thenReturn(dbSession);
  when(dbClient.componentDao()).thenReturn(componentDao);
  when(dbClient.issueDao()).thenReturn(issueDao);
  rule=Rule.create("repo","key");
  when(ruleFinder.findByKeys(newHashSet(rule.ruleKey()))).thenReturn(newArrayList(rule));
  project=new ComponentDto().setId(1L).setKey("MyProject").setLongName("My Project").setQualifier(Qualifiers.PROJECT).setScope(Scopes.PROJECT);
  when(componentDao.getByKeys(dbSession,newHashSet(project.key()))).thenReturn(newArrayList(project));
  file=new ComponentDto().setId(2L).setProjectId_unit_test_only(project.getId()).setSubProjectId(project.getId()).setKey("MyComponent").setLongName("My Component");
  when(componentDao.getByKeys(dbSession,newHashSet(file.key()))).thenReturn(newArrayList(file));
  IssueDto issueDto=IssueTesting.newDto(RuleTesting.newDto(rule.ruleKey()).setId(50),file,project).setKee("ABCD");
  issue=issueDto.toDefaultIssue();
  org.sonar.server.search.Result<Issue> result=mock(org.sonar.server.search.Result.class);
  when(result.getHits()).thenReturn(newArrayList((Issue)issue));
  when(issueService.search(any(IssueQuery.class),any(QueryContext.class))).thenReturn(result);
  when(issueDao.getByKeys(dbSession,newArrayList(issue.key()))).thenReturn(newArrayList(issueDto));
  actions=newArrayList();
  service=new IssueBulkChangeService(dbClient,issueService,issueStorage,ruleFinder,issueNotifications,actions,mock(PreviewCache.class));
}
