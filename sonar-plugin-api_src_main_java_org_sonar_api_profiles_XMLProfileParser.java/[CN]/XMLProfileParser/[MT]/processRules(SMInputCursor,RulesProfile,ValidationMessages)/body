{
  Map<String,String> parameters=new HashMap<>();
  while (rulesCursor.getNext() != null) {
    SMInputCursor ruleCursor=rulesCursor.childElementCursor();
    String repositoryKey=null;
    String key=null;
    RulePriority priority=null;
    parameters.clear();
    while (ruleCursor.getNext() != null) {
      String nodeName=ruleCursor.getLocalName();
      if (StringUtils.equals("repositoryKey",nodeName)) {
        repositoryKey=StringUtils.trim(ruleCursor.collectDescendantText(false));
      }
 else       if (StringUtils.equals("key",nodeName)) {
        key=StringUtils.trim(ruleCursor.collectDescendantText(false));
      }
 else       if (StringUtils.equals("priority",nodeName)) {
        priority=RulePriority.valueOf(StringUtils.trim(ruleCursor.collectDescendantText(false)));
      }
 else       if (StringUtils.equals("parameters",nodeName)) {
        SMInputCursor propsCursor=ruleCursor.childElementCursor("parameter");
        processParameters(propsCursor,parameters);
      }
    }
    Rule rule=ruleFinder.findByKey(repositoryKey,key);
    if (rule == null) {
      messages.addWarningText("Rule not found: " + ruleToString(repositoryKey,key));
    }
 else {
      ActiveRule activeRule=profile.activateRule(rule,priority);
      for (      Map.Entry<String,String> entry : parameters.entrySet()) {
        if (rule.getParam(entry.getKey()) == null) {
          messages.addWarningText("The parameter '" + entry.getKey() + "' does not exist in the rule: "+ ruleToString(repositoryKey,key));
        }
 else {
          activeRule.setParameter(entry.getKey(),entry.getValue());
        }
      }
    }
  }
}
