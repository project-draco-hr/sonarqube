{
  return new Iterator(){
    private int index=1;
    private int lastReturnedIndex=-1;
    public boolean hasNext(){
      return index <= m_size;
    }
    public Object next(){
      if (!hasNext())       throw new NoSuchElementException();
      lastReturnedIndex=index;
      index++;
      return m_elements[lastReturnedIndex];
    }
    public void remove(){
      if (lastReturnedIndex == -1) {
        throw new IllegalStateException();
      }
      m_elements[lastReturnedIndex]=m_elements[m_size];
      m_elements[m_size]=null;
      m_size--;
      if (m_size != 0 && lastReturnedIndex <= m_size) {
        int compareToParent=0;
        if (lastReturnedIndex > 1) {
          compareToParent=compare(m_elements[lastReturnedIndex],m_elements[lastReturnedIndex / 2]);
        }
        if (m_isMinHeap) {
          if (lastReturnedIndex > 1 && compareToParent < 0) {
            percolateUpMinHeap(lastReturnedIndex);
          }
 else {
            percolateDownMinHeap(lastReturnedIndex);
          }
        }
 else {
          if (lastReturnedIndex > 1 && compareToParent > 0) {
            percolateUpMaxHeap(lastReturnedIndex);
          }
 else {
            percolateDownMaxHeap(lastReturnedIndex);
          }
        }
      }
      index--;
      lastReturnedIndex=-1;
    }
  }
;
}
