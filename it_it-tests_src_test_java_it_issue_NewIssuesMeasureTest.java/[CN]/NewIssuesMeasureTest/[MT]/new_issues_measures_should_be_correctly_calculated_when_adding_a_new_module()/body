{
  ORCHESTRATOR.getServer().provisionProject("com.sonarsource.it.samples:multi-modules-sample","com.sonarsource.it.samples:multi-modules-sample");
  ORCHESTRATOR.getServer().restoreProfile(FileLocation.ofClasspath("/issue/NewIssuesMeasureTest/profile1.xml"));
  ORCHESTRATOR.getServer().associateProjectToQualityProfile("com.sonarsource.it.samples:multi-modules-sample","xoo","profile1");
  ORCHESTRATOR.executeBuild(SonarRunner.create(projectDir("shared/xoo-multi-modules-sample")).setProperties("sonar.modules","module_a"));
  ORCHESTRATOR.getServer().restoreProfile(FileLocation.ofClasspath("/issue/NewIssuesMeasureTest/profile2.xml"));
  ORCHESTRATOR.getServer().associateProjectToQualityProfile("com.sonarsource.it.samples:multi-modules-sample","xoo","profile2");
  ORCHESTRATOR.executeBuild(SonarRunner.create(projectDir("shared/xoo-multi-modules-sample")));
  Resource project=ORCHESTRATOR.getServer().getWsClient().find(ResourceQuery.createForMetrics("com.sonarsource.it.samples:multi-modules-sample","new_violations","violations").setIncludeTrends(true));
  List<Measure> measures=project.getMeasures();
  Measure newIssues=find(measures,"new_violations");
  assertThat(newIssues.getVariation1().intValue()).isEqualTo(65);
}
