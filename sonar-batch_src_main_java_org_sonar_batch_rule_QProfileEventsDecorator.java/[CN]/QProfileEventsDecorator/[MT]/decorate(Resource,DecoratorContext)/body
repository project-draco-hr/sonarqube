{
  if (!Qualifiers.isProject(resource,true)) {
    return;
  }
  Measure previousMeasure=getPreviousMeasure(resource,CoreMetrics.QUALITY_PROFILES);
  if (previousMeasure == null || previousMeasure.getData() == null) {
    return;
  }
  Map<String,QProfile> previousProfiles=UsedQProfiles.fromJson(previousMeasure.getData()).profilesByKey();
  Measure currentMeasure=context.getMeasure(CoreMetrics.QUALITY_PROFILES);
  Map<String,QProfile> currentProfiles=UsedQProfiles.fromJson(currentMeasure.getData()).profilesByKey();
  for (  QProfile profile : currentProfiles.values()) {
    QProfile previousProfile=previousProfiles.get(profile.getKey());
    if (previousProfile != null) {
      if (profile.getRulesUpdatedAt().after(previousProfile.getRulesUpdatedAt())) {
        markAsUsed(context,profile);
      }
    }
 else {
      markAsUsed(context,profile);
    }
  }
  for (  QProfile previousProfile : previousProfiles.values()) {
    if (!currentProfiles.containsKey(previousProfile.getKey())) {
      markAsUnused(context,previousProfile);
    }
  }
}
