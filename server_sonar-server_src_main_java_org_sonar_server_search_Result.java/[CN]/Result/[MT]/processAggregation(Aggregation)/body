{
  if (Missing.class.isAssignableFrom(aggregation.getClass())) {
    Missing missing=(Missing)aggregation;
    long docCount=missing.getDocCount();
    if (docCount > 0L) {
      this.facets.put(aggregation.getName().replace("_missing",""),new FacetValue("",docCount));
    }
  }
 else   if (Terms.class.isAssignableFrom(aggregation.getClass())) {
    Terms termAggregation=(Terms)aggregation;
    for (    Terms.Bucket value : termAggregation.getBuckets()) {
      String facetName=aggregation.getName().replace("_selected","");
      if (aggregation.getName().contains("__")) {
        facetName=facetName.substring(0,facetName.indexOf("__"));
      }
      this.facets.put(facetName,new FacetValue(value.getKey(),value.getDocCount()));
    }
  }
 else   if (HasAggregations.class.isAssignableFrom(aggregation.getClass())) {
    HasAggregations hasAggregations=(HasAggregations)aggregation;
    for (    Aggregation internalAggregation : hasAggregations.getAggregations()) {
      this.processAggregation(internalAggregation);
    }
  }
 else {
    LOGGER.warn("Cannot process {} type of aggregation",aggregation.getClass());
  }
}
