{
  Assertions.assertThat(finder.findById(1).getId()).isEqualTo(1);
  Assertions.assertThat(finder.findById(3).getConfigKey()).isEqualTo("Checker/Treewalker/AnnotationUseStyleCheck");
  Assertions.assertThat(finder.findById(2)).isNull();
  assertThat(finder.findByIds(newArrayList(2,3))).hasSize(1);
  Rule rule=finder.findByKey("checkstyle","com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck");
  Assertions.assertThat(rule).isNotNull();
  Assertions.assertThat(rule.getKey()).isEqualTo(("com.puppycrawl.tools.checkstyle.checks.header.HeaderCheck"));
  Assertions.assertThat(rule.isEnabled()).isTrue();
  Assertions.assertThat(finder.findByKey("checkstyle","unknown")).isNull();
  Assertions.assertThat(finder.find(RuleQuery.create().withRepositoryKey("checkstyle").withConfigKey("unknown"))).isNull();
  Assertions.assertThat(finder.findAll(RuleQuery.create().withRepositoryKey("checkstyle"))).hasSize(2);
  Assertions.assertThat(finder.findAll(RuleQuery.create())).hasSize(3);
  Assertions.assertThat(finder.findByKey("checkstyle","DisabledCheck")).isNull();
  Assertions.assertThat(finder.findAll(RuleQuery.create().withRepositoryKey("unknown_repository"))).isEmpty();
  tester.clearDbAndIndexes();
  assertThat(finder.findByIds(Collections.<Integer>emptyList())).isEmpty();
}
