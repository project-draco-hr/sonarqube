{
  grantPermission();
  insertDebtCharacteristics(dbSession);
  db.ruleDao().insert(dbSession,RuleTesting.newDto(RULE_KEY).setDefaultSubCharacteristicId(hardReliabilityId).setDefaultRemediationFunction(DebtRemediationFunction.Type.LINEAR.name()).setDefaultRemediationCoefficient("1d").setDefaultRemediationOffset("5min").setRemediationFunction(null).setRemediationCoefficient(null).setRemediationOffset(null));
  dbSession.commit();
  DefaultDebtRemediationFunction fn=new DefaultDebtRemediationFunction(DebtRemediationFunction.Type.CONSTANT_ISSUE,null,"1min");
  RuleUpdate update=new RuleUpdate(RULE_KEY).setDebtSubCharacteristic("SOFT_RELIABILITY").setDebtRemediationFunction(fn);
  updater.update(update,UserSession.get());
  dbSession.clearCache();
  RuleDto rule=db.ruleDao().getByKey(dbSession,RULE_KEY);
  assertThat(rule.getSubCharacteristicId()).isEqualTo(softReliabilityId);
  assertThat(rule.getRemediationFunction()).isEqualTo(DebtRemediationFunction.Type.CONSTANT_ISSUE.name());
  assertThat(rule.getRemediationCoefficient()).isNull();
  assertThat(rule.getRemediationOffset()).isEqualTo("1min");
  Rule indexedRule=tester.get(RuleIndex.class).getByKey(RULE_KEY);
  assertThat(indexedRule.debtCharacteristicKey()).isEqualTo("RELIABILITY");
  assertThat(indexedRule.debtSubCharacteristicKey()).isEqualTo("SOFT_RELIABILITY");
  assertThat(indexedRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.CONSTANT_ISSUE);
  assertThat(indexedRule.debtRemediationFunction().coefficient()).isNull();
  assertThat(indexedRule.debtRemediationFunction().offset()).isEqualTo("1min");
}
