{
  String fileKey=request.mandatoryParam(PARAM_KEY);
  UserSession userSession=UserSession.get();
  JsonWriter json=response.newJsonWriter();
  json.beginObject();
  DbSession session=dbClient.openSession(false);
  try {
    ComponentDto component=dbClient.componentDao().getNullableByKey(session,fileKey);
    if (component == null) {
      throw new NotFoundException(String.format("Component '%s' does not exist",fileKey));
    }
    userSession.checkComponentPermission(UserRole.USER,fileKey);
    List<Period> periodList=periods(component.projectId(),session);
    Integer periodIndex=request.paramAsInt(PARAM_PERIOD);
    Date periodDate=periodDate(periodIndex,periodList);
    RulesAggregation rulesAggregation=issueService.findRulesByComponent(component.key(),periodDate,session);
    Multiset<String> severitiesAggregation=issueService.findSeveritiesByComponent(component.key(),periodDate,session);
    Map<String,MeasureDto> measuresByMetricKey=measuresByMetricKey(component,session);
    appendComponent(json,component,userSession,session);
    appendPermissions(json,component,userSession);
    appendPeriods(json,periodList);
    appendIssuesAggregation(json,rulesAggregation,severitiesAggregation);
    appendMeasures(json,measuresByMetricKey,severitiesAggregation,periodIndex);
    appendTabs(json,measuresByMetricKey);
    appendExtensions(json,component,userSession);
    appendManualRules(json);
  }
  finally {
    MyBatis.closeQuietly(session);
  }
  json.endObject();
  json.close();
}
