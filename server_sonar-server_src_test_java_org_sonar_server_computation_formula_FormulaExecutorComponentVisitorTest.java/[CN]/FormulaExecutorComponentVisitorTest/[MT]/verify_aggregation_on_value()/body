{
  treeRootHolder.setRoot(BALANCED_COMPONENT_TREE);
  measureRepository.addRawMeasure(1111,LINES_KEY,newMeasureBuilder().create(10));
  measureRepository.addRawMeasure(1112,LINES_KEY,newMeasureBuilder().create(8));
  measureRepository.addRawMeasure(1211,LINES_KEY,newMeasureBuilder().create(2));
  new PathAwareCrawler<>(underTest).visit(BALANCED_COMPONENT_TREE);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(1))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(20)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(11))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(18)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(111))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(18)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(1111))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(10)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(1112))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(8)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(12))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(2)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(121))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(2)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(1211))).containsOnly(entryOf(NCLOC_KEY,newMeasureBuilder().create(2)));
}
