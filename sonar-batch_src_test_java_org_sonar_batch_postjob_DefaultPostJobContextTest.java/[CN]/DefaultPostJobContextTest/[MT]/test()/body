{
  assertThat(context.settings()).isSameAs(settings);
  assertThat(context.analysisMode()).isSameAs(analysisMode);
  DefaultIssue defaultIssue=new DefaultIssue();
  defaultIssue.setComponentKey("foo:src/Foo.php");
  defaultIssue.setEffortToFix(2.0);
  defaultIssue.setNew(true);
  defaultIssue.setKey("xyz");
  defaultIssue.setLine(1);
  defaultIssue.setMessage("msg");
  defaultIssue.setSeverity("BLOCKER");
  when(issueCache.all()).thenReturn(Arrays.asList(defaultIssue));
  Issue issue=context.issues().iterator().next();
  assertThat(issue.componentKey()).isEqualTo("foo:src/Foo.php");
  assertThat(issue.effortToFix()).isEqualTo(2.0);
  assertThat(issue.isNew()).isTrue();
  assertThat(issue.key()).isEqualTo("xyz");
  assertThat(issue.line()).isEqualTo(1);
  assertThat(issue.message()).isEqualTo("msg");
  assertThat(issue.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(issue.inputComponent()).isNull();
  InputFile inputPath=mock(InputFile.class);
  resourceCache.add(File.create("src/Foo.php").setEffectiveKey("foo:src/Foo.php"),null).setInputComponent(inputPath);
  assertThat(issue.inputComponent()).isEqualTo(inputPath);
}
