{
  Project project=new Project("struts");
  DefaultIssue openIssue=new DefaultIssue();
  when(issueCache.byComponent("struts")).thenReturn(Arrays.asList(openIssue));
  IssueDto deadIssue=new IssueDto().setKee("ABCDE").setResolution(null).setStatus("OPEN").setRuleKey("squid","AvoidCycle");
  when(initialOpenIssues.selectAllIssues()).thenReturn(Arrays.asList(deadIssue));
  decorator.doDecorate(project);
  verify(workflow,times(2)).doAutomaticTransition(any(DefaultIssue.class),any(IssueChangeContext.class));
  verify(handlers,times(2)).execute(any(DefaultIssue.class),any(IssueChangeContext.class));
  verify(issueCache,times(2)).put(any(DefaultIssue.class));
  verify(issueCache).put(argThat(new ArgumentMatcher<DefaultIssue>(){
    @Override public boolean matches(    Object o){
      DefaultIssue dead=(DefaultIssue)o;
      return "ABCDE".equals(dead.key()) && !dead.isNew() && dead.isEndOfLife();
    }
  }
));
}
