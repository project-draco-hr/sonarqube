{
  Resource file=new File("Action.java").setEffectiveKey("struts:Action.java").setId(123);
  final DefaultIssue issue=new DefaultIssue();
  when(issueCache.byComponent("struts:Action.java")).thenReturn(Arrays.asList(issue));
  List<IssueDto> dbIssues=Collections.emptyList();
  when(initialOpenIssues.selectAndRemoveIssues("struts:Action.java")).thenReturn(dbIssues);
  decorator.doDecorate(file);
  verify(tracking).track(isA(SourceHashHolder.class),eq(dbIssues),argThat(new ArgumentMatcher<Collection<DefaultIssue>>(){
    @Override public boolean matches(    Object o){
      List<DefaultIssue> issues=(List<DefaultIssue>)o;
      return issues.size() == 1 && issues.get(0) == issue;
    }
  }
));
  verify(workflow).doAutomaticTransition(eq(issue),any(IssueChangeContext.class));
  verify(handlers).execute(eq(issue),any(IssueChangeContext.class));
  verify(issueCache).put(issue);
}
