{
  QualityProfileDto profileDto=new QualityProfileDto().setName("myprofile").setLanguage("java");
  QualityProfileDto profileDto2=new QualityProfileDto().setName("other-profile").setLanguage("java");
  qualityProfileDao.insert(profileDto,dbSession);
  qualityProfileDao.insert(profileDto2,dbSession);
  RuleDto ruleDto=newRuleDto(RuleKey.of("javascript","S001"));
  dao.insert(ruleDto,dbSession);
  RuleDto ruleDto2=newRuleDto(RuleKey.of("javascript","S002"));
  dao.insert(ruleDto2,dbSession);
  ActiveRuleDto find1=ActiveRuleDto.createFor(profileDto,ruleDto).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  ActiveRuleDto find2=ActiveRuleDto.createFor(profileDto2,ruleDto).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  ActiveRuleDto notFound=ActiveRuleDto.createFor(profileDto2,ruleDto2).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  activeRuleDao.insert(find1,dbSession);
  activeRuleDao.insert(find2,dbSession);
  activeRuleDao.insert(notFound,dbSession);
  dbSession.commit();
  List<ActiveRuleDto> persistedDtos=activeRuleDao.findByRule(ruleDto,dbSession);
  assertThat(persistedDtos).hasSize(2);
  persistedDtos=activeRuleDao.findByRule(ruleDto2,dbSession);
  assertThat(persistedDtos).hasSize(1);
  index.refresh();
  Collection<ActiveRule> hits=index.findByRule(RuleKey.of("javascript","S001"));
  assertThat(hits).isNotNull();
  assertThat(hits).hasSize(2);
}
