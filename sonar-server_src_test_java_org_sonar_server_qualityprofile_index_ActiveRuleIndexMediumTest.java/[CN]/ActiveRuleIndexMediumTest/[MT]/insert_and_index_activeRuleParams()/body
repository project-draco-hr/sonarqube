{
  QualityProfileDto profileDto=new QualityProfileDto().setName("myprofile").setLanguage("java");
  db.qualityProfileDao().insert(dbSession,profileDto);
  RuleKey ruleKey=RuleKey.of("javascript","S001");
  RuleDto ruleDto=newRuleDto(ruleKey);
  db.ruleDao().insert(dbSession,ruleDto);
  RuleParamDto minParam=new RuleParamDto().setName("min").setType("STRING");
  db.ruleDao().addRuleParam(ruleDto,minParam,dbSession);
  RuleParamDto maxParam=new RuleParamDto().setName("max").setType("STRING");
  db.ruleDao().addRuleParam(ruleDto,maxParam,dbSession);
  ActiveRuleDto activeRule=ActiveRuleDto.createFor(profileDto,ruleDto).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  db.activeRuleDao().insert(dbSession,activeRule);
  ActiveRuleParamDto activeRuleMinParam=ActiveRuleParamDto.createFor(minParam).setValue("minimum");
  db.activeRuleDao().addParam(activeRule,activeRuleMinParam,dbSession);
  ActiveRuleParamDto activeRuleMaxParam=ActiveRuleParamDto.createFor(maxParam).setValue("maximum");
  db.activeRuleDao().addParam(activeRule,activeRuleMaxParam,dbSession);
  dbSession.commit();
  List<ActiveRuleParamDto> persistedDtos=db.activeRuleDao().findParamsByActiveRule(activeRule,dbSession);
  assertThat(persistedDtos).hasSize(2);
  ActiveRule rule=index.getByKey(activeRule.getKey());
  assertThat(rule.params()).hasSize(2);
  assertThat(rule.params().keySet()).containsOnly("min","max");
  assertThat(rule.params().values()).containsOnly("minimum","maximum");
  assertThat(rule.params().get("min")).isEqualTo("minimum");
}
