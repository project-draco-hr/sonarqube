{
  QualityProfileDto profileDto=new QualityProfileDto().setName("P1").setLanguage("java");
  QualityProfileDto profileDto2=new QualityProfileDto().setName("P2").setLanguage("java");
  db.qualityProfileDao().insert(dbSession,profileDto);
  db.qualityProfileDao().insert(dbSession,profileDto2);
  RuleDto rule1=newRuleDto(RuleKey.of("javascript","S001"));
  RuleDto rule2=newRuleDto(RuleKey.of("javascript","S002"));
  db.ruleDao().insert(dbSession,rule1);
  db.ruleDao().insert(dbSession,rule2);
  ActiveRuleDto onP1=ActiveRuleDto.createFor(profileDto,rule1).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  ActiveRuleDto firstOnP1=ActiveRuleDto.createFor(profileDto2,rule1).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  ActiveRuleDto firstOnP2=ActiveRuleDto.createFor(profileDto2,rule2).setInheritance(ActiveRule.Inheritance.INHERIT.name()).setSeverity(Severity.BLOCKER);
  db.activeRuleDao().insert(dbSession,onP1);
  db.activeRuleDao().insert(dbSession,firstOnP1);
  db.activeRuleDao().insert(dbSession,firstOnP2);
  dbSession.commit();
  List<ActiveRuleDto> persistedDtos=db.activeRuleDao().findByRule(rule1,dbSession);
  assertThat(persistedDtos).hasSize(2);
  persistedDtos=db.activeRuleDao().findByRule(rule2,dbSession);
  assertThat(persistedDtos).hasSize(1);
  Collection<ActiveRule> hits=index.findByRule(RuleKey.of("javascript","S001"));
  assertThat(hits).isNotNull();
  assertThat(hits).hasSize(2);
}
