{
  int size=fileBlocks.size();
  Map<ByteArray,BlocksGroup> groupsByHash=Maps.newHashMap();
  for (  Block fileBlock : fileBlocks) {
    ByteArray hash=fileBlock.getBlockHash();
    BlocksGroup sameHash=groupsByHash.get(hash);
    if (sameHash == null) {
      sameHash=BlocksGroup.empty();
      groupsByHash.put(hash,sameHash);
    }
    sameHash.blocks.add(fileBlock);
  }
  for (  Map.Entry<ByteArray,BlocksGroup> entry : groupsByHash.entrySet()) {
    ByteArray hash=entry.getKey();
    BlocksGroup group=entry.getValue();
    for (    Block blockFromIndex : cloneIndex.getBySequenceHash(hash)) {
      if (!originResourceId.equals(blockFromIndex.getResourceId())) {
        group.blocks.add(blockFromIndex);
      }
    }
    Collections.sort(group.blocks,BlocksGroup.BlockComparator.INSTANCE);
  }
  BlocksGroup[] sameHashBlocksGroups=new BlocksGroup[size + 2];
  sameHashBlocksGroups[0]=BlocksGroup.empty();
  for (  Block fileBlock : fileBlocks) {
    ByteArray hash=fileBlock.getBlockHash();
    int i=fileBlock.getIndexInFile() + 1;
    sameHashBlocksGroups[i]=groupsByHash.get(hash);
  }
  sameHashBlocksGroups[size + 1]=BlocksGroup.empty();
  return sameHashBlocksGroups;
}
