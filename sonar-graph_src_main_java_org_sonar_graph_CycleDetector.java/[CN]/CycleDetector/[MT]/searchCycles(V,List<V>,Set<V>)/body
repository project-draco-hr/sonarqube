{
  searchCyclesCalls++;
  path.add(fromVertex);
  tmpAnalyzedVertices.add(fromVertex);
  for (  Edge<V> edge : graph.getOutgoingEdges(fromVertex)) {
    V toVertex=edge.getTo();
    if (!edgesToExclude.contains(edge) && vertices.contains(toVertex) && (maxSearchDepthActivated || !analyzedVertices.contains(toVertex))) {
      if (path.contains(toVertex)) {
        path.add(toVertex);
        List<V> cyclePath=path.subList(path.indexOf(toVertex),path.size());
        Cycle cycle=convertListOfVerticesToCycle(cyclePath);
        cycles.add(cycle);
        if (cycles.size() >= maxCyclesToFound) {
          throw new MaximumCyclesToFoundException();
        }
        path.remove(path.size() - 1);
      }
 else       if (!maxSearchDepthActivated || (maxSearchDepthActivated && path.size() < maxSearchDepth)) {
        searchCycles(toVertex,path,tmpAnalyzedVertices);
      }
    }
  }
  path.remove(path.size() - 1);
}
