{
  addRawMeasure(FILE_1_REF,NCLOC_KEY,10);
  addRawMeasure(FILE_1_REF,COMMENT_LINES_KEY,2);
  addRawMeasure(FILE_2_REF,NCLOC_KEY,40);
  addRawMeasure(FILE_2_REF,COMMENT_LINES_KEY,5);
  addRawMeasure(DIRECTORY_REF,NCLOC_KEY,50);
  addRawMeasure(DIRECTORY_REF,COMMENT_LINES_KEY,7);
  addRawMeasure(MODULE_REF,NCLOC_KEY,50);
  addRawMeasure(MODULE_REF,COMMENT_LINES_KEY,7);
  addRawMeasure(ROOT_REF,NCLOC_KEY,50);
  addRawMeasure(ROOT_REF,COMMENT_LINES_KEY,7);
  final MeasureComputer.MeasureComputerDefinition definition=new MeasureComputerDefinitionImpl.BuilderImpl().setInputMetrics(NCLOC_KEY,COMMENT_LINES_KEY).setOutputMetrics(NEW_METRIC_KEY).build();
  measureComputersHolder.setMeasureComputers(newArrayList(new MeasureComputerWrapper(new MeasureComputer(){
    @Override public MeasureComputerDefinition define(    MeasureComputerDefinitionContext defContext){
      return definition;
    }
    @Override public void compute(    MeasureComputerContext context){
      org.sonar.api.ce.measure.Measure ncloc=context.getMeasure(NCLOC_KEY);
      org.sonar.api.ce.measure.Measure comment=context.getMeasure(COMMENT_LINES_KEY);
      if (ncloc != null && comment != null) {
        context.addMeasure(NEW_METRIC_KEY,ncloc.getIntValue() + comment.getIntValue());
      }
    }
  }
,definition)));
  VisitorsCrawler visitorsCrawler=new VisitorsCrawler(Arrays.<ComponentVisitor>asList(new MeasureComputersVisitor(metricRepository,measureRepository,null,measureComputersHolder,componentIssuesRepository)));
  visitorsCrawler.visit(ROOT);
  assertAddedRawMeasure(12,FILE_1_REF,NEW_METRIC_KEY);
  assertAddedRawMeasure(45,FILE_2_REF,NEW_METRIC_KEY);
  assertAddedRawMeasure(57,DIRECTORY_REF,NEW_METRIC_KEY);
  assertAddedRawMeasure(57,MODULE_REF,NEW_METRIC_KEY);
  assertAddedRawMeasure(57,ROOT_REF,NEW_METRIC_KEY);
}
