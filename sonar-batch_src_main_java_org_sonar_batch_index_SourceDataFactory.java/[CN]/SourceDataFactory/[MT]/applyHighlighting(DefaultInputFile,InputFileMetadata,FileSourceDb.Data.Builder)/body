{
  SyntaxHighlightingData highlighting=componentDataCache.getData(inputFile.key(),SnapshotDataTypes.SYNTAX_HIGHLIGHTING);
  String language=inputFile.language();
  if (highlighting == null && language != null) {
    highlighting=codeColorizers.toSyntaxHighlighting(inputFile.file(),inputFile.charset(),language);
  }
  if (highlighting == null) {
    return;
  }
  StringBuilder[] highlightingPerLine=new StringBuilder[inputFile.lines()];
  RuleItemWriter ruleItemWriter=new RuleItemWriter();
  int currentLineIdx=1;
  for (  SyntaxHighlightingRule rule : highlighting.syntaxHighlightingRuleSet()) {
    while (currentLineIdx < inputFile.lines() && rule.getStartPosition() >= metadata.originalLineOffsets()[currentLineIdx]) {
      currentLineIdx++;
    }
    writeDataPerLine(metadata.originalLineOffsets(),rule,rule.getStartPosition(),rule.getEndPosition(),highlightingPerLine,currentLineIdx,ruleItemWriter);
  }
  for (int i=0; i < highlightingPerLine.length; i++) {
    StringBuilder sb=highlightingPerLine[i];
    if (sb != null) {
      to.getLinesBuilder(i).setHighlighting(sb.toString());
    }
  }
}
