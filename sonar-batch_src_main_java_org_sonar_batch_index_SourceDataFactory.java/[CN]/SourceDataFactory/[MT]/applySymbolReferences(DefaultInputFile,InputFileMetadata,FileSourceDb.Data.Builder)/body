{
  SymbolData symbolRefs=componentDataCache.getData(file.key(),SnapshotDataTypes.SYMBOL_HIGHLIGHTING);
  if (symbolRefs != null) {
    StringBuilder[] refsPerLine=new StringBuilder[file.lines()];
    int symbolId=1;
    List<Symbol> symbols=new ArrayList<Symbol>(symbolRefs.referencesBySymbol().keySet());
    Collections.sort(symbols,new Comparator<Symbol>(){
      @Override public int compare(      Symbol o1,      Symbol o2){
        return o1.getDeclarationStartOffset() - o2.getDeclarationStartOffset();
      }
    }
);
    for (    Symbol symbol : symbols) {
      int declarationStartOffset=symbol.getDeclarationStartOffset();
      int declarationEndOffset=symbol.getDeclarationEndOffset();
      int length=declarationEndOffset - declarationStartOffset;
      addSymbol(symbolId,declarationStartOffset,declarationEndOffset,metadata.originalLineOffsets(),refsPerLine);
      for (      Integer referenceStartOffset : symbolRefs.referencesBySymbol().get(symbol)) {
        if (referenceStartOffset == declarationStartOffset) {
          continue;
        }
        addSymbol(symbolId,referenceStartOffset,referenceStartOffset + length,metadata.originalLineOffsets(),refsPerLine);
      }
      symbolId++;
    }
    for (int i=0; i < refsPerLine.length; i++) {
      StringBuilder sb=refsPerLine[i];
      if (sb != null) {
        to.getLinesBuilder(i).setSymbols(sb.toString());
      }
    }
  }
}
