{
  File srcDir=new File(baseDir,"src");
  srcDir.mkdir();
  String content="Sample xoo\ncontent\nfoo\nbar\nSample xoo\ncontent\n";
  File xooFile=new File(srcDir,"sample.xoo");
  FileUtils.write(xooFile,content);
  TaskResult result=tester.newTask().properties(builder.put("sonar.sources","src").put("sonar.cpd.xoo.minimumTokens","2").put("sonar.cpd.xoo.minimumLines","2").put("sonar.verbose","true").build()).start();
  Map<String,List<org.sonar.batch.protocol.output.BatchReport.Measure>> allMeasures=result.allMeasures();
  assertThat(allMeasures.get("com.foo.project:src/sample.xoo")).extracting("metricKey","intValue").contains(tuple("duplicated_blocks",2),tuple("duplicated_files",1),tuple("duplicated_lines",4));
  InputFile inputFile=result.inputFile("src/sample.xoo");
  List<org.sonar.batch.protocol.output.BatchReport.Duplication> duplicationGroups=result.duplicationsFor(inputFile);
  assertThat(duplicationGroups).hasSize(1);
  org.sonar.batch.protocol.output.BatchReport.Duplication cloneGroup=duplicationGroups.get(0);
  assertThat(cloneGroup.getOriginPosition().getStartLine()).isEqualTo(1);
  assertThat(cloneGroup.getOriginPosition().getEndLine()).isEqualTo(2);
  assertThat(cloneGroup.getDuplicateList()).hasSize(1);
  assertThat(cloneGroup.getDuplicate(0).getRange().getStartLine()).isEqualTo(5);
  assertThat(cloneGroup.getDuplicate(0).getRange().getEndLine()).isEqualTo(6);
}
