{
  File srcDir=new File(baseDir,"src");
  srcDir.mkdir();
  String duplicatedStuff="Sample xoo\ncontent\nfoo\nbar\ntoto\ntiti\nfoo";
  File xooFile1=new File(srcDir,"sample1.xoo");
  FileUtils.write(xooFile1,duplicatedStuff);
  TaskResult result=tester.newTask().properties(builder.put("sonar.sources","src").put("sonar.cpd.xoo.minimumTokens","1").put("sonar.cpd.xoo.minimumLines","5").put("sonar.verbose","true").put("sonar.cpd.cross_project","true").build()).start();
  InputFile inputFile1=result.inputFile("src/sample1.xoo");
  List<BatchReport.CpdTextBlock> duplicationBlocks=result.duplicationBlocksFor(inputFile1);
  assertThat(duplicationBlocks).hasSize(3);
  assertThat(duplicationBlocks.get(0).getStartLine()).isEqualTo(1);
  assertThat(duplicationBlocks.get(0).getEndLine()).isEqualTo(5);
  assertThat(duplicationBlocks.get(0).getStartTokenIndex()).isEqualTo(1);
  assertThat(duplicationBlocks.get(0).getEndTokenIndex()).isEqualTo(6);
  assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();
  assertThat(duplicationBlocks.get(1).getStartLine()).isEqualTo(2);
  assertThat(duplicationBlocks.get(1).getEndLine()).isEqualTo(6);
  assertThat(duplicationBlocks.get(1).getStartTokenIndex()).isEqualTo(3);
  assertThat(duplicationBlocks.get(1).getEndTokenIndex()).isEqualTo(7);
  assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();
  assertThat(duplicationBlocks.get(2).getStartLine()).isEqualTo(3);
  assertThat(duplicationBlocks.get(2).getEndLine()).isEqualTo(7);
  assertThat(duplicationBlocks.get(2).getStartTokenIndex()).isEqualTo(4);
  assertThat(duplicationBlocks.get(2).getEndTokenIndex()).isEqualTo(8);
  assertThat(duplicationBlocks.get(0).getHashList()).isNotEmpty();
}
