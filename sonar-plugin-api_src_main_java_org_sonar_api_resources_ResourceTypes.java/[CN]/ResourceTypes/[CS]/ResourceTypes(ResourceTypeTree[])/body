{
  Preconditions.checkNotNull(trees);
  Map<String,ResourceTypeTree> treeMap=Maps.newHashMap();
  Map<String,ResourceType> typeMap=Maps.newLinkedHashMap();
  Collection<ResourceType> rootsSet=Sets.newHashSet();
  for (  ResourceTypeTree tree : trees) {
    rootsSet.add(tree.getRootType());
    for (    ResourceType type : tree.getTypes()) {
      if (treeMap.containsKey(type.getQualifier())) {
        throw new IllegalStateException("Qualifier " + type.getQualifier() + " is defined in several trees");
      }
      treeMap.put(type.getQualifier(),tree);
      typeMap.put(type.getQualifier(),type);
    }
  }
  treeByQualifier=ImmutableMap.copyOf(treeMap);
  typeByQualifier=ImmutableMap.copyOf(typeMap);
  rootTypes=ImmutableList.copyOf(rootsSet);
  List<ResourceType> mutableOrderedTypes=new ArrayList<>();
  ResourceType view=null;
  ResourceType subView=null;
  for (  ResourceType resourceType : typeByQualifier.values()) {
    if (Qualifiers.VIEW.equals(resourceType.getQualifier())) {
      view=resourceType;
    }
 else     if (Qualifiers.SUBVIEW.equals(resourceType.getQualifier())) {
      subView=resourceType;
    }
 else {
      mutableOrderedTypes.add(resourceType);
    }
  }
  if (subView != null) {
    mutableOrderedTypes.add(0,subView);
  }
  if (view != null) {
    mutableOrderedTypes.add(0,view);
  }
  orderedTypes=ImmutableSet.copyOf(mutableOrderedTypes);
}
