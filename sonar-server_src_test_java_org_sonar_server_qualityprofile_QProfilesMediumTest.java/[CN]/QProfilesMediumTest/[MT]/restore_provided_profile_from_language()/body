{
  MockUserSession.set().setLogin("julien").setName("Julien").setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);
  QProfiles qProfiles=serverTester.get(QProfiles.class);
  QProfileBackup qProfileBackup=serverTester.get(QProfileBackup.class);
  Rules rules=serverTester.get(Rules.class);
  QProfile profile=qProfiles.profile("Basic","xoo");
  Rule rule1=rules.find(RuleQuery.builder().searchQuery("x1").build()).results().iterator().next();
  qProfiles.updateActiveRuleParam(qProfiles.findByProfileAndRule(profile.id(),rule1.id()).activeRuleId(),"acceptWhitespace","false");
  qProfiles.activateRule(profile.id(),rule1.id(),"INFO");
  Rule rule2=rules.find(RuleQuery.builder().searchQuery("x2").build()).results().iterator().next();
  qProfiles.deactivateRule(qProfiles.profile("Basic","xoo").id(),rule2.id());
  assertThat(qProfileBackup.findDefaultProfileNamesByLanguage("xoo")).hasSize(1);
  qProfiles.renameProfile(profile.id(),"Old Basic");
  qProfileBackup.restoreDefaultProfilesByLanguage("xoo");
  profile=qProfiles.profile("Basic","xoo");
  QProfileRule qProfileRule=qProfiles.searchProfileRules(ProfileRuleQuery.create(profile.id()).setNameOrKey("x1"),Paging.create(10,1)).rules().get(0);
  assertThat(qProfileRule.severity()).isEqualTo("MAJOR");
  QProfileRuleParam qProfileRuleParam=qProfileRule.params().get(0);
  assertThat(qProfileRuleParam.key()).isEqualTo("acceptWhitespace");
  assertThat(qProfileRuleParam.value()).isEqualTo("true");
  assertThat(qProfiles.searchProfileRules(ProfileRuleQuery.create(profile.id()).setNameOrKey("x2"),Paging.create(10,1)).rules().get(0)).isNotNull();
}
