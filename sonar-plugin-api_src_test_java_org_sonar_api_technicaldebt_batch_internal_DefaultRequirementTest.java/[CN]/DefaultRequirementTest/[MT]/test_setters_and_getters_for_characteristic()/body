{
  DefaultCharacteristic root=new DefaultCharacteristic().setId(1).setKey("REUSABILITY");
  DefaultCharacteristic characteristic=new DefaultCharacteristic().setId(1).setKey("MODULARITY").setName("Modularity").setParent(root).setRoot(root);
  DefaultRequirement requirement=new DefaultRequirement().setId(3).setRuleKey(RuleKey.of("repo","rule")).setCharacteristic(characteristic).setRootCharacteristic(root).setFunction("linear_offset").setFactorValue(2).setFactorUnit(WorkDuration.UNIT.MINUTES).setOffsetValue(1).setOffsetUnit(WorkDuration.UNIT.HOURS).setCreatedAt(new SimpleDateFormat("yyyy-MM-dd").parse("2013-08-19")).setUpdatedAt(new SimpleDateFormat("yyyy-MM-dd").parse("2013-08-19"));
  assertThat(requirement.id()).isEqualTo(3);
  assertThat(requirement.ruleKey()).isEqualTo(RuleKey.of("repo","rule"));
  assertThat(requirement.characteristic()).isEqualTo(characteristic);
  assertThat(requirement.rootCharacteristic()).isEqualTo(root);
  assertThat(requirement.function()).isEqualTo("linear_offset");
  assertThat(requirement.factorValue()).isEqualTo(2);
  assertThat(requirement.factorUnit()).isEqualTo(WorkDuration.UNIT.MINUTES);
  assertThat(requirement.factor()).isEqualTo(WorkUnit.create(2d,WorkUnit.MINUTES));
  assertThat(requirement.offsetValue()).isEqualTo(1);
  assertThat(requirement.offsetUnit()).isEqualTo(WorkDuration.UNIT.HOURS);
  assertThat(requirement.offset()).isEqualTo(WorkUnit.create(1d,WorkUnit.HOURS));
  assertThat(requirement.createdAt()).isEqualTo(new SimpleDateFormat("yyyy-MM-dd").parse("2013-08-19"));
  assertThat(requirement.updatedAt()).isEqualTo(new SimpleDateFormat("yyyy-MM-dd").parse("2013-08-19"));
}
