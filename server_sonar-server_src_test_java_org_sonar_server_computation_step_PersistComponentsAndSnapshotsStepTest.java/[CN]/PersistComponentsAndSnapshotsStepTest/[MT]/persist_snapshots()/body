{
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").setVersion("1.0").addChildRef(2).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setPath("module").setName("Module").setVersion("1.1").addChildRef(3).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(4).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").setLanguage("java").build());
  Component file=new DumbComponent(Component.Type.FILE,4,"DEFG","MODULE_KEY:src/main/java/dir/Foo.java");
  Component directory=new DumbComponent(Component.Type.DIRECTORY,3,"CDEF","MODULE_KEY:src/main/java/dir",file);
  Component module=new DumbComponent(Component.Type.MODULE,2,"BCDE","MODULE_KEY",directory);
  Component project=new DumbComponent(Component.Type.PROJECT,1,"ABCD",PROJECT_KEY,module);
  treeRootHolder.setRoot(project);
  sut.execute();
  assertThat(dbTester.countRowsOfTable("snapshots")).isEqualTo(4);
  ComponentDto projectDto=dbClient.componentDao().selectNullableByKey(session,PROJECT_KEY);
  SnapshotDto projectSnapshot=getSnapshot(projectDto.getId());
  assertThat(projectSnapshot.getComponentId()).isEqualTo(projectDto.getId());
  assertThat(projectSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(projectSnapshot.getRootId()).isNull();
  assertThat(projectSnapshot.getParentId()).isNull();
  assertThat(projectSnapshot.getDepth()).isEqualTo(0);
  assertThat(projectSnapshot.getPath()).isEqualTo("");
  assertThat(projectSnapshot.getQualifier()).isEqualTo("TRK");
  assertThat(projectSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(projectSnapshot.getVersion()).isEqualTo("1.0");
  assertThat(projectSnapshot.getLast()).isFalse();
  assertThat(projectSnapshot.getStatus()).isEqualTo("U");
  assertThat(projectSnapshot.getCreatedAt()).isEqualTo(ANALYSIS_DATE);
  assertThat(projectSnapshot.getBuildDate()).isEqualTo(NOW);
  ComponentDto moduleDto=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY");
  SnapshotDto moduleSnapshot=getSnapshot(moduleDto.getId());
  assertThat(moduleSnapshot.getComponentId()).isEqualTo(moduleDto.getId());
  assertThat(moduleSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(moduleSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleSnapshot.getParentId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleSnapshot.getDepth()).isEqualTo(1);
  assertThat(moduleSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + ".");
  assertThat(moduleSnapshot.getQualifier()).isEqualTo("BRC");
  assertThat(moduleSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(moduleSnapshot.getVersion()).isEqualTo("1.1");
  assertThat(moduleSnapshot.getLast()).isFalse();
  assertThat(moduleSnapshot.getStatus()).isEqualTo("U");
  assertThat(moduleSnapshot.getCreatedAt()).isEqualTo(ANALYSIS_DATE);
  assertThat(moduleSnapshot.getBuildDate()).isEqualTo(NOW);
  ComponentDto directoryDto=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir");
  SnapshotDto directorySnapshot=getSnapshot(directoryDto.getId());
  assertThat(directorySnapshot.getComponentId()).isEqualTo(directoryDto.getId());
  assertThat(directorySnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(directorySnapshot.getRootId()).isEqualTo(projectDto.getId());
  assertThat(directorySnapshot.getParentId()).isEqualTo(moduleDto.getId());
  assertThat(directorySnapshot.getDepth()).isEqualTo(2);
  assertThat(directorySnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + moduleDto.getId()+ ".");
  assertThat(directorySnapshot.getQualifier()).isEqualTo("DIR");
  assertThat(directorySnapshot.getScope()).isEqualTo("DIR");
  assertThat(directorySnapshot.getVersion()).isNull();
  assertThat(directorySnapshot.getLast()).isFalse();
  assertThat(directorySnapshot.getStatus()).isEqualTo("U");
  assertThat(directorySnapshot.getCreatedAt()).isEqualTo(ANALYSIS_DATE);
  assertThat(directorySnapshot.getBuildDate()).isEqualTo(NOW);
  ComponentDto fileDto=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir/Foo.java");
  SnapshotDto fileSnapshot=getSnapshot(fileDto.getId());
  assertThat(fileSnapshot.getComponentId()).isEqualTo(fileDto.getId());
  assertThat(fileSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(fileSnapshot.getRootId()).isEqualTo(projectDto.getId());
  assertThat(fileSnapshot.getParentId()).isEqualTo(directoryDto.getId());
  assertThat(fileSnapshot.getDepth()).isEqualTo(3);
  assertThat(fileSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + moduleDto.getId()+ "."+ directoryDto.getId()+ ".");
  assertThat(fileSnapshot.getQualifier()).isEqualTo("FIL");
  assertThat(fileSnapshot.getScope()).isEqualTo("FIL");
  assertThat(fileSnapshot.getVersion()).isNull();
  assertThat(fileSnapshot.getLast()).isFalse();
  assertThat(fileSnapshot.getStatus()).isEqualTo("U");
  assertThat(fileSnapshot.getCreatedAt()).isEqualTo(ANALYSIS_DATE);
  assertThat(fileSnapshot.getBuildDate()).isEqualTo(NOW);
  assertThat(dbIdsRepository.getSnapshotId(project)).isEqualTo(projectSnapshot.getId());
  assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());
  assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());
  assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());
}
