{
  StringBuilder hql=newResourceQuery().append(" and scope = '").append(Scopes.FILE).append("' order by qualifier, key");
  Map<String,ResourceModel> disabledResourceByKey=loadDisabledResources(moduleId,hql);
  List<ResourceModel> resources=loadEnabledResources(moduleId,hql);
  for (  ResourceModel resourceModel : resources) {
    String oldEffectiveKey=resourceModel.getKey();
    boolean isTest=Qualifiers.UNIT_TEST_FILE.equals(resourceModel.getQualifier());
    InputFile matchedFile=findInputFile(deprecatedFileKeyMapper,deprecatedTestKeyMapper,oldEffectiveKey,isTest);
    if (matchedFile != null) {
      String newEffectiveKey=((DeprecatedDefaultInputFile)matchedFile).key();
      String oldKey=StringUtils.substringAfterLast(oldEffectiveKey,":");
      Resource sonarFile;
      String parentOldKey;
      if ("java".equals(resourceModel.getLanguageKey())) {
        parentOldKey=String.format("%s:%s",module.getEffectiveKey(),DeprecatedKeyUtils.getJavaFileParentDeprecatedKey(oldKey));
      }
 else {
        sonarFile=new File(oldKey);
        parentOldKey=String.format("%s:%s",module.getEffectiveKey(),sonarFile.getParent().getDeprecatedKey());
      }
      String parentNewKey=String.format("%s:%s",module.getEffectiveKey(),getParentKey(matchedFile));
      if (!deprecatedDirectoryKeyMapper.containsKey(parentOldKey)) {
        deprecatedDirectoryKeyMapper.put(parentOldKey,parentNewKey);
      }
 else       if (!parentNewKey.equals(deprecatedDirectoryKeyMapper.get(parentOldKey))) {
        logger.warn("Directory with key " + parentOldKey + " matches both "+ deprecatedDirectoryKeyMapper.get(parentOldKey)+ " and "+ parentNewKey+ ". First match is arbitrary chosen.");
      }
      updateKey(resourceModel,newEffectiveKey,disabledResourceByKey);
      resourceModel.setDeprecatedKey(oldEffectiveKey);
      logger.info(COMPONENT_CHANGED_TO,oldEffectiveKey,newEffectiveKey);
    }
 else {
      logger.warn(UNABLE_TO_UPDATE_COMPONENT_NO_MATCH_WAS_FOUND,oldEffectiveKey);
    }
  }
}
