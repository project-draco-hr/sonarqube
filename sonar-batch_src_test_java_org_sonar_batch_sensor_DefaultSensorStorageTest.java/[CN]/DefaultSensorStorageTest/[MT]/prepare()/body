{
  activeRules=new ActiveRulesBuilder().build();
  fs=new DefaultFileSystem(temp.newFolder().toPath());
  MetricFinder metricFinder=mock(MetricFinder.class);
  when(metricFinder.findByKey(CoreMetrics.NCLOC_KEY)).thenReturn(CoreMetrics.NCLOC);
  when(metricFinder.findByKey(CoreMetrics.FUNCTION_COMPLEXITY_DISTRIBUTION_KEY)).thenReturn(CoreMetrics.FUNCTION_COMPLEXITY_DISTRIBUTION);
  settings=new Settings();
  resourcePerspectives=mock(ResourcePerspectives.class);
  ComponentDataCache componentDataCache=mock(ComponentDataCache.class);
  BlockCache blockCache=mock(BlockCache.class);
  project=new Project("myProject");
  sonarIndex=mock(DefaultIndex.class);
  CoverageExclusions coverageExclusions=mock(CoverageExclusions.class);
  when(coverageExclusions.accept(any(Resource.class),any(Measure.class))).thenReturn(true);
  sensorStorage=new DefaultSensorStorage(metricFinder,project,resourcePerspectives,settings,fs,activeRules,componentDataCache,blockCache,mock(DuplicationCache.class),sonarIndex,coverageExclusions);
}
