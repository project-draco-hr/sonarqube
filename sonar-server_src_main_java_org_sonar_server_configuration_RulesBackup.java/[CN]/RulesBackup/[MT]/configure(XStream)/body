{
  xStream.alias("rule",Rule.class);
  xStream.registerConverter(new Converter(){
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      Rule rule=(Rule)source;
      writeNode(writer,"parentRepositoryKey",rule.getParent().getRepositoryKey());
      writeNode(writer,"parentKey",rule.getParent().getKey());
      writeNode(writer,"repositoryKey",rule.getRepositoryKey());
      writeNode(writer,"key",rule.getKey());
      writeNode(writer,"configKey",rule.getConfigKey());
      writeNode(writer,"level",rule.getSeverity().name());
      writeNode(writer,"name",rule.getName());
      writeNode(writer,"description",rule.getDescription());
      if (!rule.getParams().isEmpty()) {
        writer.startNode("params");
        for (        RuleParam ruleParam : rule.getParams()) {
          writer.startNode("param");
          writeNode(writer,"key",ruleParam.getKey());
          writeNode(writer,"value",ruleParam.getDefaultValue());
          writer.endNode();
        }
        writer.endNode();
      }
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Rule rule=Rule.create();
      Map<String,String> valuesRule=new HashMap<String,String>();
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        valuesRule.put(reader.getNodeName(),reader.getValue());
        if ("params".equals(reader.getNodeName())) {
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            Map<String,String> valuesParam=readNode(reader);
            rule.createParameter().setKey(valuesParam.get("key")).setDefaultValue(valuesParam.get("value"));
            reader.moveUp();
          }
        }
        reader.moveUp();
      }
      Rule parent=Rule.create().setRepositoryKey(valuesRule.get("parentRepositoryKey")).setKey(valuesRule.get("parentKey"));
      rule.setParent(parent).setRepositoryKey(valuesRule.get("repositoryKey")).setKey(valuesRule.get("key")).setConfigKey(valuesRule.get("configKey")).setName(valuesRule.get("name")).setDescription(valuesRule.get("description")).setSeverity(RulePriority.valueOf(valuesRule.get("level")));
      return rule;
    }
    public boolean canConvert(    Class type){
      return Rule.class.equals(type);
    }
  }
);
}
