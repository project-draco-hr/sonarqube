{
  LoggerFactory.getLogger(getClass()).info("Restore rules");
  for (  Rule rule : rules) {
    Rule parent=rule.getParent();
    Rule matchingParentRuleInDb=rulesDao.getRuleByKey(parent.getRepositoryKey(),parent.getKey());
    if (matchingParentRuleInDb == null) {
      LoggerFactory.getLogger(getClass()).error("Unable to find parent rule " + parent.getRepositoryKey() + ":"+ parent.getKey());
      continue;
    }
    for (Iterator<RuleParam> irp=rule.getParams().iterator(); irp.hasNext(); ) {
      RuleParam param=irp.next();
      RuleParam matchingRPInDb=rulesDao.getRuleParam(matchingParentRuleInDb,param.getKey());
      if (matchingRPInDb == null) {
        LoggerFactory.getLogger(getClass()).error("Unable to find rule parameter in parent " + param.getKey());
        irp.remove();
      }
    }
    rule.setParent(matchingParentRuleInDb);
    Rule matchingRuleInDb=session.getSingleResult(Rule.class,"pluginName",rule.getRepositoryKey(),"key",rule.getKey());
    if (matchingRuleInDb != null) {
      matchingRuleInDb.setParent(matchingParentRuleInDb);
      matchingRuleInDb.setConfigKey(rule.getConfigKey());
      matchingRuleInDb.setName(rule.getName());
      matchingRuleInDb.setDescription(rule.getDescription());
      matchingRuleInDb.setSeverity(rule.getSeverity());
      matchingRuleInDb.setParams(rule.getParams());
      matchingRuleInDb.setEnabled(true);
      session.save(matchingRuleInDb);
    }
 else {
      rule.setEnabled(true);
      session.save(rule);
    }
  }
}
