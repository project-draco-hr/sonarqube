{
  CharacteristicDto char1=DebtTesting.newCharacteristicDto("char1");
  dbClient.debtCharacteristicDao().insert(char1,dbSession);
  CharacteristicDto char11=DebtTesting.newCharacteristicDto("char11").setParentId(char1.getId());
  dbClient.debtCharacteristicDao().insert(char11,dbSession);
  dbSession.commit();
  dao.insert(dbSession,newRuleDto(RuleKey.of("java","S001")).setSubCharacteristicId(char11.getId()));
  dao.insert(dbSession,newRuleDto(RuleKey.of("javascript","S002")));
  dbSession.commit();
  RuleQuery query;
  Result<Rule> results;
  results=index.search(new RuleQuery(),new QueryOptions());
  assertThat(results.getHits()).hasSize(2);
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of("toto"));
  assertThat(index.search(query,new QueryOptions()).getHits()).isEmpty();
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char11.getKey()));
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char1.getKey()));
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
  query=new RuleQuery().setDebtCharacteristics(ImmutableSet.of(char11.getKey(),char1.getKey()));
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
  query=new RuleQuery().setQueryText(char1.getKey());
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
  query=new RuleQuery().setQueryText(char11.getKey());
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
  query=new RuleQuery().setQueryText(char11.getKey() + " " + char1.getKey());
  assertThat(index.search(query,new QueryOptions()).getHits()).hasSize(1);
}
