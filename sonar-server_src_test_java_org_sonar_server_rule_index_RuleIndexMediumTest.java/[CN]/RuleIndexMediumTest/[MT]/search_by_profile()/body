{
  QualityProfileDto qualityProfileDto1=QualityProfileDto.createFor("profile1","java");
  QualityProfileDto qualityProfileDto2=QualityProfileDto.createFor("profile2","java");
  db.qualityProfileDao().insert(dbSession,qualityProfileDto1,qualityProfileDto2);
  RuleDto rule1=RuleTesting.newDto(RuleKey.of("java","S001"));
  RuleDto rule2=RuleTesting.newDto(RuleKey.of("java","S002"));
  RuleDto rule3=RuleTesting.newDto(RuleKey.of("java","S003"));
  dao.insert(dbSession,rule1,rule2,rule3);
  db.activeRuleDao().insert(dbSession,ActiveRuleDto.createFor(qualityProfileDto1,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto2,rule1).setSeverity("BLOCKER"),ActiveRuleDto.createFor(qualityProfileDto1,rule2).setSeverity("BLOCKER"));
  dbSession.commit();
  Result<Rule> result=index.search(new RuleQuery().setActivation(true),new QueryOptions());
  assertThat(result.getHits()).hasSize(2);
  result=index.search(new RuleQuery().setActivation(false),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule3.getName());
  index.search(new RuleQuery().setActivation(false).setQProfileKey(qualityProfileDto2.getKey().toString()),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  result=index.search(new RuleQuery().setActivation(true).setQProfileKey(qualityProfileDto2.getKey().toString()),new QueryOptions());
  assertThat(result.getHits()).hasSize(1);
  assertThat(result.getHits().get(0).name()).isEqualTo(rule1.getName());
}
