{
  DbSession dbSession=dbClient.openSession(true);
  try {
    List<RequirementMigrationDto> requirementDtos=dbSession.getMapper(CharacteristicMapper.class).selectDeprecatedRequirements();
    if (requirementDtos.isEmpty()) {
      LOGGER.info("No requirement will be copied",requirementDtos);
    }
 else {
      int requirementCopied=0;
      final Multimap<Integer,RequirementMigrationDto> requirementsByRuleId=ArrayListMultimap.create();
      for (      RequirementMigrationDto requirementDto : requirementDtos) {
        requirementsByRuleId.put(requirementDto.getRuleId(),requirementDto);
      }
      List<RuleDto> rules=dbClient.ruleDao().findAll(dbSession);
      for (      RuleDto rule : rules) {
        Collection<RequirementMigrationDto> requirementsForRule=requirementsByRuleId.get(rule.getId());
        if (!requirementsForRule.isEmpty()) {
          convert(rule,requirementsForRule,dbSession);
          requirementCopied++;
        }
      }
      dbSession.commit();
      LOGGER.info("{} requirements have been found, {} have be copied",requirementDtos.size(),requirementCopied);
    }
  }
  finally {
    MyBatis.closeQuietly(dbSession);
  }
}
