{
  List<SyntaxHighlightingRule> highlightingRules=syntaxHighlighting.getSyntaxHighlightingRuleSet();
  StringBuilder decoratedText=new StringBuilder();
  BufferedReader stringBuffer=null;
  try {
    stringBuffer=new BufferedReader(new StringReader(text));
    CharactersReader context=new CharactersReader(stringBuffer);
    while (context.readNextChar()) {
      if (shouldStartNewLine(context)) {
        decoratedText.append(OPEN_TABLE_LINE);
        if (shouldReopenPendingTags(context)) {
          reopenCurrentSyntaxTags(context,decoratedText);
        }
      }
      Collection<SyntaxHighlightingRule> tagsToClose=Collections2.filter(highlightingRules,new IndexRuleFilter(context.getCurrentIndex(),false));
      closeCompletedTags(context,tagsToClose,decoratedText);
      if (shouldClosePendingTags(context)) {
        closeCurrentSyntaxTags(context,decoratedText);
        decoratedText.append(CLOSE_TABLE_LINE);
      }
      Collection<SyntaxHighlightingRule> tagsToOpen=Collections2.filter(highlightingRules,new IndexRuleFilter(context.getCurrentIndex(),true));
      openNewTags(context,tagsToOpen,decoratedText);
      decoratedText.append((char)context.getCurrentValue());
    }
  }
 catch (  IOException exception) {
    String errorMsg="An exception occurred while highlighting the syntax of one of the project's files";
    LoggerFactory.getLogger(HtmlTextWrapper.class).error(errorMsg);
    throw new IllegalStateException(errorMsg,exception);
  }
 finally {
    Closeables.closeQuietly(stringBuffer);
  }
  return decoratedText.toString();
}
