{
  NewController newController=context.createController("api/system");
  newController.createAction("health").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      try {
        response.stream().output().write("good".getBytes());
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  newController.createAction("ping").setPost(true).setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      try {
        response.stream().output().write("pong".getBytes());
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  newController.createAction("fail").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      throw new IllegalStateException("Unexpected");
    }
  }
);
  newController.createAction("fail_with_i18n_message").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      throw BadRequestException.ofL10n("bad.request.reason",0);
    }
  }
);
  newController.createAction("fail_with_multiple_messages").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      List<BadRequestException.Message> errors=Lists.newArrayList();
      for (int count=0; count < Integer.valueOf(request.param("count")); count++) {
        errors.add(Message.of("Bad request reason #" + count));
      }
      throw BadRequestException.of(errors);
    }
  }
);
  newController.createAction("fail_with_multiple_i18n_messages").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      List<BadRequestException.Message> errors=Lists.newArrayList();
      for (int count=0; count < Integer.valueOf(request.param("count")); count++) {
        errors.add(Message.ofL10n("bad.request.reason",count));
      }
      throw BadRequestException.of(errors);
    }
  }
);
  newController.createAction("server_exception_with_i18n_message").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      throw new ServerException(404,null,"not.found",null);
    }
  }
);
  newController.createAction("alive").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      response.noContent();
    }
  }
);
  newController.createAction("print").createParam("message","required message").createParam("author","optional author").setHandler(new RequestHandler(){
    @Override public void handle(    Request request,    Response response){
      try {
        IOUtils.write(request.mandatoryParam("message") + " by " + request.param("author","-"),response.stream().output());
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  newController.done();
}
