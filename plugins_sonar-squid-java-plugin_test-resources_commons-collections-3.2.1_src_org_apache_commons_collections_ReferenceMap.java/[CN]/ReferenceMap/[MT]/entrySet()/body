{
  if (entrySet != null) {
    return entrySet;
  }
  entrySet=new AbstractSet(){
    public int size(){
      return ReferenceMap.this.size();
    }
    public void clear(){
      ReferenceMap.this.clear();
    }
    public boolean contains(    Object o){
      if (o == null)       return false;
      if (!(o instanceof Map.Entry))       return false;
      Map.Entry e=(Map.Entry)o;
      Entry e2=getEntry(e.getKey());
      return (e2 != null) && e.equals(e2);
    }
    public boolean remove(    Object o){
      boolean r=contains(o);
      if (r) {
        Map.Entry e=(Map.Entry)o;
        ReferenceMap.this.remove(e.getKey());
      }
      return r;
    }
    public Iterator iterator(){
      return new EntryIterator();
    }
    public Object[] toArray(){
      return toArray(new Object[0]);
    }
    public Object[] toArray(    Object[] arr){
      ArrayList list=new ArrayList();
      Iterator iterator=iterator();
      while (iterator.hasNext()) {
        Entry e=(Entry)iterator.next();
        list.add(new DefaultMapEntry(e.getKey(),e.getValue()));
      }
      return list.toArray(arr);
    }
  }
;
  return entrySet;
}
