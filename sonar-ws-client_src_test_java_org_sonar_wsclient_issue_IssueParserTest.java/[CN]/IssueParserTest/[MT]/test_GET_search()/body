{
  String json=IOUtils.toString(getClass().getResourceAsStream("/org/sonar/wsclient/issue/IssueParserTest/search.json"));
  Issues issues=new IssueParser().parseIssues(json);
  assertThat(issues).isNotNull();
  List<Issue> list=issues.list();
  assertThat(list).hasSize(2);
  Issue first=list.get(0);
  assertThat(first.key()).isEqualTo("ABCDE");
  assertThat(first.componentKey()).isEqualTo("Action.java");
  assertThat(first.ruleKey()).isEqualTo("squid:AvoidCycle");
  assertThat(first.severity()).isEqualTo("CRITICAL");
  assertThat(first.line()).isEqualTo(10);
  assertThat(first.resolution()).isEqualTo("FIXED");
  assertThat(first.status()).isEqualTo("OPEN");
  assertThat(first.assignee()).isEqualTo("karadoc");
  assertThat(first.description()).isEqualTo("the desc");
  assertThat(first.cost()).isEqualTo(4.2);
  assertThat(first.userLogin()).isEqualTo("perceval");
  assertThat(first.createdAt()).isNotNull();
  assertThat(first.updatedAt()).isNotNull();
  assertThat(first.closedAt()).isNotNull();
  assertThat(first.attribute("JIRA")).isEqualTo("FOO-1234");
  assertThat(first.attribute("OTHER")).isNull();
  assertThat(first.attributes()).hasSize(1);
  Issue second=list.get(1);
  assertThat(second.key()).isEqualTo("FGHIJ");
  assertThat(second.line()).isNull();
  assertThat(second.cost()).isNull();
  assertThat(second.description()).isNull();
  assertThat(second.attribute("JIRA")).isNull();
  assertThat(second.attributes()).isEmpty();
  assertThat(issues.paging()).isNotNull();
  Paging paging=issues.paging();
  assertThat(paging.pageIndex()).isEqualTo(1);
  assertThat(paging.pageSize()).isEqualTo(100);
  assertThat(paging.pages()).isEqualTo(1);
  assertThat(paging.total()).isEqualTo(2);
  assertThat(issues.securityExclusions()).isTrue();
}
