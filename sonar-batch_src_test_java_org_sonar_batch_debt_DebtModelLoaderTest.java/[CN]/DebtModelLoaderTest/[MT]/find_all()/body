{
  CharacteristicDto rootCharacteristicDto=new CharacteristicDto().setId(1).setKey("MEMORY_EFFICIENCY").setName("Memory use");
  CharacteristicDto characteristicDto=new CharacteristicDto().setId(2).setKey("EFFICIENCY").setName("Efficiency").setParentId(1);
  CharacteristicDto requirementDto=new CharacteristicDto().setId(3).setParentId(2).setRuleId(100).setFunction("linear").setFactorValue(2d).setFactorUnit(CharacteristicDto.DAYS).setOffsetValue(0d).setOffsetUnit(CharacteristicDto.MINUTES);
  RuleKey ruleKey=RuleKey.of("checkstyle","Regexp");
  Rule rule=Rule.create(ruleKey.repository(),ruleKey.rule());
  rule.setId(100);
  when(ruleFinder.findAll(any(RuleQuery.class))).thenReturn(newArrayList(rule));
  when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(rootCharacteristicDto,characteristicDto,requirementDto));
  DefaultTechnicalDebtModel result=(DefaultTechnicalDebtModel)loader.load();
  assertThat(result.rootCharacteristics()).hasSize(1);
  DefaultCharacteristic rootCharacteristic=result.characteristicByKey("MEMORY_EFFICIENCY");
  assertThat(rootCharacteristic.key()).isEqualTo("MEMORY_EFFICIENCY");
  assertThat(rootCharacteristic.name()).isEqualTo("Memory use");
  assertThat(rootCharacteristic.parent()).isNull();
  assertThat(rootCharacteristic.requirements()).isEmpty();
  assertThat(rootCharacteristic.children()).hasSize(1);
  assertThat(rootCharacteristic.children().get(0).key()).isEqualTo("EFFICIENCY");
  DefaultCharacteristic characteristic=result.characteristicByKey("EFFICIENCY");
  assertThat(characteristic.key()).isEqualTo("EFFICIENCY");
  assertThat(characteristic.name()).isEqualTo("Efficiency");
  assertThat(characteristic.parent().key()).isEqualTo("MEMORY_EFFICIENCY");
  assertThat(characteristic.children()).isEmpty();
  assertThat(characteristic.requirements()).hasSize(1);
  assertThat(characteristic.requirements().get(0).ruleKey()).isEqualTo(ruleKey);
  DefaultRequirement requirement=result.requirementsByRule(ruleKey);
  assertThat(requirement.ruleKey()).isEqualTo(ruleKey);
  assertThat(requirement.function()).isEqualTo("linear");
  assertThat(requirement.factorValue()).isEqualTo(2);
  assertThat(requirement.factorUnit()).isEqualTo(WorkDuration.UNIT.DAYS);
  assertThat(requirement.offsetValue()).isEqualTo(0);
  assertThat(requirement.offsetUnit()).isEqualTo(WorkDuration.UNIT.MINUTES);
}
