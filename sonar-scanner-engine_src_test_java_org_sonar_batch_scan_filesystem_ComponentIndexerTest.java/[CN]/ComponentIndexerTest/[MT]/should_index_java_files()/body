{
  Languages languages=new Languages(FakeJava.INSTANCE);
  ComponentIndexer indexer=createIndexer(languages);
  DefaultModuleFileSystem fs=new DefaultModuleFileSystem(project,null,mock(FileIndexer.class),initializer,indexer,mode);
  fs.add(newInputFile("src/main/java/foo/bar/Foo.java","","foo/bar/Foo.java","java",false,Status.ADDED));
  fs.add(newInputFile("src/main/java2/foo/bar/Foo.java","","foo/bar/Foo.java","java",false,Status.ADDED));
  fs.add(newInputFile("src/test/java/foo/bar/FooTest.java","","foo/bar/FooTest.java","java",true,Status.SAME));
  fs.index();
  verify(sonarIndex).index(org.sonar.api.resources.File.create("src/main/java/foo/bar/Foo.java",FakeJava.INSTANCE,false));
  verify(sonarIndex).index(org.sonar.api.resources.File.create("src/main/java2/foo/bar/Foo.java",FakeJava.INSTANCE,false));
  verify(sonarIndex).index(argThat(new ArgumentMatcher<org.sonar.api.resources.File>(){
    @Override public boolean matches(    Object arg0){
      org.sonar.api.resources.File javaFile=(org.sonar.api.resources.File)arg0;
      return javaFile.getKey().equals("src/test/java/foo/bar/FooTest.java") && javaFile.getPath().equals("src/test/java/foo/bar/FooTest.java") && javaFile.getQualifier().equals(Qualifiers.UNIT_TEST_FILE);
    }
  }
));
}
