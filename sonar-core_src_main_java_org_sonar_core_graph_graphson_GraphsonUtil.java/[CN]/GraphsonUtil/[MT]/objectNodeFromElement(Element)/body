{
  boolean isEdge=element instanceof Edge;
  boolean showTypes=mode == GraphsonMode.EXTENDED;
  Set<String> propertyKeys=isEdge ? this.edgePropertyKeys : this.vertexPropertyKeys;
  ElementPropertiesRule elementPropertyConfig=isEdge ? this.edgePropertiesRule : this.vertexPropertiesRule;
  org.json.simple.JSONObject jsonElement=createJSONMap(createPropertyMap(element,propertyKeys,elementPropertyConfig),propertyKeys,showTypes);
  if ((isEdge && this.includeReservedEdgeId) || (!isEdge && this.includeReservedVertexId)) {
    putObject(jsonElement,GraphsonTokens._ID,element.getId());
  }
  if (element instanceof Edge) {
    Edge edge=(Edge)element;
    if (this.includeReservedEdgeId) {
      putObject(jsonElement,GraphsonTokens._ID,element.getId());
    }
    if (this.includeReservedEdgeType) {
      jsonElement.put(GraphsonTokens._TYPE,GraphsonTokens.EDGE);
    }
    if (this.includeReservedEdgeOutV) {
      putObject(jsonElement,GraphsonTokens._OUT_V,edge.getVertex(Direction.OUT).getId());
    }
    if (this.includeReservedEdgeInV) {
      putObject(jsonElement,GraphsonTokens._IN_V,edge.getVertex(Direction.IN).getId());
    }
    if (this.includeReservedEdgeLabel) {
      jsonElement.put(GraphsonTokens._LABEL,edge.getLabel());
    }
  }
 else   if (element instanceof Vertex) {
    if (this.includeReservedVertexId) {
      putObject(jsonElement,GraphsonTokens._ID,element.getId());
    }
    if (this.includeReservedVertexType) {
      jsonElement.put(GraphsonTokens._TYPE,GraphsonTokens.VERTEX);
    }
  }
  return jsonElement;
}
