{
  ComponentDto project=insertComponent(ComponentTesting.newProjectDto("P1").setKey("PK1"));
  setDefaultProjectPermission(project);
  ComponentDto module=insertComponent(newModuleDto(project));
  ComponentDto file=insertComponent(newFileDto(module,"F1").setKey("FK1"));
  db.snapshotDao().insert(session,newAnalysis(project).setPeriodDate(1,parseDateTime("2015-09-03T00:00:00+0100").getTime()));
  RuleDto rule=newRule();
  IssueDto issueAfterLeak=IssueTesting.newDto(rule,file,project).setKee(UUID_EXAMPLE_01).setIssueCreationDate(parseDateTime("2015-09-04T00:00:00+0100")).setIssueUpdateDate(parseDateTime("2015-10-04T00:00:00+0100"));
  IssueDto issueBeforeLeak=IssueTesting.newDto(rule,file,project).setKee(UUID_EXAMPLE_02).setIssueCreationDate(parseDateTime("2014-09-04T00:00:00+0100")).setIssueUpdateDate(parseDateTime("2015-10-04T00:00:00+0100"));
  db.issueDao().insert(session,issueAfterLeak,issueBeforeLeak);
  session.commit();
  tester.get(IssueIndexer.class).indexAll();
  wsTester.newGetRequest(IssuesWs.API_ENDPOINT,SearchAction.SEARCH_ACTION).setParam(IssueFilterParameters.COMPONENT_UUIDS,project.uuid()).setParam(IssueFilterParameters.FILE_UUIDS,file.uuid()).setParam(IssueFilterParameters.SINCE_LEAK_PERIOD,"true").execute().assertJson(this.getClass(),"search_since_leak_period.json");
}
