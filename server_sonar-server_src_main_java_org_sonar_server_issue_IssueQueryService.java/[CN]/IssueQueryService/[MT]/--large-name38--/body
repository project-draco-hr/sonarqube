{
  Set<String> allComponentUuids=Sets.newHashSet();
  boolean effectiveOnComponentOnly=mergeComponentParameters(session,onComponentOnly,components,componentUuids,componentKeys,componentRootUuids,componentRoots,allComponentUuids);
  builder.onComponentOnly(effectiveOnComponentOnly);
  if (allComponentUuids.isEmpty()) {
    builder.setContextualized(false);
    addComponentsBelowView(builder,session,authors,projects,projectUuids,moduleUuids,directories,fileUuids);
  }
 else {
    if (effectiveOnComponentOnly) {
      builder.setContextualized(false);
      builder.componentUuids(allComponentUuids);
      return;
    }
    builder.setContextualized(true);
    Set<String> qualifiers=componentService.getDistinctQualifiers(session,allComponentUuids);
    if (qualifiers.isEmpty()) {
      builder.componentUuids(allComponentUuids);
      return;
    }
    if (qualifiers.size() > 1) {
      throw new IllegalArgumentException("All components must have the same qualifier, found " + Joiner.on(',').join(qualifiers));
    }
    String uniqueQualifier=qualifiers.iterator().next();
    if (Qualifiers.VIEW.equals(uniqueQualifier) || Qualifiers.SUBVIEW.equals(uniqueQualifier)) {
      List<String> filteredViewUuids=newArrayList();
      for (      String viewUuid : allComponentUuids) {
        if ((Qualifiers.VIEW.equals(uniqueQualifier) && UserSession.get().hasProjectPermissionByUuid(UserRole.USER,viewUuid)) || (Qualifiers.SUBVIEW.equals(uniqueQualifier) && UserSession.get().hasComponentUuidPermission(UserRole.USER,viewUuid))) {
          filteredViewUuids.add(viewUuid);
        }
      }
      if (filteredViewUuids.isEmpty()) {
        filteredViewUuids.add(UNKNOWN);
      }
      builder.viewUuids(filteredViewUuids);
      addComponentsBelowView(builder,session,authors,projects,projectUuids,moduleUuids,directories,fileUuids);
    }
 else     if ("DEV".equals(uniqueQualifier)) {
      Collection<String> actualAuthors=authors == null ? authorDao.selectScmAccountsByDeveloperUuids(allComponentUuids) : authors;
      addComponentsBelowView(builder,session,actualAuthors,projects,projectUuids,moduleUuids,directories,fileUuids);
    }
 else     if (Qualifiers.PROJECT.equals(uniqueQualifier)) {
      builder.projectUuids(allComponentUuids);
      addComponentsBelowModule(builder,moduleUuids,directories,fileUuids);
    }
 else     if (Qualifiers.MODULE.equals(uniqueQualifier)) {
      builder.moduleRootUuids(allComponentUuids);
      addComponentsBelowModule(builder,moduleUuids,directories,fileUuids);
    }
 else     if (Qualifiers.DIRECTORY.equals(uniqueQualifier)) {
      Collection<String> directoryModuleUuids=Sets.newHashSet();
      Collection<String> directoryPaths=Sets.newHashSet();
      for (      ComponentDto directory : componentService.getByUuids(session,allComponentUuids)) {
        directoryModuleUuids.add(directory.moduleUuid());
        directoryPaths.add(directory.path());
      }
      builder.moduleUuids(directoryModuleUuids);
      builder.directories(directoryPaths);
      addComponentsBelowDirectory(builder,fileUuids);
    }
 else     if (Qualifiers.FILE.equals(uniqueQualifier) || Qualifiers.UNIT_TEST_FILE.equals(uniqueQualifier)) {
      builder.fileUuids(allComponentUuids);
    }
 else {
      throw new IllegalArgumentException("Unable to set search root context for components " + Joiner.on(',').join(allComponentUuids));
    }
  }
}
