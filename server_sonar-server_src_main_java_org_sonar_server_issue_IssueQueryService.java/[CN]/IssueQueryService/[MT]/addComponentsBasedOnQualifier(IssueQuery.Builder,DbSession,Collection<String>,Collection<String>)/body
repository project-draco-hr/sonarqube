{
  Set<String> qualifiers=componentService.getDistinctQualifiers(session,componentUuids);
  if (qualifiers.isEmpty()) {
    builder.componentUuids(componentUuids);
    return;
  }
  if (qualifiers.size() > 1) {
    throw new IllegalArgumentException("All components must have the same qualifier, found " + Joiner.on(',').join(qualifiers));
  }
  String uniqueQualifier=qualifiers.iterator().next();
switch (uniqueQualifier) {
case Qualifiers.VIEW:
case Qualifiers.SUBVIEW:
    addViewsOrSubViews(builder,componentUuids,uniqueQualifier);
  break;
case "DEV":
Collection<String> actualAuthors=authorsFromParamsOrFromDeveloper(session,componentUuids,authors);
builder.authors(actualAuthors);
break;
case "DEV_PRJ":
addDeveloperTechnicalProjects(builder,session,componentUuids,authors);
break;
case Qualifiers.PROJECT:
builder.projectUuids(componentUuids);
break;
case Qualifiers.MODULE:
builder.moduleRootUuids(componentUuids);
break;
case Qualifiers.DIRECTORY:
addDirectories(builder,session,componentUuids);
break;
case Qualifiers.FILE:
case Qualifiers.UNIT_TEST_FILE:
builder.fileUuids(componentUuids);
break;
default :
throw new IllegalArgumentException("Unable to set search root context for components " + Joiner.on(',').join(componentUuids));
}
}
