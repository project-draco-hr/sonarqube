{
  MutablePicoContainer pico=IocContainer.buildPicoContainer();
  AbstractPluginRepository repository=new AbstractPluginRepository(){
    @Override protected boolean shouldRegisterExtension(    String pluginKey,    Object extension){
      return isType(extension,ServerExtension.class);
    }
  }
;
  Plugin plugin=mock(Plugin.class);
  when(plugin.getExtensions()).thenReturn(Arrays.asList(A.class,BProvider.class,B.class,C.class,D.class));
  repository.registerPlugin(pico,plugin,"foo");
  repository.invokeExtensionProviders(pico);
  pico.start();
  assertThat(pico.getComponent(A.class),is(A.class));
  assertThat(pico.getComponent(C.class),is(C.class));
  assertThat(pico.getComponent(D.class),is(D.class));
  assertThat(pico.getComponent(C.class).getBees().length,is(3));
  assertThat(pico.getComponent(D.class).getBees().length,is(3));
  assertThat(pico.getComponent(BProvider.class).calls,is(1));
  assertThat(pico.getComponents(B.class).size(),is(3));
}
