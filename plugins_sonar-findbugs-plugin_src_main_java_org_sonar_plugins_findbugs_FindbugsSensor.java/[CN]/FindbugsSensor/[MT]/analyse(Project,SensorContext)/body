{
  if (project.getReuseExistingRulesConfig()) {
    LOG.warn("Reusing existing Findbugs configuration not supported any more.");
  }
  File report=getFindbugsReportFile(project);
  if (report == null) {
    report=executor.execute();
  }
  FindbugsXmlReportParser reportParser=new FindbugsXmlReportParser(report);
  List<FindbugsXmlReportParser.XmlBugInstance> bugInstances=reportParser.getBugInstances();
  for (  FindbugsXmlReportParser.XmlBugInstance bugInstance : bugInstances) {
    FindbugsXmlReportParser.XmlSourceLineAnnotation sourceLine=bugInstance.getPrimarySourceLine();
    if (sourceLine == null) {
      LOG.warn("No source line for " + bugInstance.getType());
      continue;
    }
    Rule rule=ruleFinder.findByKey(FindbugsConstants.REPOSITORY_KEY,bugInstance.getType());
    if (rule == null) {
      LOG.warn("Findbugs rule '{}' not active in Sonar.",bugInstance.getType());
      continue;
    }
    JavaFile resource=new JavaFile(sourceLine.getSonarJavaFileKey());
    if (context.getResource(resource) != null) {
      Violation violation=Violation.create(rule,resource).setLineId(sourceLine.getStart()).setMessage(bugInstance.getLongMessage());
      context.saveViolation(violation);
    }
  }
}
