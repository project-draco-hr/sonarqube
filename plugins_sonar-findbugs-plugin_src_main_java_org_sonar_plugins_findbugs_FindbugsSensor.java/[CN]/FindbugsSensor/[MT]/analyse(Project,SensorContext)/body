{
  if (project.getReuseExistingRulesConfig()) {
    LOG.warn("Reusing existing Findbugs configuration not supported any more.");
  }
  BugCollection collection=executor.execute();
  for (  BugInstance bugInstance : collection) {
    SourceLineAnnotation sourceLine=bugInstance.getPrimarySourceLineAnnotation();
    if (sourceLine == null) {
      LOG.warn("No source line for " + bugInstance.getType());
      continue;
    }
    Rule rule=ruleFinder.findByKey(FindbugsConstants.REPOSITORY_KEY,bugInstance.getType());
    if (rule == null) {
      LOG.warn("Findbugs rule '{}' not active in Sonar.",bugInstance.getType());
      continue;
    }
    String longMessage=bugInstance.getMessageWithoutPrefix();
    String className=bugInstance.getPrimarySourceLineAnnotation().getClassName();
    int start=bugInstance.getPrimarySourceLineAnnotation().getStartLine();
    JavaFile resource=new JavaFile(getSonarJavaFileKey(className));
    if (context.getResource(resource) != null) {
      Violation violation=Violation.create(rule,resource).setLineId(start).setMessage(longMessage);
      context.saveViolation(violation);
    }
  }
}
