{
  Collection<DefaultIssue> issues=Lists.newArrayList();
  for (  Issue issue : issueCache.byComponent(component.resource().getEffectiveKey())) {
    issues.add((DefaultIssue)issue);
  }
  issueCache.clear(component.resource().getEffectiveKey());
  if (analysisMode.isIncremental() && !component.isFile()) {
    return;
  }
  Collection<ServerIssue> serverIssues=loadServerIssues(component);
  SourceHashHolder sourceHashHolder=loadSourceHashes(component);
  IssueTrackingResult trackingResult=tracking.track(sourceHashHolder,serverIssues,issues);
  addUnmatched(trackingResult.unmatched(),sourceHashHolder,issues);
  mergeMatched(trackingResult);
  if (ResourceUtils.isRootProject(component.resource())) {
    addIssuesOnDeletedComponents(issues);
  }
  for (  DefaultIssue issue : issues) {
    workflow.doAutomaticTransition(issue,changeContext);
    issueCache.put(issue);
  }
}
