{
  dbTester.prepareDbUnit(getClass(),"shared.xml");
  settings.setProperty("sonar.timemachine.period1","2008-11-22");
  settings.setProperty("sonar.timemachine.period2","10");
  settings.setProperty("sonar.timemachine.period3","previous_analysis");
  settings.setProperty("sonar.timemachine.period4","previous_version");
  settings.setProperty("sonar.timemachine.period5","0.9");
  sut.execute();
  List<Period> periods=periodsHolder.getPeriods();
  List<String> periodModes=newArrayList(Iterables.transform(periods,new Function<Period,String>(){
    @Override public String apply(    Period input){
      return input.getMode();
    }
  }
));
  assertThat(periodModes).containsOnly(CoreProperties.TIMEMACHINE_MODE_DATE,CoreProperties.TIMEMACHINE_MODE_DAYS,CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS,CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION,CoreProperties.TIMEMACHINE_MODE_VERSION);
  assertThat(periods.get(0).getMode()).isEqualTo(CoreProperties.TIMEMACHINE_MODE_DATE);
  assertThat(periods.get(0).getIndex()).isEqualTo(1);
  assertThat(periods.get(0).getProjectSnapshot().getId()).isEqualTo(1003L);
  assertThat(periods.get(1).getMode()).isEqualTo(CoreProperties.TIMEMACHINE_MODE_DAYS);
  assertThat(periods.get(1).getIndex()).isEqualTo(2);
  assertThat(periods.get(1).getProjectSnapshot().getId()).isEqualTo(1002L);
  assertThat(periods.get(2).getMode()).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);
  assertThat(periods.get(2).getIndex()).isEqualTo(3);
  assertThat(periods.get(2).getProjectSnapshot().getId()).isEqualTo(1004L);
  assertThat(periods.get(3).getMode()).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION);
  assertThat(periods.get(3).getIndex()).isEqualTo(4);
  assertThat(periods.get(3).getProjectSnapshot().getId()).isEqualTo(1001L);
  assertThat(periods.get(4).getMode()).isEqualTo(CoreProperties.TIMEMACHINE_MODE_VERSION);
  assertThat(periods.get(4).getIndex()).isEqualTo(5);
  assertThat(periods.get(4).getProjectSnapshot().getId()).isEqualTo(1000L);
}
