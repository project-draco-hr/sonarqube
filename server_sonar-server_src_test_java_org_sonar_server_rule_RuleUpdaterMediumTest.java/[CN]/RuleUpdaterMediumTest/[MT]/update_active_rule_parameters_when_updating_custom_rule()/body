{
  RuleDto templateRule=RuleTesting.newTemplateRule(RuleKey.of("java","S001")).setLanguage("xoo");
  ruleDao.insert(dbSession,templateRule);
  RuleParamDto templateRuleParam1=RuleParamDto.createFor(templateRule).setName("regex").setType("STRING").setDescription("Reg ex").setDefaultValue(".*");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam1);
  RuleParamDto templateRuleParam2=RuleParamDto.createFor(templateRule).setName("format").setType("STRING").setDescription("format").setDefaultValue("csv");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam2);
  RuleParamDto templateRuleParam3=RuleParamDto.createFor(templateRule).setName("message").setType("STRING").setDescription("message");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam3);
  RuleDto customRule=RuleTesting.newCustomRule(templateRule).setSeverity(Severity.MAJOR).setLanguage("xoo");
  ruleDao.insert(dbSession,customRule);
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam1.setDefaultValue("a.*"));
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam2.setDefaultValue("txt"));
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam3);
  QualityProfileDto profileDto=QProfileTesting.newXooP1();
  db.qualityProfileDao().insert(dbSession,profileDto);
  dbSession.commit();
  RuleActivation activation=new RuleActivation(customRule.getKey()).setSeverity(Severity.BLOCKER);
  tester.get(RuleActivator.class).activate(dbSession,activation,QProfileTesting.XOO_P1_NAME);
  dbSession.commit();
  dbSession.clearCache();
  RuleUpdate update=RuleUpdate.createForCustomRule(customRule.getKey()).setParameters(ImmutableMap.of("regex","b.*","message","a message"));
  updater.update(dbSession,update,userSessionRule);
  dbSession.clearCache();
  Rule customRuleReloaded=ruleIndex.getByKey(customRule.getKey());
  assertThat(customRuleReloaded.params()).hasSize(3);
  assertThat(customRuleReloaded.param("regex")).isNotNull();
  assertThat(customRuleReloaded.param("regex").defaultValue()).isEqualTo("b.*");
  assertThat(customRuleReloaded.param("message")).isNotNull();
  assertThat(customRuleReloaded.param("message").defaultValue()).isEqualTo("a message");
  assertThat(customRuleReloaded.param("format")).isNotNull();
  assertThat(customRuleReloaded.param("format").defaultValue()).isNull();
  RuleParam param=customRuleReloaded.params().get(0);
  assertThat(param.defaultValue()).isEqualTo("b.*");
  ActiveRule activeRule=tester.get(ActiveRuleIndex.class).getByKey(ActiveRuleKey.of(profileDto.getKey(),customRule.getKey()));
  assertThat(activeRule.params()).hasSize(2);
  assertThat(activeRule.params().get("regex")).isEqualTo("b.*");
  assertThat(activeRule.params().get("message")).isEqualTo("a message");
  assertThat(activeRule.params().get("format")).isNull();
  assertThat(activeRule.severity()).isEqualTo(Severity.BLOCKER);
}
