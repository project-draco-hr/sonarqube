{
  RuleDto templateRule=RuleTesting.newTemplateRule(RuleKey.of("java","S001")).setLanguage("xoo");
  ruleDao.insert(dbSession,templateRule);
  RuleParamDto templateRuleParam1=RuleParamDto.createFor(templateRule).setName("regex").setType("STRING").setDescription("Reg ex").setDefaultValue(".*");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam1);
  RuleParamDto templateRuleParam2=RuleParamDto.createFor(templateRule).setName("format").setType("STRING").setDescription("format").setDefaultValue("csv");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam2);
  RuleParamDto templateRuleParam3=RuleParamDto.createFor(templateRule).setName("message").setType("STRING").setDescription("message");
  ruleDao.insertRuleParam(dbSession,templateRule,templateRuleParam3);
  RuleDto customRule=RuleTesting.newCustomRule(templateRule).setSeverity(Severity.MAJOR).setLanguage("xoo");
  ruleDao.insert(dbSession,customRule);
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam1.setDefaultValue("a.*"));
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam2.setDefaultValue("txt"));
  ruleDao.insertRuleParam(dbSession,customRule,templateRuleParam3);
  QualityProfileDto profileDto=QProfileTesting.newXooP1();
  db.qualityProfileDao().insert(dbSession,profileDto);
  dbSession.commit();
  RuleActivation activation=new RuleActivation(customRule.getKey()).setSeverity(Severity.BLOCKER);
  tester.get(RuleActivator.class).activate(dbSession,activation,QProfileTesting.XOO_P1_NAME);
  dbSession.commit();
  dbSession.clearCache();
  RuleUpdate update=RuleUpdate.createForCustomRule(customRule.getKey()).setParameters(ImmutableMap.of("regex","b.*","message","a message"));
  underTest.update(update,userSessionRule);
  dbSession.clearCache();
  List<RuleParamDto> params=ruleDao.selectRuleParamsByRuleKey(dbSession,customRule.getKey());
  assertThat(params).hasSize(3);
  Map<String,RuleParamDto> paramsByKey=paramsByKey(params);
  assertThat(paramsByKey.get("regex")).isNotNull();
  assertThat(paramsByKey.get("regex").getDefaultValue()).isEqualTo("b.*");
  assertThat(paramsByKey.get("message")).isNotNull();
  assertThat(paramsByKey.get("message").getDefaultValue()).isEqualTo("a message");
  assertThat(paramsByKey.get("format")).isNotNull();
  assertThat(paramsByKey.get("format").getDefaultValue()).isNull();
  ActiveRuleDto activeRuleDto=db.activeRuleDao().selectOrFailByKey(dbSession,ActiveRuleKey.of(profileDto.getKey(),customRule.getKey()));
  assertThat(activeRuleDto.getSeverityString()).isEqualTo(Severity.BLOCKER);
  List<ActiveRuleParamDto> activeRuleParams=db.activeRuleDao().selectParamsByActiveRuleId(dbSession,activeRuleDto.getId());
  Map<String,ActiveRuleParamDto> activeRuleParamsByKey=ActiveRuleParamDto.groupByKey(activeRuleParams);
  assertThat(activeRuleParamsByKey.get("regex").getValue()).isEqualTo("b.*");
  assertThat(activeRuleParamsByKey.get("message").getValue()).isEqualTo("a message");
  assertThat(activeRuleParamsByKey.get("format")).isNull();
}
