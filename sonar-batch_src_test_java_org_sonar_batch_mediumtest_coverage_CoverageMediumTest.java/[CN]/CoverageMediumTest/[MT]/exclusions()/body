{
  File baseDir=temp.newFolder();
  File srcDir=new File(baseDir,"src");
  srcDir.mkdir();
  File xooFile=new File(srcDir,"sample.xoo");
  File xooUtCoverageFile=new File(srcDir,"sample.xoo.coverage");
  FileUtils.write(xooFile,"function foo() {\n  if (a && b) {\nalert('hello');\n}\n}");
  FileUtils.write(xooUtCoverageFile,"2:2:2:1\n3:1");
  TaskResult result=tester.newTask().properties(ImmutableMap.<String,String>builder().put("sonar.task","scan").put("sonar.projectBaseDir",baseDir.getAbsolutePath()).put("sonar.projectKey","com.foo.project").put("sonar.projectName","Foo Project").put("sonar.projectVersion","1.0-SNAPSHOT").put("sonar.projectDescription","Description of Foo Project").put("sonar.sources","src").put("sonar.coverage.exclusions","**/sample.xoo").build()).start();
  InputFile file=result.inputFile("src/sample.xoo");
  assertThat(result.coverageFor(file,2)).isNull();
  Map<String,List<org.sonar.batch.protocol.output.BatchReport.Measure>> allMeasures=result.allMeasures();
  assertThat(allMeasures.get("com.foo.project:src/sample.xoo")).extracting("metricKey").doesNotContain(CoreMetrics.LINES_TO_COVER_KEY,CoreMetrics.UNCOVERED_LINES_KEY,CoreMetrics.CONDITIONS_TO_COVER_KEY,CoreMetrics.COVERED_CONDITIONS_BY_LINE_KEY);
}
