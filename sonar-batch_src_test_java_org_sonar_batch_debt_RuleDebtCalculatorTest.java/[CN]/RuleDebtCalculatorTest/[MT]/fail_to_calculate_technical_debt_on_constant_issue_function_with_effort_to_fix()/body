{
  RuleKey ruleKey=RuleKey.of("squid","AvoidCycle");
  DefaultIssue issue=new DefaultIssue().setKey("ABCDE").setRuleKey(ruleKey).setEffortToFix(2d);
  DefaultRequirement requirement=new DefaultRequirement().setFunction("constant_issue").setOffsetValue(5).setOffsetUnit(WorkDuration.UNIT.MINUTES);
  when(model.requirementsByRule(ruleKey)).thenReturn(requirement);
  try {
    assertThat(calculator.calculateTechnicalDebt(issue.ruleKey(),issue.effortToFix())).isEqualTo(15);
    fail();
  }
 catch (  Exception e) {
    assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage("Requirement for 'squid:AvoidCycle' can not use 'Constant/issue' remediation function because this rule does not have a fixed remediation cost.");
  }
}
