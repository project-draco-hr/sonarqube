{
  HttpSession httpSession=mock(HttpSession.class);
  when(httpSession.getAttribute("user_id")).thenReturn(123L);
  when(httpSession.getAttribute("login")).thenReturn("karadoc");
  HttpServletRequest httpRequest=mock(HttpServletRequest.class);
  when(httpRequest.getSession(true)).thenReturn(httpSession);
  ServletResponse httpResponse=mock(ServletResponse.class);
  FilterChain chain=mock(FilterChain.class);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      assertThat(UserSession.get()).isNotNull();
      assertThat(UserSession.get().login()).isEqualTo("karadoc");
      assertThat(UserSession.get().userId()).isEqualTo(123);
      assertThat(UserSession.get().isLoggedIn()).isTrue();
      return null;
    }
  }
).when(chain).doFilter(httpRequest,httpResponse);
  UserSessionFilter filter=new UserSessionFilter();
  filter.doFilter(httpRequest,httpResponse,chain);
  verify(chain).doFilter(httpRequest,httpResponse);
}
