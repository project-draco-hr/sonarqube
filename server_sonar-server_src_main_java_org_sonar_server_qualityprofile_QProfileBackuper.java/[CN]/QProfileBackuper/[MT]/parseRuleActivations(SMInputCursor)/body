{
  List<RuleActivation> activations=Lists.newArrayList();
  Set<RuleKey> activatedKeys=Sets.newHashSet();
  List<RuleKey> duplicatedKeys=Lists.newArrayList();
  while (rulesCursor.getNext() != null) {
    SMInputCursor ruleCursor=rulesCursor.childElementCursor();
    String repositoryKey=null;
    String key=null;
    String severity=null;
    Map<String,String> parameters=Maps.newHashMap();
    while (ruleCursor.getNext() != null) {
      String nodeName=ruleCursor.getLocalName();
      if (StringUtils.equals("repositoryKey",nodeName)) {
        repositoryKey=StringUtils.trim(ruleCursor.collectDescendantText(false));
      }
 else       if (StringUtils.equals("key",nodeName)) {
        key=StringUtils.trim(ruleCursor.collectDescendantText(false));
      }
 else       if (StringUtils.equals("priority",nodeName)) {
        severity=StringUtils.trim(ruleCursor.collectDescendantText(false));
      }
 else       if (StringUtils.equals("parameters",nodeName)) {
        SMInputCursor propsCursor=ruleCursor.childElementCursor("parameter");
        readParameters(propsCursor,parameters);
      }
    }
    RuleKey ruleKey=RuleKey.of(repositoryKey,key);
    if (activatedKeys.contains(ruleKey)) {
      duplicatedKeys.add(ruleKey);
    }
    activatedKeys.add(ruleKey);
    RuleActivation activation=new RuleActivation(ruleKey);
    activation.setSeverity(severity);
    activation.setParameters(parameters);
    activations.add(activation);
  }
  if (!duplicatedKeys.isEmpty()) {
    throw new IllegalArgumentException("The quality profile cannot be restored as it contains duplicates for the following rules: " + RULEKEY_JOINER.join(duplicatedKeys));
  }
  return activations;
}
