{
  register=Lists.newArrayList();
  classLoaders=new ClassLoadersCollection(Thread.currentThread().getContextClassLoader());
  List<JpaPlugin> jpaPlugins=dao.getPlugins();
  for (  JpaPlugin pluginMetadata : jpaPlugins) {
    if (StringUtils.isEmpty(pluginMetadata.getBasePlugin())) {
      String key=pluginMetadata.getKey();
      List<URL> urls=download(pluginMetadata);
      classLoaders.createClassLoader(key,urls,pluginMetadata.isUseChildFirstClassLoader() == Boolean.TRUE);
      register.add(pluginMetadata);
    }
  }
  for (  JpaPlugin pluginMetadata : jpaPlugins) {
    String pluginKey=pluginMetadata.getKey();
    String basePluginKey=pluginMetadata.getBasePlugin();
    if (StringUtils.isNotEmpty(basePluginKey)) {
      if (classLoaders.get(basePluginKey) != null) {
        LOG.debug("Plugin {} extends {}",pluginKey,basePluginKey);
        List<URL> urls=download(pluginMetadata);
        classLoaders.extend(basePluginKey,pluginKey,urls);
        register.add(pluginMetadata);
      }
 else {
        LOG.warn("Plugin {} extends nonexistent plugin {}",pluginKey,basePluginKey);
      }
    }
  }
  classLoaders.done();
}
