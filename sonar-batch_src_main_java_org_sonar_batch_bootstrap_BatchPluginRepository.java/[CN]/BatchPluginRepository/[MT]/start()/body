{
  List<JpaPlugin> pluginsMetadata=Lists.newArrayList();
  pluginsByKey=Maps.newHashMap();
  ClassLoadersCollection classLoaders=new ClassLoadersCollection(Thread.currentThread().getContextClassLoader());
  List<JpaPlugin> jpaPlugins=dao.getPlugins();
  for (  JpaPlugin pluginMetadata : jpaPlugins) {
    if (StringUtils.isEmpty(pluginMetadata.getBasePlugin())) {
      String key=pluginMetadata.getKey();
      List<URL> urls=download(pluginMetadata);
      classLoaders.createClassLoader(key,urls,pluginMetadata.isUseChildFirstClassLoader() == Boolean.TRUE);
      pluginsMetadata.add(pluginMetadata);
    }
  }
  for (  JpaPlugin pluginMetadata : jpaPlugins) {
    String pluginKey=pluginMetadata.getKey();
    String basePluginKey=pluginMetadata.getBasePlugin();
    if (StringUtils.isNotEmpty(basePluginKey)) {
      if (classLoaders.get(basePluginKey) != null) {
        LOG.debug("Plugin {} extends {}",pluginKey,basePluginKey);
        List<URL> urls=download(pluginMetadata);
        classLoaders.extend(basePluginKey,pluginKey,urls);
        pluginsMetadata.add(pluginMetadata);
      }
 else {
        LOG.warn("Plugin {} extends nonexistent plugin {}",pluginKey,basePluginKey);
      }
    }
  }
  for (  JpaPlugin pluginMetadata : jpaPlugins) {
    try {
      Class claz=classLoaders.get(pluginMetadata.getKey()).loadClass(pluginMetadata.getPluginClass());
      Plugin plugin=(Plugin)claz.newInstance();
      pluginsByKey.put(pluginMetadata.getKey(),plugin);
    }
 catch (    Exception e) {
      throw new SonarException("Fail to load plugin " + pluginMetadata.getKey(),e);
    }
  }
  classLoaders.done();
}
