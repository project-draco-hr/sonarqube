{
  DbFileSources.Data.Builder dataBuilder=DbFileSources.Data.newBuilder();
  CSVParser parser=null;
  try {
    if (data != null) {
      parser=CSVParser.parse(data,CSVFormat.DEFAULT);
      Iterator<CSVRecord> rows=parser.iterator();
      int line=1;
      while (rows.hasNext()) {
        CSVRecord row=rows.next();
        if (row.size() == 16) {
          DbFileSources.Line.Builder lineBuilder=dataBuilder.addLinesBuilder();
          lineBuilder.setLine(line);
          String s=row.get(0);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setScmRevision(s);
          }
          s=row.get(1);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setScmAuthor(s);
          }
          Date scmDate=DateUtils.parseDateTimeQuietly(row.get(2));
          if (scmDate != null) {
            lineBuilder.setScmDate(scmDate.getTime());
          }
          s=row.get(3);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setUtLineHits(Integer.parseInt(s));
          }
          s=row.get(4);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setUtConditions(Integer.parseInt(s));
          }
          s=row.get(5);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setUtCoveredConditions(Integer.parseInt(s));
          }
          s=row.get(6);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setItLineHits(Integer.parseInt(s));
          }
          s=row.get(7);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setItConditions(Integer.parseInt(s));
          }
          s=row.get(8);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setItCoveredConditions(Integer.parseInt(s));
          }
          s=row.get(9);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setOverallLineHits(Integer.parseInt(s));
          }
          s=row.get(10);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setOverallConditions(Integer.parseInt(s));
          }
          s=row.get(11);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setOverallCoveredConditions(Integer.parseInt(s));
          }
          s=row.get(12);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setHighlighting(s);
          }
          s=row.get(13);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.setSymbols(s);
          }
          s=row.get(14);
          if (StringUtils.isNotEmpty(s)) {
            lineBuilder.addAllDuplication(splitIntegers(s));
          }
          s=row.get(15);
          if (s != null) {
            lineBuilder.setSource(s);
          }
        }
        line++;
      }
    }
    return FileSourceDto.encodeSourceData(dataBuilder.build());
  }
 catch (  Exception e) {
    Loggers.get(FeedFileSourcesBinaryData.class).debug("Invalid FILE_SOURCES.DATA on row with ID {}, data will be ignored. {}",fileSourceId,Throwables.getStackTraceAsString(e));
    return FileSourceDto.encodeSourceData(dataBuilder.clear().build());
  }
 finally {
    IOUtils.closeQuietly(parser);
  }
}
