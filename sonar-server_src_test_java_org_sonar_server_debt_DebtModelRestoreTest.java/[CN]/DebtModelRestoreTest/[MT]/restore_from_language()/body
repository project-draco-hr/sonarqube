{
  Date oldDate=DateUtils.parseDate("2014-01-01");
  characteristics.addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY");
  when(dao.selectEnabledCharacteristics()).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setOrder(2).setCreatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler updated").setParentId(1).setCreatedAt(oldDate)));
  when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setId(1).setRepositoryKey("squid").setCharacteristicId(2).setRemediationFunction("LINEAR_OFFSET").setRemediationFactor("2h").setRemediationOffset("15min").setCreatedAt(oldDate).setUpdatedAt(oldDate),new RuleDto().setId(2).setRepositoryKey("checkstyle").setCharacteristicId(3).setRemediationFunction("LINEAR").setRemediationFactor("2h").setCreatedAt(oldDate).setUpdatedAt(oldDate)));
  RuleRepositories.Repository squid=mock(RuleRepositories.Repository.class);
  when(squid.getKey()).thenReturn("squid");
  when(ruleRepositories.repositoriesForLang("java")).thenReturn(newArrayList(squid));
  debtModelRestore.restore("java");
  verify(dao).selectEnabledCharacteristics();
  verify(dao,times(2)).update(any(CharacteristicDto.class),eq(session));
  verifyNoMoreInteractions(dao);
  verify(ruleDao).selectEnablesAndNonManual(session);
  ArgumentCaptor<RuleDto> ruleArgument=ArgumentCaptor.forClass(RuleDto.class);
  verify(ruleDao).update(ruleArgument.capture(),eq(session));
  verifyNoMoreInteractions(ruleDao);
  RuleDto rule=ruleArgument.getValue();
  assertThat(rule.getId()).isEqualTo(1);
  verify(session).commit();
}
