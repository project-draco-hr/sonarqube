{
  debtModelRestore.restoreCharacteristics(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER_RELATED_PORTABILITY").setName("Compiler"),"PORTABILITY"),Collections.<CharacteristicDto>emptyList(),now,session);
  ArgumentCaptor<CharacteristicDto> characteristicArgument=ArgumentCaptor.forClass(CharacteristicDto.class);
  verify(dao,times(2)).insert(characteristicArgument.capture(),eq(session));
  assertThat(characteristicArgument.getAllValues().get(0).getId()).isEqualTo(10);
  assertThat(characteristicArgument.getAllValues().get(0).getKey()).isEqualTo("PORTABILITY");
  assertThat(characteristicArgument.getAllValues().get(0).getName()).isEqualTo("Portability");
  assertThat(characteristicArgument.getAllValues().get(0).getParentId()).isNull();
  assertThat(characteristicArgument.getAllValues().get(0).getOrder()).isEqualTo(1);
  assertThat(characteristicArgument.getAllValues().get(0).getCreatedAt()).isEqualTo(now);
  assertThat(characteristicArgument.getAllValues().get(0).getUpdatedAt()).isNull();
  assertThat(characteristicArgument.getAllValues().get(1).getId()).isEqualTo(11);
  assertThat(characteristicArgument.getAllValues().get(1).getKey()).isEqualTo("COMPILER_RELATED_PORTABILITY");
  assertThat(characteristicArgument.getAllValues().get(1).getName()).isEqualTo("Compiler");
  assertThat(characteristicArgument.getAllValues().get(1).getParentId()).isEqualTo(10);
  assertThat(characteristicArgument.getAllValues().get(1).getOrder()).isNull();
  assertThat(characteristicArgument.getAllValues().get(1).getCreatedAt()).isEqualTo(now);
  assertThat(characteristicArgument.getAllValues().get(1).getUpdatedAt()).isNull();
}
