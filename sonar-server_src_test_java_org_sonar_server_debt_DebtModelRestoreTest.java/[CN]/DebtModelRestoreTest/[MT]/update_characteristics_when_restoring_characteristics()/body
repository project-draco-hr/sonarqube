{
  Date oldDate=DateUtils.parseDate("2014-01-01");
  debtModelRestore.restoreCharacteristics(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER_RELATED_PORTABILITY").setName("Compiler"),"PORTABILITY"),newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setOrder(2).setCreatedAt(oldDate).setUpdatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER_RELATED_PORTABILITY").setName("Compiler updated").setParentId(1).setCreatedAt(oldDate).setUpdatedAt(oldDate)),now,session);
  ArgumentCaptor<CharacteristicDto> characteristicArgument=ArgumentCaptor.forClass(CharacteristicDto.class);
  verify(dao,times(2)).update(characteristicArgument.capture(),eq(session));
  CharacteristicDto dto1=characteristicArgument.getAllValues().get(0);
  assertThat(dto1.getId()).isEqualTo(1);
  assertThat(dto1.getKey()).isEqualTo("PORTABILITY");
  assertThat(dto1.getName()).isEqualTo("Portability");
  assertThat(dto1.getParentId()).isNull();
  assertThat(dto1.getOrder()).isEqualTo(1);
  assertThat(dto1.getCreatedAt()).isEqualTo(oldDate);
  assertThat(dto1.getUpdatedAt()).isEqualTo(now);
  CharacteristicDto dto2=characteristicArgument.getAllValues().get(1);
  assertThat(dto2.getId()).isEqualTo(2);
  assertThat(dto2.getKey()).isEqualTo("COMPILER_RELATED_PORTABILITY");
  assertThat(dto2.getName()).isEqualTo("Compiler");
  assertThat(dto2.getParentId()).isEqualTo(1);
  assertThat(dto2.getOrder()).isNull();
  assertThat(dto2.getCreatedAt()).isEqualTo(oldDate);
  assertThat(dto2.getUpdatedAt()).isEqualTo(now);
}
