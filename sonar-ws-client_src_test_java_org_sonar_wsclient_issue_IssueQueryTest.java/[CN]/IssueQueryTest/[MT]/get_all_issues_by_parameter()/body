{
  IssueQuery query=IssueQuery.create().issues("ABCDE","FGHIJ").assignees("arthur","perceval").components("Action.java","Filter.java").componentRoots("struts").resolutions("FIXED","FALSE-POSITIVE").rules("squid:AvoidCycle").statuses("OPEN","CLOSED").severities("BLOCKER","INFO").userLogins("login1","login2").sort("assignee").asc(false).pageSize(5).pageIndex(4);
  assertThat(query.urlParams()).hasSize(13);
  assertThat(query.urlParams()).includes(entry("issues","ABCDE,FGHIJ"));
  assertThat(query.urlParams()).includes(entry("assignees","arthur,perceval"));
  assertThat(query.urlParams()).includes(entry("components","Action.java,Filter.java"));
  assertThat(query.urlParams()).includes(entry("componentRoots","struts"));
  assertThat(query.urlParams()).includes(entry("resolutions","FIXED,FALSE-POSITIVE"));
  assertThat(query.urlParams()).includes(entry("statuses","OPEN,CLOSED"));
  assertThat(query.urlParams()).includes(entry("severities","BLOCKER,INFO"));
  assertThat(query.urlParams()).includes(entry("userLogins","login1,login2"));
  assertThat(query.urlParams()).includes(entry("sort","assignee"));
  assertThat(query.urlParams()).includes(entry("asc",false));
  assertThat(query.urlParams()).includes(entry("pageSize",5));
  assertThat(query.urlParams()).includes(entry("pageIndex",4));
}
