{
  TinkerGraph graph=TinkerGraphFactory.createTinkerGraph();
  StringWriter stream=new StringWriter();
  Set<String> edgeKeys=new HashSet<>();
  edgeKeys.add(GraphsonTokens._ID);
  edgeKeys.add(GraphsonTokens._IN_V);
  edgeKeys.add(GraphsonTokens._OUT_V);
  edgeKeys.add(GraphsonTokens._LABEL);
  Set<String> vertexKeys=Sets.newHashSet();
  vertexKeys.add(GraphsonTokens._ID);
  GraphsonWriter writer=new GraphsonWriter();
  writer.write(graph,stream,GraphsonMode.EXTENDED,vertexKeys,edgeKeys);
  stream.flush();
  stream.close();
  String jsonString=stream.toString();
  StringReader input=new StringReader(jsonString);
  TinkerGraph emptyGraph=new TinkerGraph();
  new GraphsonReader().read(input,emptyGraph);
  Assert.assertEquals(6,getIterableCount(emptyGraph.getVertices()));
  Assert.assertEquals(6,getIterableCount(emptyGraph.getEdges()));
  for (  Vertex v : graph.getVertices()) {
    Vertex found=emptyGraph.getVertex(v.getId());
    Assert.assertNotNull(v);
    for (    String key : found.getPropertyKeys()) {
      Assert.assertEquals(v.getProperty(key),found.getProperty(key));
    }
    Assert.assertEquals(null,found.getProperty("name"));
  }
  for (  Edge e : graph.getEdges()) {
    Edge found=emptyGraph.getEdge(e.getId());
    Assert.assertNotNull(e);
    for (    String key : found.getPropertyKeys()) {
      Assert.assertEquals(e.getProperty(key),found.getProperty(key));
    }
    Assert.assertEquals(null,found.getProperty("weight"));
  }
}
