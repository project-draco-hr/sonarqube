{
  periodsHolderRule.setPeriods(new Period(1,CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS,null,analysisDate,123L));
  ComponentDto projectDto=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(dbTester.getSession(),projectDto);
  SnapshotDto projectSnapshot=SnapshotTesting.createForProject(projectDto);
  dbClient.snapshotDao().insert(dbTester.getSession(),projectSnapshot);
  ComponentDto moduleDto=ComponentTesting.newModuleDto("BCDE",projectDto).setKey("MODULE_KEY").setName("Module");
  dbClient.componentDao().insert(dbTester.getSession(),moduleDto);
  SnapshotDto moduleSnapshot=SnapshotTesting.createForComponent(moduleDto,projectSnapshot);
  dbClient.snapshotDao().insert(dbTester.getSession(),moduleSnapshot);
  ComponentDto directoryDto=ComponentTesting.newDirectory(moduleDto,"CDEF","MODULE_KEY:src/main/java/dir").setKey("MODULE_KEY:src/main/java/dir");
  dbClient.componentDao().insert(dbTester.getSession(),directoryDto);
  SnapshotDto directorySnapshot=SnapshotTesting.createForComponent(directoryDto,moduleSnapshot);
  dbClient.snapshotDao().insert(dbTester.getSession(),directorySnapshot);
  ComponentDto fileDto=ComponentTesting.newFileDto(moduleDto,"DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(dbTester.getSession(),fileDto);
  SnapshotDto fileSnapshot=SnapshotTesting.createForComponent(fileDto,directorySnapshot);
  dbClient.snapshotDao().insert(dbTester.getSession(),fileSnapshot);
  dbTester.getSession().commit();
  Component file=DumbComponent.builder(Component.Type.FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").build();
  Component directory=DumbComponent.builder(Component.Type.DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").addChildren(file).build();
  Component module=DumbComponent.builder(Component.Type.MODULE,2).setUuid("BCDE").setKey("MODULE_KEY").addChildren(directory).build();
  Component project=DumbComponent.builder(Component.Type.PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).addChildren(module).build();
  treeRootHolder.setRoot(project);
  dbIdsRepository.setComponentId(project,projectDto.getId());
  dbIdsRepository.setComponentId(module,moduleDto.getId());
  dbIdsRepository.setComponentId(directory,directoryDto.getId());
  dbIdsRepository.setComponentId(file,fileDto.getId());
  sut.execute();
  SnapshotDto newProjectSnapshot=getUnprocessedSnapshot(projectDto.getId());
  assertThat(newProjectSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);
  SnapshotDto newModuleSnapshot=getUnprocessedSnapshot(moduleDto.getId());
  assertThat(newModuleSnapshot.getPeriodMode(1)).isEqualTo(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS);
  SnapshotDto newDirectorySnapshot=getUnprocessedSnapshot(directoryDto.getId());
  assertThat(newDirectorySnapshot.getPeriodMode(1)).isNull();
  SnapshotDto newFileSnapshot=getUnprocessedSnapshot(fileDto.getId());
  assertThat(newFileSnapshot.getPeriodMode(1)).isNull();
}
