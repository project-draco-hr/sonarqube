{
  ComponentDto projectDto=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(session,projectDto);
  ComponentDto moduleDto=ComponentTesting.newModuleDto("BCDE",projectDto).setKey("MODULE_KEY").setName("Module");
  dbClient.componentDao().insert(session,moduleDto);
  ComponentDto directoryDto=ComponentTesting.newDirectory(moduleDto,"CDEF","MODULE_KEY:src/main/java/dir").setKey("MODULE_KEY:src/main/java/dir");
  dbClient.componentDao().insert(session,directoryDto);
  ComponentDto fileDto=ComponentTesting.newFileDto(moduleDto,"DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(session,fileDto);
  session.commit();
  Component file=DumbComponent.builder(Component.Type.FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").build();
  Component directory=DumbComponent.builder(Component.Type.DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").addChildren(file).build();
  Component module=DumbComponent.builder(Component.Type.MODULE,2).setUuid("BCDE").setKey("MODULE_KEY").setVersion("1.1").addChildren(directory).build();
  Component project=DumbComponent.builder(Component.Type.PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).setVersion("1.0").addChildren(module).build();
  treeRootHolder.setRoot(project);
  dbIdsRepository.setComponentId(project,projectDto.getId());
  dbIdsRepository.setComponentId(module,moduleDto.getId());
  dbIdsRepository.setComponentId(directory,directoryDto.getId());
  dbIdsRepository.setComponentId(file,fileDto.getId());
  sut.execute();
  assertThat(dbTester.countRowsOfTable("snapshots")).isEqualTo(4);
  SnapshotDto projectSnapshot=getUnprocessedSnapshot(projectDto.getId());
  assertThat(projectSnapshot.getComponentId()).isEqualTo(projectDto.getId());
  assertThat(projectSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(projectSnapshot.getRootId()).isNull();
  assertThat(projectSnapshot.getParentId()).isNull();
  assertThat(projectSnapshot.getDepth()).isEqualTo(0);
  assertThat(projectSnapshot.getPath()).isEqualTo("");
  assertThat(projectSnapshot.getQualifier()).isEqualTo("TRK");
  assertThat(projectSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(projectSnapshot.getVersion()).isEqualTo("1.0");
  assertThat(projectSnapshot.getLast()).isFalse();
  assertThat(projectSnapshot.getStatus()).isEqualTo("U");
  assertThat(projectSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(projectSnapshot.getBuildDate()).isEqualTo(now);
  SnapshotDto moduleSnapshot=getUnprocessedSnapshot(moduleDto.getId());
  assertThat(moduleSnapshot.getComponentId()).isEqualTo(moduleDto.getId());
  assertThat(moduleSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(moduleSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleSnapshot.getParentId()).isEqualTo(projectSnapshot.getId());
  assertThat(moduleSnapshot.getDepth()).isEqualTo(1);
  assertThat(moduleSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + ".");
  assertThat(moduleSnapshot.getQualifier()).isEqualTo("BRC");
  assertThat(moduleSnapshot.getScope()).isEqualTo("PRJ");
  assertThat(moduleSnapshot.getVersion()).isEqualTo("1.1");
  assertThat(moduleSnapshot.getLast()).isFalse();
  assertThat(moduleSnapshot.getStatus()).isEqualTo("U");
  assertThat(moduleSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(moduleSnapshot.getBuildDate()).isEqualTo(now);
  SnapshotDto directorySnapshot=getUnprocessedSnapshot(directoryDto.getId());
  assertThat(directorySnapshot.getComponentId()).isEqualTo(directoryDto.getId());
  assertThat(directorySnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(directorySnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(directorySnapshot.getParentId()).isEqualTo(moduleSnapshot.getId());
  assertThat(directorySnapshot.getDepth()).isEqualTo(2);
  assertThat(directorySnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + moduleSnapshot.getId()+ ".");
  assertThat(directorySnapshot.getQualifier()).isEqualTo("DIR");
  assertThat(directorySnapshot.getScope()).isEqualTo("DIR");
  assertThat(directorySnapshot.getVersion()).isNull();
  assertThat(directorySnapshot.getLast()).isFalse();
  assertThat(directorySnapshot.getStatus()).isEqualTo("U");
  assertThat(directorySnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(directorySnapshot.getBuildDate()).isEqualTo(now);
  SnapshotDto fileSnapshot=getUnprocessedSnapshot(fileDto.getId());
  assertThat(fileSnapshot.getComponentId()).isEqualTo(fileDto.getId());
  assertThat(fileSnapshot.getRootProjectId()).isEqualTo(projectDto.getId());
  assertThat(fileSnapshot.getRootId()).isEqualTo(projectSnapshot.getId());
  assertThat(fileSnapshot.getParentId()).isEqualTo(directorySnapshot.getId());
  assertThat(fileSnapshot.getDepth()).isEqualTo(3);
  assertThat(fileSnapshot.getPath()).isEqualTo(projectSnapshot.getId() + "." + moduleSnapshot.getId()+ "."+ directorySnapshot.getId()+ ".");
  assertThat(fileSnapshot.getQualifier()).isEqualTo("FIL");
  assertThat(fileSnapshot.getScope()).isEqualTo("FIL");
  assertThat(fileSnapshot.getVersion()).isNull();
  assertThat(fileSnapshot.getLast()).isFalse();
  assertThat(fileSnapshot.getStatus()).isEqualTo("U");
  assertThat(fileSnapshot.getCreatedAt()).isEqualTo(analysisDate);
  assertThat(fileSnapshot.getBuildDate()).isEqualTo(now);
  assertThat(dbIdsRepository.getSnapshotId(project)).isEqualTo(projectSnapshot.getId());
  assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());
  assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());
  assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());
}
