{
  File reportDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(reportDir);
  writer.writeMetadata(BatchReport.Metadata.newBuilder().setRootComponentRef(1).setBranch("origin/master").setProjectKey("").build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").addChildRef(2).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setName("Module").addChildRef(3).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(4).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").build());
  BatchReportReader batchReportReader=new BatchReportReader(reportDir);
  ComputationContext context=new ComputationContext(batchReportReader,PROJECT_KEY,projectSettings,dbClient,ComponentTreeBuilders.from(batchReportReader),languageRepository);
  sut.execute(context);
  Map<Integer,Component> componentsByRef=getComponentsByRef(context.getRoot());
  assertThat(componentsByRef.get(1).getKey()).isEqualTo("PROJECT_KEY:origin/master");
  assertThat(componentsByRef.get(2).getKey()).isEqualTo("MODULE_KEY:origin/master");
  assertThat(componentsByRef.get(3).getKey()).isEqualTo("MODULE_KEY:origin/master:src/main/java/dir");
  assertThat(componentsByRef.get(4).getKey()).isEqualTo("MODULE_KEY:origin/master:src/main/java/dir/Foo.java");
}
