{
  return new Converter(){
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      ActiveRule rule=(ActiveRule)source;
      writeNode(writer,"key",rule.getRule().getKey());
      writeNode(writer,"plugin",rule.getRule().getRepositoryKey());
      writeNode(writer,"level",rule.getSeverity().name());
      writeNode(writer,"inherited",rule.getInheritanceStatus().toString());
      if (!rule.getActiveRuleParams().isEmpty()) {
        writer.startNode("params");
        for (        ActiveRuleParam activeRuleParam : rule.getActiveRuleParams()) {
          writer.startNode("param");
          writeNode(writer,"key",activeRuleParam.getRuleParam().getKey());
          writeNode(writer,"value",activeRuleParam.getValue());
          writer.endNode();
        }
        writer.endNode();
      }
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> valuesRule=new HashMap<String,String>();
      List<ActiveRuleParam> params=new ArrayList<ActiveRuleParam>();
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        valuesRule.put(reader.getNodeName(),reader.getValue());
        if (reader.getNodeName().equals("params")) {
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            Map<String,String> valuesParam=readNode(reader);
            ActiveRuleParam activeRuleParam=new ActiveRuleParam(null,new RuleParam(null,valuesParam.get("key"),null,null),valuesParam.get("value"));
            params.add(activeRuleParam);
            reader.moveUp();
          }
        }
        reader.moveUp();
      }
      ActiveRule activeRule=new ActiveRule(null,new Rule(valuesRule.get("plugin"),valuesRule.get("key")),RulePriority.valueOf(valuesRule.get("level")));
      activeRule.setActiveRuleParams(params);
      if (valuesRule.containsKey("inherited")) {
        activeRule.setInheritanceStatus(ActiveRuleInheritanceStatus.valueOf(valuesRule.get("inherited")));
      }
      return activeRule;
    }
    public boolean canConvert(    Class type){
      return type.equals(ActiveRule.class);
    }
  }
;
}
