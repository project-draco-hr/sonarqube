{
  final File samplePlugin=new File(this.getClass().getResource("/sonar-checkstyle-plugin-2.8.jar").toURI());
  FileHashes hashes=mock(FileHashes.class);
  final FileCache cache=new FileCache(tempFolder.newFolder(),log,hashes);
  when(hashes.of(any(File.class))).thenReturn("ABCDE");
  FileCache.Downloader downloader=new FileCache.Downloader(){
    public void download(    String filename,    File toFile) throws IOException {
      FileUtils.copyFile(samplePlugin,toFile);
    }
  }
;
  final File cachedFile=cache.get("sonar-checkstyle-plugin-2.8.jar","ABCDE",downloader);
  assertThat(cachedFile).isNotNull().exists().isFile();
  assertThat(cachedFile.getName()).isEqualTo("sonar-checkstyle-plugin-2.8.jar");
  final int nThreads=5;
  ExecutorService executorService=Executors.newFixedThreadPool(nThreads);
  List<Callable<File>> tasks=new ArrayList<Callable<File>>();
  for (int i=0; i < nThreads; i++) {
    tasks.add(new Callable<File>(){
      public File call() throws Exception {
        return cache.unzip(cachedFile);
      }
    }
);
  }
  File pluginDepsDir=null;
  for (  Future<File> result : executorService.invokeAll(tasks)) {
    pluginDepsDir=result.get();
  }
  assertThat(pluginDepsDir.listFiles()).hasSize(1);
  File metaDir=new File(pluginDepsDir,"META-INF");
  assertThat(metaDir.listFiles()).hasSize(1);
  File libDir=new File(metaDir,"lib");
  assertThat(libDir.listFiles()).hasSize(3);
  assertThat(libDir.listFiles()).containsOnly(new File(libDir,"antlr-2.7.6.jar"),new File(libDir,"checkstyle-5.1.jar"),new File(libDir,"commons-cli-1.0.jar"));
}
