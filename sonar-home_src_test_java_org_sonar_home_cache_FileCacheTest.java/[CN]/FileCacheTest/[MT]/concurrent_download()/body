{
  FileHashes hashes=mock(FileHashes.class);
  when(hashes.of(any(File.class))).thenReturn("ABCDE");
  final FileCache cache=new FileCache(tempFolder.newFolder(),hashes,mock(Logger.class));
  FileCache.Downloader downloader=new FileCache.Downloader(){
    public void download(    String filename,    File toFile) throws IOException {
      File cachedFile=new File(new File(cache.getDir(),"ABCDE"),"sonar-foo-plugin-1.5.jar");
      FileUtils.write(cachedFile,"downloaded by other");
      FileUtils.write(toFile,"downloaded by me");
    }
  }
;
  File cachedFile=cache.get("sonar-foo-plugin-1.5.jar","ABCDE",downloader);
  assertThat(cachedFile).isNotNull().exists().isFile();
  assertThat(cachedFile.getName()).isEqualTo("sonar-foo-plugin-1.5.jar");
  assertThat(cachedFile.getParentFile().getParentFile()).isEqualTo(cache.getDir());
  assertThat(FileUtils.readFileToString(cachedFile)).contains("downloaded by");
}
