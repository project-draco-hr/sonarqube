{
  RuleDefinitions.Context context=new RuleDefinitions.Context();
  List<RulesDebtModelXMLImporter.RuleDebt> ruleDebts=newArrayList(new RulesDebtModelXMLImporter.RuleDebt().setCharacteristicKey("MEMORY_EFFICIENCY").setRuleKey(RuleKey.of("checkstyle","ConstantName")).setFunction(RemediationFunction.LINEAR_OFFSET).setFactor("1d").setOffset("10min"));
  Reader javaModelReader=mock(Reader.class);
  when(debtModelRepository.createReaderForXMLFile("java")).thenReturn(javaModelReader);
  when(debtModelRepository.getContributingPluginList()).thenReturn(newArrayList("java"));
  when(importer.importXML(eq(javaModelReader))).thenReturn(ruleDebts);
  new DeprecatedRuleDefinitions(i18n,new RuleRepository[]{new CheckstyleRules()},debtModelRepository,importer).define(context);
  assertThat(context.repositories()).hasSize(1);
  RuleDefinitions.Repository checkstyle=context.repository("checkstyle");
  assertThat(checkstyle.rules()).hasSize(1);
  RuleDefinitions.Rule rule=checkstyle.rule("ConstantName");
  assertThat(rule).isNotNull();
  assertThat(rule.key()).isEqualTo("ConstantName");
  assertThat(rule.characteristicKey()).isEqualTo("MEMORY_EFFICIENCY");
  assertThat(rule.remediationFunction()).isEqualTo(RemediationFunction.LINEAR_OFFSET);
  assertThat(rule.remediationFactor()).isEqualTo("1d");
  assertThat(rule.remediationOffset()).isEqualTo("10min");
}
