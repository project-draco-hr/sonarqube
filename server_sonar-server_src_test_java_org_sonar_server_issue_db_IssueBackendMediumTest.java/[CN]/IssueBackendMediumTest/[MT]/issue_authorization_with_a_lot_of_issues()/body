{
  SearchClient searchClient=tester.get(SearchClient.class);
  RuleDto rule=RuleTesting.newXooX1();
  tester.get(RuleDao.class).insert(dbSession,rule);
  int nbProject=10;
  int nbUser=5;
  int componentPerProject=5;
  Long projectId=1L;
  Long componentId=1L;
  List<String> users=newArrayList();
  for (int u=0; u < nbUser; u++) {
    users.add("user-" + u);
  }
  BulkRequestBuilder bulkRequestBuilder=new BulkRequestBuilder(searchClient).setRefresh(true);
  for (int p=0; p < nbProject; p++) {
    ComponentDto project=addComponent(projectId,projectId,"Project-" + projectId.toString());
    List<String> groups=newArrayList();
    groups.add("anyone");
    if (p % 2 == 0) {
      groups.add("user");
    }
    bulkRequestBuilder.add(addIssueAuthorization(searchClient,project,users,groups,false));
    for (int c=0; c < componentPerProject; c++) {
      ComponentDto file=addComponent(componentId,projectId,"Component-" + componentId.toString());
      addIssue(rule,project,file);
      componentId++;
    }
    projectId++;
    if (bulkRequestBuilder.numberOfActions() == nbProject) {
      bulkRequestBuilder.get();
      dbSession.commit();
    }
  }
  bulkRequestBuilder.setRefresh(true).get();
  dbSession.commit();
  assertThat(searchIssueWithAuthorization(searchClient,"","anyone").getHits().getTotalHits()).isEqualTo(nbProject * componentPerProject);
  assertThat(searchIssueWithAuthorization(searchClient,"","user").getHits().getTotalHits()).isEqualTo(nbProject * componentPerProject / 2);
  assertThat(searchIssueWithAuthorization(searchClient,"user-1","").getHits().getTotalHits()).isEqualTo(nbProject * componentPerProject);
}
