{
  for (  final BatchResource resource : resourceCache.all()) {
    Iterable<Measure> batchMeasures=measureCache.byResource(resource.resource());
    batchMeasures=Iterables.filter(batchMeasures,new Predicate<Measure>(){
      @Override public boolean apply(      Measure input){
        input.setMetric(metricFinder.findByKey(input.getMetricKey()));
        return shouldPersistMeasure(resource.resource(),input);
      }
    }
);
    Iterable<org.sonar.batch.protocol.output.BatchReport.Measure> reportMeasures=Iterables.transform(batchMeasures,new Function<Measure,BatchReport.Measure>(){
      private BatchReport.Measure.Builder builder=BatchReport.Measure.newBuilder();
      @Override public BatchReport.Measure apply(      Measure input){
        return toReportMeasure(builder,input);
      }
    }
);
    Iterable<DefaultDuplication> dups=duplicationCache.byComponent(resource.resource().getEffectiveKey());
    if (dups.iterator().hasNext()) {
      org.sonar.batch.protocol.output.BatchReport.Measure dupMeasure=toReportMeasure(BatchReport.Measure.newBuilder(),dups);
      writer.writeComponentMeasures(resource.batchId(),Iterables.concat(Arrays.asList(dupMeasure),reportMeasures));
    }
 else {
      writer.writeComponentMeasures(resource.batchId(),reportMeasures);
    }
  }
}
