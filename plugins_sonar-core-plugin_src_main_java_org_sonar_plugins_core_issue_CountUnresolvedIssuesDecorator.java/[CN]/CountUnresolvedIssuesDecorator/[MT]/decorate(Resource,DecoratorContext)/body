{
  Issuable issuable=perspectives.as(Issuable.class,resource);
  if (issuable != null) {
    Collection<Issue> issues=issuable.issues();
    boolean shouldSaveNewMetrics=shouldSaveNewMetrics(context);
    Multiset<String> severityBag=HashMultiset.create();
    ListMultimap<String,Issue> issuesPerSeverity=ArrayListMultimap.create();
    int countOpen=0;
    int countReopened=0;
    int countConfirmed=0;
    for (    Issue issue : issues) {
      severityBag.add(issue.severity());
      issuesPerSeverity.put(issue.severity(),issue);
      if (Issue.STATUS_OPEN.equals(issue.status())) {
        countOpen++;
      }
 else       if (Issue.STATUS_REOPENED.equals(issue.status())) {
        countReopened++;
      }
 else       if (Issue.STATUS_CONFIRMED.equals(issue.status())) {
        countConfirmed++;
      }
    }
    for (    String severity : Severity.ALL) {
      saveIssuesForSeverity(context,severity,severityBag);
      saveNewIssuesForSeverity(context,severity,issuesPerSeverity,shouldSaveNewMetrics);
    }
    saveTotalIssues(context,issues);
    saveNewIssues(context,issues,shouldSaveNewMetrics);
    saveMeasure(context,CoreMetrics.OPEN_ISSUES,countOpen);
    saveMeasure(context,CoreMetrics.REOPENED_ISSUES,countReopened);
    saveMeasure(context,CoreMetrics.CONFIRMED_ISSUES,countConfirmed);
  }
}
