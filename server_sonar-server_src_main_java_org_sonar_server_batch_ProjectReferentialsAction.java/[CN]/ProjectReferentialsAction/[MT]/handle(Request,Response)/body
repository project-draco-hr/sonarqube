{
  UserSession userSession=UserSession.get();
  boolean hasScanPerm=userSession.hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);
  DbSession session=dbClient.openSession(false);
  try {
    String projectOrModuleKey=request.mandatoryParam(PARAM_KEY);
    String profileName=request.param(PARAM_PROFILE);
    ProjectReferentials ref=new ProjectReferentials();
    String projectKey=null;
    AuthorizedComponentDto module=dbClient.componentDao().getNullableAuthorizedComponentByKey(projectOrModuleKey,session);
    if (module != null) {
      ComponentDto project=dbClient.componentDao().getNullableRootProjectByKey(projectOrModuleKey,session);
      if (project != null) {
        if (!project.key().equals(module.key())) {
          addSettings(ref,module.getKey(),getSettingsFromParents(module.key(),hasScanPerm,session));
        }
        projectKey=project.key();
        addSettingsToChildrenModules(ref,projectOrModuleKey,Maps.<String,String>newHashMap(),hasScanPerm,session);
      }
 else {
        addSettings(ref,projectOrModuleKey,getPropertiesMap(propertiesDao.selectProjectProperties(projectOrModuleKey,session),hasScanPerm));
        projectKey=projectOrModuleKey;
      }
    }
    addProfiles(ref,projectKey,profileName,session);
    addActiveRules(ref);
    response.stream().setMediaType(MimeTypes.JSON);
    IOUtils.write(ref.toJson(),response.stream().output());
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
