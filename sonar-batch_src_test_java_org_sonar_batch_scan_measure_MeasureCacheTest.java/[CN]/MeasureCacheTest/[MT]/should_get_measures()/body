{
  Project p=new Project("struts");
  Resource dir=Directory.create("foo/bar").setEffectiveKey("struts:foo/bar");
  Resource file1=Directory.create("foo/bar/File1.txt").setEffectiveKey("struts:foo/bar/File1.txt");
  Resource file2=Directory.create("foo/bar/File2.txt").setEffectiveKey("struts:foo/bar/File2.txt");
  assertThat(cache.entries()).hasSize(0);
  assertThat(cache.byResource(p)).hasSize(0);
  assertThat(cache.byResource(dir)).hasSize(0);
  Measure mFile1=new Measure(CoreMetrics.NCLOC,1.0);
  cache.put(file1,mFile1);
  Measure mFile2=new Measure(CoreMetrics.NCLOC,3.0);
  cache.put(file2,mFile2);
  assertThat(cache.entries()).hasSize(2);
  assertThat(cache.byResource(p)).hasSize(0);
  assertThat(cache.byResource(dir)).hasSize(0);
  Measure mDir=new Measure(CoreMetrics.NCLOC,4.0);
  cache.put(dir,mDir);
  assertThat(cache.entries()).hasSize(3);
  assertThat(cache.byResource(p)).hasSize(0);
  assertThat(cache.byResource(dir)).hasSize(1);
  assertThat(cache.byResource(dir).iterator().next()).isEqualTo(mDir);
  Measure mProj=new Measure(CoreMetrics.NCLOC,4.0);
  cache.put(p,mProj);
  assertThat(cache.entries()).hasSize(4);
  assertThat(cache.byResource(p)).hasSize(1);
  assertThat(cache.byResource(p).iterator().next()).isEqualTo(mProj);
  assertThat(cache.byResource(dir)).hasSize(1);
  assertThat(cache.byResource(dir).iterator().next()).isEqualTo(mDir);
}
