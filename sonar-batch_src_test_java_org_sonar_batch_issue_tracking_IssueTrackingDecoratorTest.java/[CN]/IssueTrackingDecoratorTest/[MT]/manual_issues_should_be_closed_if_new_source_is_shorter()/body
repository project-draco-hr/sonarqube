{
  ServerIssue unmatchedIssue=new ServerIssueFromDb(new IssueDto().setKee("ABCDE").setReporter("freddy").setLine(6).setStatus("OPEN").setRuleKey("manual","Performance"));
  when(ruleFinder.findByKey(RuleKey.of("manual","Performance"))).thenReturn(null);
  IssueTrackingResult trackingResult=new IssueTrackingResult();
  trackingResult.addUnmatched(unmatchedIssue);
  String originalSource="public interface Action {\n" + "   void method1();\n" + "   void method2();\n"+ "   void method3();\n"+ "   void method4();\n"+ "   void method5();\n"+ "}";
  String newSource="public interface Action {\n" + "   void method1();\n" + "   void method2();\n"+ "}";
  Resource file=mockHashes(originalSource,newSource);
  when(tracking.track(isA(SourceHashHolder.class),anyCollection(),anyCollection())).thenReturn(trackingResult);
  decorator.doDecorate(file);
  verify(workflow,times(1)).doAutomaticTransition(any(DefaultIssue.class),any(IssueChangeContext.class));
  verify(handlers,times(1)).execute(any(DefaultIssue.class),any(IssueChangeContext.class));
  ArgumentCaptor<DefaultIssue> argument=ArgumentCaptor.forClass(DefaultIssue.class);
  verify(issueCache).put(argument.capture());
  DefaultIssue issue=argument.getValue();
  verify(updater).setResolution(eq(issue),eq(Issue.RESOLUTION_REMOVED),any(IssueChangeContext.class));
  verify(updater).setStatus(eq(issue),eq(Issue.STATUS_CLOSED),any(IssueChangeContext.class));
  assertThat(issue.key()).isEqualTo("ABCDE");
  assertThat(issue.isNew()).isFalse();
  assertThat(issue.isEndOfLife()).isTrue();
  assertThat(issue.isOnDisabledRule()).isTrue();
}
