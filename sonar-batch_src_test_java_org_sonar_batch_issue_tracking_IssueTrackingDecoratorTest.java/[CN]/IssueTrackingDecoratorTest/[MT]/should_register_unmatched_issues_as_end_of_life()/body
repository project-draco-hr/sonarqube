{
  Resource file=File.create("Action.java").setEffectiveKey("struts:Action.java").setId(123);
  ServerIssue unmatchedIssue=new ServerIssueFromDb(new IssueDto().setKee("ABCDE").setResolution(null).setStatus("OPEN").setRuleKey("squid","AvoidCycle"));
  IssueTrackingResult trackingResult=new IssueTrackingResult();
  trackingResult.addUnmatched(unmatchedIssue);
  when(tracking.track(isA(SourceHashHolder.class),anyCollection(),anyCollection())).thenReturn(trackingResult);
  when(inputPathCache.getFile("foo","Action.java")).thenReturn(mock(DefaultInputFile.class));
  when(inputPathCache.getFileMetadata("foo","Action.java")).thenReturn(new InputFileMetadata());
  decorator.doDecorate(file);
  verify(workflow,times(1)).doAutomaticTransition(any(DefaultIssue.class),any(IssueChangeContext.class));
  verify(handlers,times(1)).execute(any(DefaultIssue.class),any(IssueChangeContext.class));
  ArgumentCaptor<DefaultIssue> argument=ArgumentCaptor.forClass(DefaultIssue.class);
  verify(issueCache).put(argument.capture());
  DefaultIssue issue=argument.getValue();
  assertThat(issue.key()).isEqualTo("ABCDE");
  assertThat(issue.isNew()).isFalse();
  assertThat(issue.isEndOfLife()).isTrue();
}
