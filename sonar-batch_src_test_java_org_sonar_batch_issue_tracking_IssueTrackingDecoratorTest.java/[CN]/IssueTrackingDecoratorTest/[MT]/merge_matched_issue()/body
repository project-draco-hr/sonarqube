{
  ServerIssue previousIssue=new ServerIssueFromDb(new IssueDto().setKee("ABCDE").setResolution(null).setStatus("OPEN").setRuleKey("squid","AvoidCycle").setLine(10).setSeverity("MAJOR").setMessage("Message").setEffortToFix(1.5).setDebt(1L).setProjectKey("sample"));
  DefaultIssue issue=new DefaultIssue();
  IssueTrackingResult trackingResult=mock(IssueTrackingResult.class);
  when(trackingResult.matched()).thenReturn(newArrayList(issue));
  when(trackingResult.matching(eq(issue))).thenReturn(previousIssue);
  decorator.mergeMatched(trackingResult);
  verify(updater).setPastSeverity(eq(issue),eq("MAJOR"),any(IssueChangeContext.class));
  verify(updater).setPastLine(eq(issue),eq(10));
  verify(updater).setPastMessage(eq(issue),eq("Message"),any(IssueChangeContext.class));
  verify(updater).setPastEffortToFix(eq(issue),eq(1.5),any(IssueChangeContext.class));
  verify(updater).setPastTechnicalDebt(eq(issue),eq(Duration.create(1L)),any(IssueChangeContext.class));
  verify(updater).setPastProject(eq(issue),eq("sample"),any(IssueChangeContext.class));
}
