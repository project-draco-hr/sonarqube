{
  Collection<Sensor> sensors=selector.select(Sensor.class,module,true,sensorMatcher);
  eventBus.fireEvent(new SensorsPhaseEvent(Lists.newArrayList(sensors),true));
  for (  Sensor sensor : sensors) {
    session.commitAndClose();
    if (sensor.shouldExecuteOnProject(module)) {
      executeSensor(context,sensor);
    }
 else {
      String oldLanguageKey=module.getLanguageKey();
      Language oldLanguage=module.getLanguage();
      for (      Language language : moduleLanguages.getModuleLanguages()) {
        module.setLanguage(language);
        module.getConfiguration().setProperty(CoreProperties.PROJECT_LANGUAGE_PROPERTY,language.getKey());
        if (sensor.shouldExecuteOnProject(module)) {
          LOG.warn("Sensor {} should be updated to not depends on deprecated Project::getLanguage or Project::getLanguageKey",sensor);
          executeSensor(context,sensor);
          break;
        }
      }
      module.setLanguage(oldLanguage);
      module.getConfiguration().setProperty(CoreProperties.PROJECT_LANGUAGE_PROPERTY,oldLanguageKey);
    }
  }
  eventBus.fireEvent(new SensorsPhaseEvent(Lists.newArrayList(sensors),false));
}
