{
  dbTester.prepareDbUnit(getClass(),"update.xml");
  RuleDto ruleToUpdate=new RuleDto().setId(1).setRuleKey("NewRuleKey").setRepositoryKey("plugin").setName("new name").setDescription("new description").setDescriptionFormat(RuleDto.Format.MARKDOWN).setStatus(RuleStatus.DEPRECATED).setConfigKey("NewConfigKey").setSeverity(Severity.INFO).setIsTemplate(true).setLanguage("dart").setTemplateId(3).setNoteData("My note").setNoteUserLogin("admin").setNoteCreatedAt(DateUtils.parseDate("2013-12-19")).setNoteUpdatedAt(DateUtils.parseDate("2013-12-20")).setRemediationFunction(DebtRemediationFunction.Type.LINEAR.toString()).setDefaultRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("1h").setDefaultRemediationCoefficient("5d").setRemediationOffset("5min").setDefaultRemediationOffset("10h").setEffortToFixDescription("squid.S115.effortToFix").setTags(newHashSet("tag1","tag2")).setSystemTags(newHashSet("systag1","systag2")).setType(RuleType.BUG).setUpdatedAt(2000000000000L);
  underTest.update(dbTester.getSession(),ruleToUpdate);
  dbTester.getSession().commit();
  RuleDto ruleDto=underTest.selectOrFailByKey(dbTester.getSession(),RuleKey.of("plugin","NewRuleKey"));
  assertThat(ruleDto.getName()).isEqualTo("new name");
  assertThat(ruleDto.getDescription()).isEqualTo("new description");
  assertThat(ruleDto.getDescriptionFormat()).isEqualTo(RuleDto.Format.MARKDOWN);
  assertThat(ruleDto.getStatus()).isEqualTo(RuleStatus.DEPRECATED);
  assertThat(ruleDto.getRuleKey()).isEqualTo("NewRuleKey");
  assertThat(ruleDto.getRepositoryKey()).isEqualTo("plugin");
  assertThat(ruleDto.getConfigKey()).isEqualTo("NewConfigKey");
  assertThat(ruleDto.getSeverity()).isEqualTo(0);
  assertThat(ruleDto.getLanguage()).isEqualTo("dart");
  assertThat(ruleDto.isTemplate()).isTrue();
  assertThat(ruleDto.getTemplateId()).isEqualTo(3);
  assertThat(ruleDto.getNoteData()).isEqualTo("My note");
  assertThat(ruleDto.getNoteUserLogin()).isEqualTo("admin");
  assertThat(ruleDto.getNoteCreatedAt()).isNotNull();
  assertThat(ruleDto.getNoteUpdatedAt()).isNotNull();
  assertThat(ruleDto.getRemediationFunction()).isEqualTo("LINEAR");
  assertThat(ruleDto.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(ruleDto.getRemediationCoefficient()).isEqualTo("1h");
  assertThat(ruleDto.getDefaultRemediationCoefficient()).isEqualTo("5d");
  assertThat(ruleDto.getRemediationOffset()).isEqualTo("5min");
  assertThat(ruleDto.getDefaultRemediationOffset()).isEqualTo("10h");
  assertThat(ruleDto.getEffortToFixDescription()).isEqualTo("squid.S115.effortToFix");
  assertThat(ruleDto.getTags()).containsOnly("tag1","tag2");
  assertThat(ruleDto.getSystemTags()).containsOnly("systag1","systag2");
  assertThat(ruleDto.getType()).isEqualTo(RuleType.BUG.getDbConstant());
  assertThat(ruleDto.getCreatedAt()).isEqualTo(1500000000000L);
  assertThat(ruleDto.getUpdatedAt()).isEqualTo(2000000000000L);
}
