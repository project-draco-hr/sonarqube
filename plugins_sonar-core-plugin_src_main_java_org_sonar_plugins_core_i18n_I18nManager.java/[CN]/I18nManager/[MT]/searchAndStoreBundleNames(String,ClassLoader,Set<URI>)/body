{
  String bundleBaseName=buildBundleBaseName(pluginKey);
  String bundleDefaultPropertiesFile=bundleBaseName + ".properties";
  try {
    LOG.debug("Search for ResourceBundle base file '" + bundleDefaultPropertiesFile + "' in the classloader : "+ classloader);
    List<URL> resources=EnumerationUtils.toList(classloader.getResources(bundleDefaultPropertiesFile));
    if (resources.size() > 0) {
      if (resources.size() > 1) {
        LOG.debug("File '{}' found several times in the classloader : {}. Only the first one will be taken in account.",bundleDefaultPropertiesFile,classloader);
      }
      URL propertiesUrl=resources.get(0);
      if (!alreadyLoadedResources.contains(propertiesUrl.toURI())) {
        LOG.debug("Found the ResourceBundle base file : {} from classloader : {}",propertiesUrl,classloader);
        LOG.debug("Add bundleName : {} from classloader : {}",bundleBaseName,classloader);
        bundleClassLoader.addResource(bundleDefaultPropertiesFile,classloader);
        alreadyLoadedResources.add(propertiesUrl.toURI());
        Properties bundleContent=new Properties();
        InputStream input=null;
        try {
          input=propertiesUrl.openStream();
          bundleContent.load(input);
          Enumeration<String> keysToAdd=(Enumeration<String>)bundleContent.propertyNames();
          while (keysToAdd.hasMoreElements()) {
            String key=keysToAdd.nextElement();
            if (keys.containsKey(key)) {
              LOG.debug("DUPLICATE KEY : Key '{}' defined in bundle '{}' is already defined in bundle '{}'. It is ignored.",new Object[]{key,bundleBaseName,keys.get(key)});
            }
 else {
              keys.put(key,bundleBaseName);
            }
          }
        }
  finally {
          IOUtils.closeQuietly(input);
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Fail to load '" + bundleDefaultPropertiesFile + "' in classloader : "+ classloader,e);
    throw new SonarException("Fail to load '" + bundleDefaultPropertiesFile + "' in classloader : "+ classloader,e);
  }
}
