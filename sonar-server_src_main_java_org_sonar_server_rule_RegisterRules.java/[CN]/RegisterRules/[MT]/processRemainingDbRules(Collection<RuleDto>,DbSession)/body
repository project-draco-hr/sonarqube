{
  List<RuleDto> removedRules=newArrayList();
  for (  RuleDto ruleDto : ruleDtos) {
    boolean toBeRemoved=true;
    if (ruleDto.getParentId() != null) {
      RuleDto parent=dbClient.ruleDao().getParent(ruleDto,session);
      if (parent != null && !Rule.STATUS_REMOVED.equals(parent.getStatus())) {
        ruleDto.setLanguage(parent.getLanguage());
        ruleDto.setStatus(parent.getStatus());
        ruleDto.setDefaultSubCharacteristicId(parent.getDefaultSubCharacteristicId());
        ruleDto.setDefaultRemediationFunction(parent.getDefaultRemediationFunction());
        ruleDto.setDefaultRemediationCoefficient(parent.getDefaultRemediationCoefficient());
        ruleDto.setDefaultRemediationOffset(parent.getDefaultRemediationOffset());
        ruleDto.setEffortToFixDescription(parent.getEffortToFixDescription());
        dbClient.ruleDao().update(session,ruleDto);
        toBeRemoved=false;
      }
    }
    if (toBeRemoved && !RuleStatus.REMOVED.toString().equals(ruleDto.getStatus())) {
      LOG.info(String.format("Disable rule %s",ruleDto.getKey()));
      ruleDto.setStatus(Rule.STATUS_REMOVED);
      ruleDto.setSystemTags(Collections.<String>emptySet());
      ruleDto.setTags(Collections.<String>emptySet());
      dbClient.ruleDao().update(session,ruleDto);
      removedRules.add(ruleDto);
      if (removedRules.size() % 100 == 0) {
        session.commit();
      }
    }
  }
  if (!removedRules.isEmpty()) {
    session.commit();
  }
  return removedRules;
}
