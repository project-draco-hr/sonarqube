{
  measureRepository.addRawMeasure(FILE_1_REF,NCLOC_KEY,newMeasureBuilder().create(10));
  measureRepository.addRawMeasure(FILE_1_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(2));
  measureRepository.addRawMeasure(FILE_2_REF,NCLOC_KEY,newMeasureBuilder().create(40));
  measureRepository.addRawMeasure(FILE_2_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(5));
  measureRepository.addRawMeasure(DIRECTORY_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(DIRECTORY_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  measureRepository.addRawMeasure(MODULE_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(MODULE_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  measureRepository.addRawMeasure(ROOT_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(ROOT_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  final MeasureComputer.MeasureComputerDefinition definition=new MeasureComputerDefinitionImpl.BuilderImpl().setInputMetrics(NCLOC_KEY,COMMENT_LINES_KEY).setOutputMetrics(NEW_METRIC_KEY).build();
  measureComputersHolder.setMeasureComputers(newArrayList(new MeasureComputerWrapper(new MeasureComputer(){
    @Override public MeasureComputerDefinition define(    MeasureComputerDefinitionContext defContext){
      return definition;
    }
    @Override public void compute(    MeasureComputerContext context){
      org.sonar.api.ce.measure.Measure ncloc=context.getMeasure(NCLOC_KEY);
      org.sonar.api.ce.measure.Measure comment=context.getMeasure(COMMENT_LINES_KEY);
      if (ncloc != null && comment != null) {
        context.addMeasure(NEW_METRIC_KEY,ncloc.getIntValue() + comment.getIntValue());
      }
    }
  }
,definition)));
  VisitorsCrawler visitorsCrawler=new VisitorsCrawler(Arrays.<ComponentVisitor>asList(new MeasureComputersVisitor(metricRepository,measureRepository,null,measureComputersHolder,componentIssuesRepository)));
  visitorsCrawler.visit(ROOT);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_1_REF))).containsOnly(entryOf(NEW_METRIC_KEY,newMeasureBuilder().create(12)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_2_REF))).containsOnly(entryOf(NEW_METRIC_KEY,newMeasureBuilder().create(45)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(DIRECTORY_REF))).containsOnly(entryOf(NEW_METRIC_KEY,newMeasureBuilder().create(57)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(MODULE_REF))).containsOnly(entryOf(NEW_METRIC_KEY,newMeasureBuilder().create(57)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(ROOT_REF))).containsOnly(entryOf(NEW_METRIC_KEY,newMeasureBuilder().create(57)));
}
