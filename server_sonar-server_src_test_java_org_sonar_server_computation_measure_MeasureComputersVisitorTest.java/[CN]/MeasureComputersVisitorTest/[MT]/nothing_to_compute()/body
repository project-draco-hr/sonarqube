{
  measureRepository.addRawMeasure(FILE_1_REF,NCLOC_KEY,newMeasureBuilder().create(10));
  measureRepository.addRawMeasure(FILE_1_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(2));
  measureRepository.addRawMeasure(FILE_2_REF,NCLOC_KEY,newMeasureBuilder().create(40));
  measureRepository.addRawMeasure(FILE_2_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(5));
  measureRepository.addRawMeasure(DIRECTORY_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(DIRECTORY_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  measureRepository.addRawMeasure(MODULE_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(MODULE_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  measureRepository.addRawMeasure(ROOT_REF,NCLOC_KEY,newMeasureBuilder().create(50));
  measureRepository.addRawMeasure(ROOT_REF,COMMENT_LINES_KEY,newMeasureBuilder().create(7));
  measureComputersHolder.setMeasureComputers(Collections.<MeasureComputer>emptyList());
  VisitorsCrawler visitorsCrawler=new VisitorsCrawler(Arrays.<ComponentVisitor>asList(new MeasureComputersVisitor(metricRepository,measureRepository,null,measureComputersHolder)));
  visitorsCrawler.visit(ROOT);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_1_REF))).isEmpty();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_2_REF))).isEmpty();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(DIRECTORY_REF))).isEmpty();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(MODULE_REF))).isEmpty();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(ROOT_REF))).isEmpty();
}
