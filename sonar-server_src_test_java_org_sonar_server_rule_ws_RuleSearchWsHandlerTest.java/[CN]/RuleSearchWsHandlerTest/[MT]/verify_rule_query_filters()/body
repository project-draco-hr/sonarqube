{
  Rule rule=ruleBuilder.build();
  when(rules.find(any(RuleQuery.class))).thenReturn(new PagedResult<Rule>(ImmutableList.of(rule),PagingResult.create(10,1,1)));
  MockUserSession.set();
  tester.newRequest("list").setParam("languages","java,js").setParam("repositories","squid,pmd").setParam("severities","MAJOR,MINOR").setParam("statuses","READY,BETA").setParam("tags","has-params,integration-tests").setParam("debtCharacteristics","MODULARITY,REUSABILITY").setParam("hasDebtCharacteristic","true").execute();
  ArgumentCaptor<RuleQuery> ruleQueryCaptor=ArgumentCaptor.forClass(RuleQuery.class);
  verify(rules).find(ruleQueryCaptor.capture());
  assertThat(ruleQueryCaptor.getValue().languages()).containsOnly("java","js");
  assertThat(ruleQueryCaptor.getValue().repositories()).containsOnly("squid","pmd");
  assertThat(ruleQueryCaptor.getValue().severities()).containsOnly("MAJOR","MINOR");
  assertThat(ruleQueryCaptor.getValue().statuses()).containsOnly("READY","BETA");
  assertThat(ruleQueryCaptor.getValue().tags()).containsOnly("has-params","integration-tests");
  assertThat(ruleQueryCaptor.getValue().debtCharacteristics()).containsOnly("MODULARITY","REUSABILITY");
  assertThat(ruleQueryCaptor.getValue().hasDebtCharacteristic()).isTrue();
}
