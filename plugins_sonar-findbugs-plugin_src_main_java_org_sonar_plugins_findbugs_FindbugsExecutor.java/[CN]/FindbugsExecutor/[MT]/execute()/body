{
  TimeProfiler profiler=new TimeProfiler().start("Execute Findbugs " + FindbugsVersion.getVersion());
  ClassLoader initialClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(FindBugs2.class.getClassLoader());
  OutputStream xmlOutput=null;
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  try {
    DetectorFactoryCollection detectorFactory=loadFindbugsPlugins();
    final FindBugs2 engine=new FindBugs2();
    Project project=configuration.getFindbugsProject();
    engine.setProject(project);
    XMLBugReporter xmlBugReporter=new XMLBugReporter(project);
    xmlBugReporter.setPriorityThreshold(Detector.LOW_PRIORITY);
    xmlBugReporter.setAddMessages(true);
    File xmlReport=configuration.getTargetXMLReport();
    if (xmlReport != null) {
      LOG.info("Findbugs output report: " + xmlReport.getAbsolutePath());
      xmlOutput=FileUtils.openOutputStream(xmlReport);
    }
 else {
      xmlOutput=new NullOutputStream();
    }
    xmlBugReporter.setOutputStream(new PrintStream(xmlOutput));
    engine.setBugReporter(xmlBugReporter);
    UserPreferences userPreferences=UserPreferences.createDefaultUserPreferences();
    userPreferences.setEffort(configuration.getEffort());
    engine.setUserPreferences(userPreferences);
    engine.addFilter(configuration.saveIncludeConfigXml().getAbsolutePath(),true);
    engine.addFilter(configuration.saveExcludeConfigXml().getAbsolutePath(),false);
    for (    File filterFile : configuration.getExcludesFilters()) {
      if (filterFile.isFile()) {
        engine.addFilter(filterFile.getAbsolutePath(),false);
      }
 else {
        LOG.warn("FindBugs filter-file not found: {}",filterFile);
      }
    }
    engine.setDetectorFactoryCollection(detectorFactory);
    engine.setAnalysisFeatureSettings(FindBugs.DEFAULT_EFFORT);
    engine.finishSettings();
    executorService.submit(new FindbugsTask(engine)).get(configuration.getTimeout(),TimeUnit.MILLISECONDS);
    profiler.stop();
    resetDetectorFactoryCollection();
    return xmlReport;
  }
 catch (  Exception e) {
    throw new SonarException("Can not execute Findbugs",e);
  }
 finally {
    executorService.shutdown();
    IOUtils.closeQuietly(xmlOutput);
    Thread.currentThread().setContextClassLoader(initialClassLoader);
  }
}
