{
  InputStreamReader reader=new InputStreamReader(getClass().getResourceAsStream("/org/sonar/api/server/rule/RuleDefinitionsFromXmlTest/rules.xml"),Charsets.UTF_8.name());
  RuleDefinitions.Repository repository=load(reader);
  assertThat(repository.rules()).hasSize(2);
  RuleDefinitions.Rule rule=repository.rule("complete");
  assertThat(rule.key()).isEqualTo("complete");
  assertThat(rule.name()).isEqualTo("Complete");
  assertThat(rule.htmlDescription()).isEqualTo("Description of Complete");
  assertThat(rule.defaultSeverity()).isEqualTo(Severity.BLOCKER);
  assertThat(rule.template()).isTrue();
  assertThat(rule.status()).isEqualTo(RuleDefinitions.Status.BETA);
  assertThat(rule.metadata()).isEqualTo("Checker/TreeWalker/LocalVariableName");
  assertThat(rule.status()).isEqualTo(RuleDefinitions.Status.BETA);
  assertThat(rule.params()).hasSize(2);
  RuleDefinitions.Param ignore=rule.param("ignore");
  assertThat(ignore.key()).isEqualTo("ignore");
  assertThat(ignore.description()).isEqualTo("Ignore ?");
  assertThat(ignore.defaultValue()).isEqualTo("false");
  rule=repository.rule("minimal");
  assertThat(rule.key()).isEqualTo("minimal");
  assertThat(rule.name()).isEqualTo("Minimal");
  assertThat(rule.htmlDescription()).isEqualTo("Description of Minimal");
  assertThat(rule.params()).isEmpty();
  assertThat(rule.status()).isEqualTo(RuleDefinitions.Status.READY);
  assertThat(rule.defaultSeverity()).isEqualTo(Severity.MAJOR);
}
