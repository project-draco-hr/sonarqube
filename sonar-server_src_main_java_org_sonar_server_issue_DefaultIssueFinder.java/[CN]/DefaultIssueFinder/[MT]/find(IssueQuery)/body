{
  LOG.debug("IssueQuery : {}",query);
  SqlSession sqlSession=myBatis.openSession();
  try {
    Collection<Integer> rootProjectIds=authorizationDao.selectAuthorizedRootProjectsIds(UserSession.get().userId(),query.requiredRole(),sqlSession);
    List<IssueDto> authorizedIssues=issueDao.selectIssues(query,rootProjectIds,sqlSession);
    List<IssueDto> authorizedSortedIssues=sort(authorizedIssues,query,authorizedIssues.size());
    Paging paging=Paging.create(query.pageSize(),query.pageIndex(),authorizedSortedIssues.size());
    Set<Long> pagedIssueIds=pagedIssueIds(authorizedSortedIssues,paging);
    List<IssueDto> pagedIssues=issueDao.selectByIds(pagedIssueIds,sqlSession);
    List<IssueDto> pagedSortedIssues=sort(pagedIssues,query,authorizedIssues.size());
    Map<String,DefaultIssue> issuesByKey=newHashMap();
    List<Issue> issues=newArrayList();
    Set<Integer> ruleIds=Sets.newHashSet();
    Set<Integer> componentIds=Sets.newHashSet();
    Set<Integer> projectIds=Sets.newHashSet();
    Set<String> actionPlanKeys=Sets.newHashSet();
    Set<String> users=Sets.newHashSet();
    for (    IssueDto dto : pagedSortedIssues) {
      DefaultIssue defaultIssue=dto.toDefaultIssue();
      issuesByKey.put(dto.getKee(),defaultIssue);
      issues.add(defaultIssue);
      ruleIds.add(dto.getRuleId());
      componentIds.add(dto.getResourceId());
      projectIds.add(dto.getProjectId());
      actionPlanKeys.add(dto.getActionPlanKey());
      if (dto.getReporter() != null) {
        users.add(dto.getReporter());
      }
      if (dto.getAssignee() != null) {
        users.add(dto.getAssignee());
      }
    }
    List<DefaultIssueComment> comments=issueChangeDao.selectCommentsByIssues(sqlSession,issuesByKey.keySet());
    for (    DefaultIssueComment comment : comments) {
      DefaultIssue issue=issuesByKey.get(comment.issueKey());
      issue.addComment(comment);
      if (comment.userLogin() != null) {
        users.add(comment.userLogin());
      }
    }
    DefaultIssueQueryResult defaultIssueQueryResult=new DefaultIssueQueryResult();
    defaultIssueQueryResult.setMaxResultsReached(authorizedIssues.size() == query.maxResults());
    defaultIssueQueryResult.setIssues(issues).addRules(findRules(ruleIds)).addComponents(findComponents(componentIds)).addProjects(findProjects(projectIds)).addActionPlans(findActionPlans(actionPlanKeys)).addUsers(findUsers(users)).setPaging(paging);
    return defaultIssueQueryResult;
  }
  finally {
    MyBatis.closeQuietly(sqlSession);
  }
}
