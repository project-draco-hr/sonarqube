{
  Rule rule=SQUID_RULE;
  ActiveRule activeRule=mock(ActiveRule.class);
  when(activeRule.getRule()).thenReturn(rule);
  when(activeRule.getSeverity()).thenReturn(RulePriority.INFO);
  when(qProfile.getActiveRule("squid","AvoidCycle")).thenReturn(activeRule);
  when(ruleFinder.findByKey(SQUID_RULE_KEY)).thenReturn(rule);
  Date analysisDate=new Date();
  when(project.getAnalysisDate()).thenReturn(analysisDate);
  DefaultIssue issue=new DefaultIssue().setKey("ABCDE").setRuleKey(SQUID_RULE_KEY).setSeverity(Severity.CRITICAL).setMessage("");
  when(filters.accept(issue,null)).thenReturn(true);
  boolean added=moduleIssues.initAndAddIssue(issue);
  assertThat(added).isTrue();
  ArgumentCaptor<DefaultIssue> argument=ArgumentCaptor.forClass(DefaultIssue.class);
  verify(cache).put(argument.capture());
  assertThat(argument.getValue().message()).isEqualTo("Avoid Cycle");
}
