{
  ruleBuilder.add(SQUID_RULE_KEY).setName(SQUID_RULE_NAME);
  activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).setName(SQUID_RULE_NAME).activate();
  initModuleIssues();
  DefaultIssue issue=new DefaultIssue().addLocation(new DefaultIssueLocation().onFile(file).at(file.selectLine(3)).message("")).forRule(SQUID_RULE_KEY);
  when(filters.accept(any(org.sonar.core.issue.DefaultIssue.class))).thenReturn(true);
  boolean added=moduleIssues.initAndAddIssue(issue);
  assertThat(added).isTrue();
  ArgumentCaptor<BatchReport.Issue> argument=ArgumentCaptor.forClass(BatchReport.Issue.class);
  verify(reportPublisher.getWriter()).appendComponentIssue(eq(1),argument.capture());
  assertThat(argument.getValue().getMsg()).isEqualTo("Avoid Cycle");
}
