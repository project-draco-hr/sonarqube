{
  ruleBuilder.add(SQUID_RULE_KEY).setName(SQUID_RULE_NAME);
  activeRulesBuilder.create(SQUID_RULE_KEY).setSeverity(Severity.INFO).activate();
  initModuleIssues();
  org.sonar.api.rules.Rule rule=org.sonar.api.rules.Rule.create("squid","AvoidCycle","Avoid Cycle");
  Resource resource=new File("org/struts/Action.java").setEffectiveKey("struts:src/org/struts/Action.java");
  Violation violation=new Violation(rule,resource);
  violation.setLineId(42);
  violation.setSeverity(RulePriority.CRITICAL);
  violation.setMessage("the message");
  when(filters.accept(any(DefaultIssue.class))).thenReturn(true);
  boolean added=moduleIssues.initAndAddViolation(violation);
  assertThat(added).isTrue();
  ArgumentCaptor<DefaultIssue> argument=ArgumentCaptor.forClass(DefaultIssue.class);
  verify(cache).put(argument.capture());
  DefaultIssue issue=argument.getValue();
  assertThat(issue.severity()).isEqualTo(Severity.CRITICAL);
  assertThat(issue.line()).isEqualTo(42);
  assertThat(issue.message()).isEqualTo("the message");
  assertThat(issue.key()).isNotEmpty();
  assertThat(issue.ruleKey().toString()).isEqualTo("squid:AvoidCycle");
  assertThat(issue.componentKey()).isEqualTo("struts:src/org/struts/Action.java");
  assertThat(issue.projectKey()).isEqualTo("org.apache:struts-core");
}
