{
  RuleDto rule=new RuleDto().setId(10).setRepositoryKey("squid").setRuleKey("AvoidCycle");
  when(ruleDao.selectById(10)).thenReturn(rule);
  when(ruleDao.selectByName("Rule name")).thenReturn(new RuleDto());
  RuleDto newRule=new RuleDto().setId(11);
  Map<String,String> paramsByKey=ImmutableMap.of("max","20");
  when(service.createRule(eq(rule),eq("Rule name"),eq(Severity.MAJOR),eq("My note"),eq(paramsByKey),any(UserSession.class))).thenReturn(newRule);
  try {
    qProfiles.newRule(10,"Rule name",Severity.MAJOR,"My note",paramsByKey);
    fail();
  }
 catch (  Exception e) {
    assertThat(e).isInstanceOf(BadRequestException.class);
    assertThat(((BadRequestException)e).errors()).hasSize(1);
  }
  verifyZeroInteractions(service);
  verifyZeroInteractions(rules);
}
