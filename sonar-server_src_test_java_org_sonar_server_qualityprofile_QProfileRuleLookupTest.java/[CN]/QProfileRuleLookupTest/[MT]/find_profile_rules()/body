{
  Paging paging=Paging.create(10,1);
  List<QProfileRule> rules1=profileRules.search(ProfileRuleQuery.create(1),paging).rules();
  assertThat(rules1).hasSize(3);
  assertThat(rules1.get(0).key()).isEqualTo("ArchitecturalConstraint");
  assertThat(rules1.get(0).severity()).isEqualTo(Severity.CRITICAL);
  List<QProfileRule> rules2=profileRules.search(ProfileRuleQuery.create(2),paging).rules();
  assertThat(rules2).hasSize(1);
  assertThat(rules2.get(0).id()).isEqualTo(759);
  assertThat(rules2.get(0).activeRuleId()).isEqualTo(523);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey("DM_CONVERT_CASE"),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey(" \n\r\t DM_CONVERT_CASE \r\n\t "),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey("Unused Check"),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey("unus"),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey(" \n\r\t Unused Check \n\r\t "),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).addRepositoryKeys("findbugs"),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).addSeverities(Severity.CRITICAL),paging).rules()).hasSize(1);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).addSeverities(Severity.INFO),paging).rules()).isEmpty();
  List<QProfileRule> rulesWParam=profileRules.search(ProfileRuleQuery.create(1).setNameOrKey("ArchitecturalConstraint"),paging).rules();
  assertThat(rulesWParam).hasSize(1);
  assertThat(rulesWParam.get(0).params()).hasSize(2);
  assertThat(profileRules.search(ProfileRuleQuery.create(3),paging).rules()).hasSize(0);
  assertThat(profileRules.search(ProfileRuleQuery.create(1).setNameOrKey("polop"),paging).rules()).hasSize(0);
}
