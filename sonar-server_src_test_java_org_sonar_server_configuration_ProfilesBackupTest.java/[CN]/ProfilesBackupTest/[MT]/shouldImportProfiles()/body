{
  RulesProfile profileProvided=new RulesProfile("test provided","lang",false,true);
  RulesProfile profileNotProvided=new RulesProfile("test not provided","lang",false,false);
  getSession().save(profileProvided,profileNotProvided);
  Rule rule1=new Rule("testPlugin","testKey","testName",null,null);
  Rule rule2=new Rule("testPlugin","testKey2","testName2",null,null);
  getSession().save(rule1,rule2);
  RuleParam ruleParam1=new RuleParam(rule1,"paramKey","test","int");
  getSession().save(ruleParam1);
  Metric metric1=new Metric("testKey");
  Metric metric2=new Metric("testKey2");
  getSession().save(metric1,metric2);
  RulesProfile testProfile=new RulesProfile("testProfile","lang",false,false);
  ActiveRule ar=new ActiveRule(null,new Rule("testPlugin","testKey"),RulePriority.MAJOR);
  ar.getActiveRuleParams().add(new ActiveRuleParam(null,new RuleParam(null,"paramKey",null,null),"testValue"));
  testProfile.addActiveRule(ar);
  testProfile.addActiveRule(new ActiveRule(null,new Rule("testPlugin","testKey2"),RulePriority.MINOR));
  testProfile.getAlerts().add(new Alert(null,new Metric("testKey"),Alert.OPERATOR_EQUALS,"10","22"));
  testProfile.getAlerts().add(new Alert(null,new Metric("testKey2"),Alert.OPERATOR_GREATER,"10","22"));
  sonarConfig.setProfiles(Arrays.asList(testProfile));
  ProfilesBackup profilesBackupTest=new ProfilesBackup(getSession());
  profilesBackupTest.importXml(sonarConfig);
  assertThat(getHQLCount(RulesProfile.class),equalTo(1l));
  RulesProfile profileProvidedRemains=getSession().getSingleResult(RulesProfile.class,"name","test provided","provided",true);
  RulesProfile newProfile=getSession().getSingleResult(RulesProfile.class,"name","testProfile");
  assertNull(profileProvidedRemains);
  assertNotNull(newProfile);
  assertEquals(2,newProfile.getActiveRules().size());
  assertEquals(1,newProfile.getActiveRules(RulePriority.MAJOR).get(0).getActiveRuleParams().size());
  assertEquals(2,newProfile.getAlerts().size());
}
