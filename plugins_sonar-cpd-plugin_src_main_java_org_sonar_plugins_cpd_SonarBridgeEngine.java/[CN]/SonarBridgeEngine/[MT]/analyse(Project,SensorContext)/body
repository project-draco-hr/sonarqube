{
  String[] cpdExclusions=settings.getStringArray(CoreProperties.CPD_EXCLUSIONS);
  logExclusions(cpdExclusions,LOG);
  List<File> sourceFiles=fileSystem.files(FileQuery.onSource().onLanguage(project.getLanguageKey()).withExclusions(cpdExclusions));
  if (sourceFiles.isEmpty()) {
    return;
  }
  CpdMapping mapping=getMapping(project.getLanguage());
  SonarDuplicationsIndex index=indexFactory.create(project);
  TokenizerBridge bridge=new TokenizerBridge(mapping.getTokenizer(),fileSystem.sourceCharset().name(),getBlockSize(project));
  for (  File file : sourceFiles) {
    LOG.debug("Populating index from {}",file);
    Resource<?> resource=mapping.createResource(file,fileSystem.sourceDirs());
    String resourceId=SonarEngine.getFullKey(project,resource);
    List<Block> blocks=bridge.chunk(resourceId,file);
    index.insert(resource,blocks);
  }
  Predicate<CloneGroup> minimumTokensPredicate=DuplicationPredicates.numberOfUnitsNotLessThan(getMinimumTokens(project));
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  try {
    for (    File file : sourceFiles) {
      LOG.debug("Detection of duplications for {}",file);
      Resource<?> resource=mapping.createResource(file,fileSystem.sourceDirs());
      String resourceKey=SonarEngine.getFullKey(project,resource);
      Collection<Block> fileBlocks=index.getByResource(resource,resourceKey);
      Iterable<CloneGroup> filtered;
      try {
        List<CloneGroup> duplications=executorService.submit(new SonarEngine.Task(index,fileBlocks)).get(TIMEOUT,TimeUnit.SECONDS);
        filtered=Iterables.filter(duplications,minimumTokensPredicate);
      }
 catch (      TimeoutException e) {
        filtered=null;
        LOG.warn("Timeout during detection of duplications for " + file,e);
      }
catch (      InterruptedException e) {
        throw new SonarException("Fail during detection of duplication for " + file,e);
      }
catch (      ExecutionException e) {
        throw new SonarException("Fail during detection of duplication for " + file,e);
      }
      SonarEngine.save(context,resource,filtered);
    }
  }
  finally {
    executorService.shutdown();
  }
}
