{
  ProjectFileSystem fileSystem=project.getFileSystem();
  List<InputFile> inputFiles=fileSystem.mainFiles(project.getLanguageKey());
  if (inputFiles.isEmpty()) {
    return;
  }
  CpdMapping mapping=getMapping(project.getLanguage());
  SonarDuplicationsIndex index=indexFactory.create(project);
  BlockChunker blockChunker=new BlockChunker(BLOCK_SIZE);
  TokenizerBridge bridge=new TokenizerBridge(mapping.getTokenizer(),fileSystem.getSourceCharset().name());
  for (  InputFile inputFile : inputFiles) {
    Resource resource=mapping.createResource(inputFile.getFile(),fileSystem.getSourceDirs());
    String resourceId=SonarEngine.getFullKey(project,resource);
    List<Block> blocks=blockChunker.chunk(resourceId,bridge.tokenize(inputFile.getFile()));
    index.insert(resource,blocks);
  }
  bridge.clearCache();
  for (  InputFile inputFile : inputFiles) {
    Resource resource=mapping.createResource(inputFile.getFile(),fileSystem.getSourceDirs());
    String resourceKey=SonarEngine.getFullKey(project,resource);
    Collection<Block> fileBlocks=index.getByResource(resource,resourceKey);
    List<CloneGroup> duplications=SuffixTreeCloneDetectionAlgorithm.detect(index,fileBlocks);
    SonarEngine.save(context,resource,duplications);
  }
}
