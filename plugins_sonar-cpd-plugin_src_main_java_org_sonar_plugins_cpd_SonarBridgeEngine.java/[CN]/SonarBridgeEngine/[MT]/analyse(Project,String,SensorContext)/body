{
  String[] cpdExclusions=settings.getStringArray(CoreProperties.CPD_EXCLUSIONS);
  logExclusions(cpdExclusions,LOG);
  Iterable<InputFile> sourceFiles=fileSystem.inputFiles(FileQuery.onMain().onLanguage(languageKey).withExclusions(cpdExclusions));
  if (!sourceFiles.iterator().hasNext()) {
    return;
  }
  CpdMapping mapping=getMapping(languageKey);
  SonarDuplicationsIndex index=indexFactory.create(project);
  TokenizerBridge bridge=new TokenizerBridge(mapping.getTokenizer(),fileSystem.sourceCharset().name(),getBlockSize(project,languageKey));
  for (  InputFile inputFile : sourceFiles) {
    LOG.debug("Populating index from {}",inputFile);
    String resourceEffectiveKey=inputFile.attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY);
    List<Block> blocks=bridge.chunk(resourceEffectiveKey,inputFile.file());
    index.insert(inputFile,blocks);
  }
  Predicate<CloneGroup> minimumTokensPredicate=DuplicationPredicates.numberOfUnitsNotLessThan(getMinimumTokens(project,languageKey));
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  try {
    for (    InputFile inputFile : sourceFiles) {
      LOG.debug("Detection of duplications for {}",inputFile);
      String resourceEffectiveKey=inputFile.attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY);
      Collection<Block> fileBlocks=index.getByInputFile(inputFile,resourceEffectiveKey);
      Iterable<CloneGroup> filtered;
      try {
        List<CloneGroup> duplications=executorService.submit(new SonarEngine.Task(index,fileBlocks)).get(TIMEOUT,TimeUnit.SECONDS);
        filtered=Iterables.filter(duplications,minimumTokensPredicate);
      }
 catch (      TimeoutException e) {
        filtered=null;
        LOG.warn("Timeout during detection of duplications for " + inputFile,e);
      }
catch (      InterruptedException e) {
        throw new SonarException("Fail during detection of duplication for " + inputFile,e);
      }
catch (      ExecutionException e) {
        throw new SonarException("Fail during detection of duplication for " + inputFile,e);
      }
      SonarEngine.save(context,inputFile,filtered);
    }
  }
  finally {
    executorService.shutdown();
  }
}
