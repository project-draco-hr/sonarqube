{
  tester.get(RuleDao.class).insert(dbSession,RuleTesting.newDto(RuleKey.of("javascript","S001")));
  dbSession.commit();
  SearchHealth health=tester.get(SearchHealth.class);
  Date now=new Date();
  ClusterHealth clusterHealth=health.getClusterHealth();
  assertThat(clusterHealth.isClusterAvailable()).isTrue();
  assertThat(clusterHealth.getNumberOfNodes()).isEqualTo(1);
  NodeHealth nodeHealth=health.getNodesHealth().values().iterator().next();
  assertThat(nodeHealth.isMaster()).isTrue();
  assertThat(nodeHealth.getAddress()).contains(":");
  assertThat(nodeHealth.getJvmHeapUsedPercent()).contains("%");
  assertThat(nodeHealth.getFsUsedPercent()).contains("%");
  assertThat(nodeHealth.getJvmThreads()).isGreaterThanOrEqualTo(0L);
  assertThat(nodeHealth.getFieldCacheMemory()).isGreaterThanOrEqualTo(0L);
  assertThat(nodeHealth.getFilterCacheMemory()).isGreaterThanOrEqualTo(0L);
  assertThat(nodeHealth.getProcessCpuPercent()).contains("%");
  long openFiles=nodeHealth.getOpenFiles();
  if (!tester.get(System2.class).isOsWindows()) {
    assertThat(openFiles).isGreaterThanOrEqualTo(0L);
  }
  assertThat(nodeHealth.getJvmUpSince().before(now)).isTrue();
  List<NodeHealth.Performance> performances=nodeHealth.getPerformanceStats();
  assertThat(performances).hasSize(7);
  for (  NodeHealth.Performance performance : performances) {
    assertThat(performance.getName()).isNotNull();
    assertThat(performance.getValue()).isNotNull();
    assertThat(performance.getMessage()).isNotNull();
    assertThat(performance.getStatus()).isNotNull();
  }
  Map<String,IndexHealth> indexHealth=health.getIndexHealth();
  assertThat(indexHealth).isNotEmpty();
  for (  IndexHealth index : indexHealth.values()) {
    assertThat(index.getDocumentCount()).isGreaterThanOrEqualTo(0L);
    Date lastSync=index.getLastSynchronization();
    if (lastSync != null) {
      assertThat(lastSync.before(now)).isTrue();
    }
    assertThat(index.isOptimized()).isIn(true,false);
  }
}
