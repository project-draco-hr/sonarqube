{
  org.sonar.api.measures.Metric<?> m=metricFinder.findByKey(measure.metric().key());
  if (m == null) {
    throw new IllegalStateException("Unknow metric with key: " + measure.metric().key());
  }
  Measure measureToSave=new Measure(m);
switch (m.getType()) {
case BOOL:
    measureToSave.setValue(Boolean.TRUE.equals(measure.value()) ? 1.0 : 0.0);
  break;
case INT:
case MILLISEC:
measureToSave.setValue(Double.valueOf(((Integer)measure.value())));
break;
case FLOAT:
case PERCENT:
case RATING:
measureToSave.setValue(((Double)measure.value()));
break;
case STRING:
case LEVEL:
case DATA:
case DISTRIB:
measureToSave.setData(((String)measure.value()));
break;
case WORK_DUR:
measureToSave.setValue(Double.valueOf(((Long)measure.value())));
break;
default :
if (m.isNumericType()) {
measureToSave.setValue(((Double)measure.value()));
}
 else if (m.isDataType()) {
measureToSave.setData(((String)measure.value()));
}
 else {
throw new UnsupportedOperationException("Unsupported type :" + m.getType());
}
}
if (measure.inputFile() != null) {
Formula formula=measure.metric() instanceof org.sonar.api.measures.Metric ? ((org.sonar.api.measures.Metric)measure.metric()).getFormula() : null;
if (formula instanceof SumChildDistributionFormula) {
if (!Scopes.isHigherThanOrEquals(Scopes.FILE,((SumChildDistributionFormula)formula).getMinimumScopeToPersist())) {
measureToSave.setPersistenceMode(PersistenceMode.MEMORY);
}
}
sensorContext.saveMeasure(measure.inputFile(),measureToSave);
}
 else {
sensorContext.saveMeasure(measureToSave);
}
}
