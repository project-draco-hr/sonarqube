{
  db.prepareDbUnit(getClass(),"before.xml");
  Connection connection=null;
  try {
    connection=db.openConnection();
    connection.prepareStatement("insert into snapshot_sources " + "(snapshot_id, data, updated_at) " + "values "+ "(6, 'class Foo {\r\n  // Empty\r\n}\r\n', '2014-10-31 16:44:02.000')").executeUpdate();
    db.executeUpdateSql("insert into snapshot_sources " + "(snapshot_id, data, updated_at) " + "values "+ "(7, '', '2014-10-31 16:44:02.000')");
    PreparedStatement duplicationDataStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, text_value) " + "values "+ "(13, 6, ?)");
    duplicationDataStmt.setBytes(1,"<duplications><g><b s=\"1\" l=\"1\" r=\"MyProject:src/main/xoo/prj/MyFile.xoo\"/><b s=\"2\" l=\"1\" r=\"MyProject:src/main/xoo/prj/MyFile.xoo\"/><b s=\"3\" l=\"1\" r=\"MyProject:src/main/xoo/prj/AnotherFile.xoo\"/".getBytes(StandardCharsets.UTF_8));
    duplicationDataStmt.executeUpdate();
  }
  finally {
    DbUtils.commitAndCloseQuietly(connection);
  }
  migration.execute();
  List<Map<String,Object>> results=db.select("select project_uuid as \"projectUuid\", file_uuid as \"fileUuid\", created_at as \"createdAt\", " + "updated_at as \"updatedAt\", data as \"data\", data as \"data\", line_hashes as \"lineHashes\", data_hash as \"dataHash\"  from file_sources");
  assertThat(results).hasSize(2);
  assertThat(results.get(0).get("projectUuid")).isEqualTo("uuid-MyProject");
  assertThat(results.get(0).get("fileUuid")).isEqualTo("uuid-Migrated.xoo");
  assertThat(results.get(0).get("data")).isEqualTo("");
  assertThat(results.get(0).get("lineHashes")).isEqualTo("");
  assertThat(results.get(0).get("dataHash")).isEqualTo("");
  assertThat(results.get(0).get("updatedAt")).isEqualTo(NOW);
  assertThat(results.get(0).get("createdAt")).isEqualTo(1416238020000L);
  assertThat(results.get(1).get("projectUuid")).isEqualTo("uuid-MyProject");
  assertThat(results.get(1).get("fileUuid")).isEqualTo("uuid-MyFile.xoo");
  assertThat(results.get(1).get("data")).isEqualTo(",,,,,,,,,,,,,,,class Foo {\r\n,,,,,,,,,,,,,,,  // Empty\r\n,,,,,,,,,,,,,,,}\r\n,,,,,,,,,,,,,,,\r\n");
  assertThat(results.get(1).get("lineHashes")).isEqualTo("6a19ce786467960a3a9b0d26383a464a\naab2dbc5fdeaa80b050b1d049ede357c\ncbb184dd8e05c9709e5dcaedaa0495cf\n\n");
  assertThat(results.get(1).get("dataHash")).isEqualTo("");
  assertThat(formatLongDate((long)results.get(1).get("updatedAt")).toString()).startsWith("2014-10-31");
  assertThat(results.get(1).get("createdAt")).isEqualTo(NOW);
}
