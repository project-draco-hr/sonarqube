{
  db.prepareDbUnit(getClass(),"before.xml");
  Connection connection=null;
  try {
    connection=db.openConnection();
    db.executeUpdateSql("insert into snapshot_sources " + "(snapshot_id, data, updated_at) " + "values "+ "(6, 'class Foo {\r\n  // Empty\r\n}\r\n', '2014-10-31 16:44:02.000')");
    db.executeUpdateSql("insert into snapshot_sources " + "(snapshot_id, data, updated_at) " + "values "+ "(7, '', '2014-10-31 16:44:02.000')");
    PreparedStatement revisionStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(1, 6, ?)");
    revisionStmt.setBytes(1,"1=aef12a;2=abe465;3=afb789;4=afb789".getBytes(StandardCharsets.UTF_8));
    revisionStmt.executeUpdate();
    revisionStmt.close();
    PreparedStatement authorStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(2, 6, ?)");
    authorStmt.setBytes(1,"1=alice;2=bob;3=carol;4=carol".getBytes(StandardCharsets.UTF_8));
    authorStmt.executeUpdate();
    authorStmt.close();
    PreparedStatement dateStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(3, 6, ?)");
    dateStmt.setBytes(1,"1=2014-04-25T12:34:56+0100;2=2014-07-25T12:34:56+0100;3=2014-03-23T12:34:56+0100;4=2014-03-23T12:34:56+0100".getBytes(StandardCharsets.UTF_8));
    dateStmt.executeUpdate();
    dateStmt.close();
    PreparedStatement utHitsStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(4, 6, ?)");
    utHitsStmt.setBytes(1,"1=1;3=0".getBytes(StandardCharsets.UTF_8));
    utHitsStmt.executeUpdate();
    utHitsStmt.close();
    PreparedStatement utCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(5, 6, ?)");
    utCondStmt.setBytes(1,"1=4".getBytes(StandardCharsets.UTF_8));
    utCondStmt.executeUpdate();
    utCondStmt.close();
    PreparedStatement utCoveredCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(6, 6, ?)");
    utCoveredCondStmt.setBytes(1,"1=2".getBytes(StandardCharsets.UTF_8));
    utCoveredCondStmt.executeUpdate();
    utCoveredCondStmt.close();
    PreparedStatement itHitsStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(7, 6, ?)");
    itHitsStmt.setBytes(1,"1=2;3=0".getBytes(StandardCharsets.UTF_8));
    itHitsStmt.executeUpdate();
    itHitsStmt.close();
    PreparedStatement itCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(8, 6, ?)");
    itCondStmt.setBytes(1,"1=5".getBytes(StandardCharsets.UTF_8));
    itCondStmt.executeUpdate();
    itCondStmt.close();
    PreparedStatement itCoveredCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(9, 6, ?)");
    itCoveredCondStmt.setBytes(1,"1=3".getBytes(StandardCharsets.UTF_8));
    itCoveredCondStmt.executeUpdate();
    itCoveredCondStmt.close();
    PreparedStatement overallHitsStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(10, 6, ?)");
    overallHitsStmt.setBytes(1,"1=3;3=0".getBytes(StandardCharsets.UTF_8));
    overallHitsStmt.executeUpdate();
    overallHitsStmt.close();
    PreparedStatement overallCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(11, 6, ?)");
    overallCondStmt.setBytes(1,"1=6".getBytes(StandardCharsets.UTF_8));
    overallCondStmt.executeUpdate();
    overallCondStmt.close();
    PreparedStatement overallCoveredCondStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(12, 6, ?)");
    overallCoveredCondStmt.setBytes(1,"1=4".getBytes(StandardCharsets.UTF_8));
    overallCoveredCondStmt.executeUpdate();
    overallCoveredCondStmt.close();
    PreparedStatement duplicationDataStmt=connection.prepareStatement("insert into project_measures " + "(metric_id, snapshot_id, " + columnName + ") "+ "values "+ "(13, 6, ?)");
    duplicationDataStmt.setBytes(1,"<duplications><g><b s=\"1\" l=\"1\" r=\"MyProject:src/main/xoo/prj/MyFile.xoo\"/><b s=\"2\" l=\"1\" r=\"MyProject:src/main/xoo/prj/MyFile.xoo\"/><b s=\"3\" l=\"1\" r=\"MyProject:src/main/xoo/prj/AnotherFile.xoo\"/></g></duplications>".getBytes(StandardCharsets.UTF_8));
    duplicationDataStmt.executeUpdate();
    duplicationDataStmt.close();
  }
  finally {
    DbUtils.commitAndCloseQuietly(connection);
  }
  migration.execute();
  List<Map<String,Object>> results=getFileSources();
  assertThat(results).hasSize(2);
  assertThat(results.get(0).get("projectUuid")).isEqualTo("uuid-MyProject");
  assertThat(results.get(0).get("fileUuid")).isEqualTo("uuid-Migrated.xoo");
  assertThat(results.get(0).get("data")).isEqualTo("");
  assertThat(results.get(0).get("lineHashes")).isEqualTo("");
  assertThat(results.get(0).get("dataHash")).isEqualTo("");
  assertThat(results.get(0).get("updatedAt")).isEqualTo(NOW);
  assertThat(results.get(0).get("createdAt")).isEqualTo(1416238020000L);
  assertThat(results.get(1).get("projectUuid")).isEqualTo("uuid-MyProject");
  assertThat(results.get(1).get("fileUuid")).isEqualTo("uuid-MyFile.xoo");
  assertThat(results.get(1).get("data")).isEqualTo("aef12a,alice,2014-04-25T12:34:56+0100,1,4,2,2,5,3,3,6,4,,,1,class Foo {\r\nabe465,bob,2014-07-25T12:34:56+0100,,,,,,,,,,,,2,  " + "// Empty\r\nafb789,carol,2014-03-23T12:34:56+0100,0,,,0,,,0,,,,,,}\r\nafb789,carol,2014-03-23T12:34:56+0100,,,,,,,,,,,,,\r\n");
  assertThat(results.get(1).get("lineHashes")).isEqualTo("6a19ce786467960a3a9b0d26383a464a\naab2dbc5fdeaa80b050b1d049ede357c\ncbb184dd8e05c9709e5dcaedaa0495cf\n\n");
  assertThat(results.get(1).get("dataHash")).isEqualTo("");
  assertThat(formatLongDate((long)results.get(1).get("updatedAt")).toString()).startsWith("2014-10-31");
  assertThat(results.get(1).get("createdAt")).isEqualTo(NOW);
}
