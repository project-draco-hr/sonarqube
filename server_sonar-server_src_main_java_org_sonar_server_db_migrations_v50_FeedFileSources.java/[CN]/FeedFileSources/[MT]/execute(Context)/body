{
  RowReader<Long> simpleLongReader=new RowReader<Long>(){
    @Override public Long read(    Row row) throws SQLException {
      Long longValue=row.getLong(1);
      return longValue == null ? Long.valueOf(0L) : longValue;
    }
  }
;
  Long revisionMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'revisions_by_line'").get(simpleLongReader);
  Long authorMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'authors_by_line'").get(simpleLongReader);
  Long datesMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'last_commit_datetimes_by_line'").get(simpleLongReader);
  MassUpdate massUpdate=context.prepareMassUpdate();
  massUpdate.select("SELECT " + "p.uuid as project_uuid, " + "f.uuid as file_uuid, "+ "ss.data as source, "+ "ss.updated_at, "+ "m1.text_value as short_revisions_by_line, "+ "m1.measure_data as long_revisions_by_line, "+ "m2.text_value as short_authors_by_line, "+ "m2.measure_data as long_authors_by_line, "+ "m3.text_value as short_dates_by_line, "+ "m3.measure_data as short_dates_by_line "+ "FROM snapshots s "+ "JOIN snapshot_sources ss "+ "ON s.id = ss.snapshot_id AND s.islast = ? "+ "JOIN projects p "+ "ON s.root_project_id = p.id "+ "JOIN projects f "+ "ON s.project_id = f.id "+ "LEFT JOIN project_measures m1 "+ "ON m1.snapshot_id = s.id AND m1.metric_id = ? "+ "LEFT JOIN project_measures m2 "+ "ON m2.snapshot_id = s.id AND m2.metric_id = ? "+ "LEFT JOIN project_measures m3 "+ "ON m3.snapshot_id = s.id AND m3.metric_id = ? "+ "WHERE "+ "f.enabled = ? "+ "AND f.scope = 'FIL' "+ "AND p.scope = 'PRJ' AND p.qualifier = 'TRK' ").setBoolean(1,true).setLong(2,revisionMetricId != null ? revisionMetricId : 0L).setLong(3,authorMetricId != null ? authorMetricId : 0L).setLong(4,datesMetricId != null ? datesMetricId : 0L).setBoolean(5,true);
  massUpdate.update("INSERT INTO file_sources" + "(project_uuid, file_uuid, created_at, updated_at, data, data_hash)" + "VALUES "+ "(?, ?, ?, ?, ?, ?)");
  massUpdate.execute(new FileSourceBuilder(system));
}
