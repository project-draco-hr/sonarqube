{
  RowReader<Long> simpleLongReader=new RowReader<Long>(){
    @Override public Long read(    Row row) throws SQLException {
      Long longValue=row.getLong(1);
      return longValue == null ? Long.valueOf(0L) : longValue;
    }
  }
;
  Long revisionMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'revisions_by_line'").get(simpleLongReader);
  Long authorMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'authors_by_line'").get(simpleLongReader);
  Long datesMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'last_commit_datetimes_by_line'").get(simpleLongReader);
  Long utCoverageHitsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'coverage_line_hits_data'").get(simpleLongReader);
  Long utConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'conditions_by_line'").get(simpleLongReader);
  Long utCoveredConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'covered_conditions_by_line'").get(simpleLongReader);
  Long itCoverageHitsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'it_coverage_line_hits_data'").get(simpleLongReader);
  Long itConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'it_conditions_by_line'").get(simpleLongReader);
  Long itCoveredConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'it_covered_conditions_by_line'").get(simpleLongReader);
  Long overallCoverageHitsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'overall_coverage_line_hits_data'").get(simpleLongReader);
  Long overallConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'overall_conditions_by_line'").get(simpleLongReader);
  Long overallCoveredConditionsByLineMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'overall_covered_conditions_by_line'").get(simpleLongReader);
  Long duplicationDataMetricId=context.prepareSelect("SELECT id FROM metrics WHERE name = 'duplications_data'").get(simpleLongReader);
  MassUpdate massUpdate=context.prepareMassUpdate();
  massUpdate.select("SELECT " + "p.uuid, " + "f.uuid, "+ "ss.data, "+ "ss.updated_at, "+ "m1.text_value, "+ "m1.measure_data, "+ "m2.text_value, "+ "m2.measure_data, "+ "m3.text_value, "+ "m3.measure_data, "+ "m4.text_value, "+ "m4.measure_data, "+ "m5.text_value, "+ "m5.measure_data, "+ "m6.text_value, "+ "m6.measure_data, "+ "m7.text_value, "+ "m7.measure_data, "+ "m8.text_value, "+ "m8.measure_data, "+ "m9.text_value, "+ "m9.measure_data, "+ "m10.text_value, "+ "m10.measure_data, "+ "m11.text_value, "+ "m11.measure_data, "+ "m12.text_value, "+ "m12.measure_data  "+ "FROM snapshots s "+ "JOIN snapshot_sources ss "+ "ON s.id = ss.snapshot_id AND s.islast = ? "+ "JOIN projects p "+ "ON s.root_project_id = p.id "+ "JOIN projects f "+ "ON s.project_id = f.id "+ "LEFT JOIN project_measures m1 "+ "ON m1.snapshot_id = s.id AND m1.metric_id = ? "+ "LEFT JOIN project_measures m2 "+ "ON m2.snapshot_id = s.id AND m2.metric_id = ? "+ "LEFT JOIN project_measures m3 "+ "ON m3.snapshot_id = s.id AND m3.metric_id = ? "+ "LEFT JOIN project_measures m4 "+ "ON m4.snapshot_id = s.id AND m4.metric_id = ? "+ "LEFT JOIN project_measures m5 "+ "ON m5.snapshot_id = s.id AND m5.metric_id = ? "+ "LEFT JOIN project_measures m6 "+ "ON m6.snapshot_id = s.id AND m6.metric_id = ? "+ "LEFT JOIN project_measures m7 "+ "ON m7.snapshot_id = s.id AND m7.metric_id = ? "+ "LEFT JOIN project_measures m8 "+ "ON m8.snapshot_id = s.id AND m8.metric_id = ? "+ "LEFT JOIN project_measures m9 "+ "ON m9.snapshot_id = s.id AND m9.metric_id = ? "+ "LEFT JOIN project_measures m10 "+ "ON m10.snapshot_id = s.id AND m10.metric_id = ? "+ "LEFT JOIN project_measures m11 "+ "ON m11.snapshot_id = s.id AND m11.metric_id = ? "+ "LEFT JOIN project_measures m12 "+ "ON m12.snapshot_id = s.id AND m12.metric_id = ? "+ "WHERE "+ "f.enabled = ? "+ "AND f.scope = 'FIL' "+ "AND p.scope = 'PRJ' AND p.qualifier = 'TRK' ").setBoolean(1,true).setLong(2,revisionMetricId != null ? revisionMetricId : 0L).setLong(3,authorMetricId != null ? authorMetricId : 0L).setLong(4,datesMetricId != null ? datesMetricId : 0L).setLong(5,utCoverageHitsByLineMetricId != null ? utCoverageHitsByLineMetricId : 0L).setLong(6,utConditionsByLineMetricId != null ? utConditionsByLineMetricId : 0L).setLong(7,utCoveredConditionsByLineMetricId != null ? utCoveredConditionsByLineMetricId : 0L).setLong(8,itCoverageHitsByLineMetricId != null ? itCoverageHitsByLineMetricId : 0L).setLong(9,itConditionsByLineMetricId != null ? itConditionsByLineMetricId : 0L).setLong(10,itCoveredConditionsByLineMetricId != null ? itCoveredConditionsByLineMetricId : 0L).setLong(11,overallCoverageHitsByLineMetricId != null ? overallCoverageHitsByLineMetricId : 0L).setLong(12,overallConditionsByLineMetricId != null ? overallConditionsByLineMetricId : 0L).setLong(13,overallCoveredConditionsByLineMetricId != null ? overallCoveredConditionsByLineMetricId : 0L).setBoolean(14,true);
  massUpdate.update("INSERT INTO file_sources" + "(project_uuid, file_uuid, created_at, updated_at, data, line_hashes, data_hash)" + "VALUES "+ "(?, ?, ?, ?, ?, ?, ?)");
  massUpdate.rowPluralName("files");
  massUpdate.execute(new FileSourceBuilder(system));
}
