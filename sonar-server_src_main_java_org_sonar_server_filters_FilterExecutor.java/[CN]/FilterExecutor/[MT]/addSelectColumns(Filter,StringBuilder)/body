{
  sql.append("SELECT s.id, MAX(s.project_id) as pid, MAX(s.root_project_id) as rpid");
  if (filter.isSortedByLanguage()) {
    sql.append(", MAX(p.language) as lang ");
  }
 else   if (filter.isSortedByName()) {
    sql.append(", MAX(p.long_name) as name ");
  }
 else   if (filter.isSortedByDate()) {
    sql.append(", MAX(s.created_at) as createdat ");
  }
 else   if (filter.isSortedByVersion()) {
    sql.append(", MAX(s.version) as version ");
  }
  if (filter.getSortedMetricId() != null) {
    sql.append(", MAX(CASE WHEN pm.metric_id=");
    sql.append(filter.getSortedMetricId());
    sql.append(" THEN ");
    sql.append(filter.getColumnToSort());
    sql.append(" ELSE NULL END) AS sortvalue");
    sql.append(" ");
  }
  for (int index=0; index < filter.getMeasureCriteria().size(); index++) {
    MeasureCriterion criterion=filter.getMeasureCriteria().get(index);
    String column=(criterion.isVariation() ? Filter.getVariationColumn(filter.getPeriodIndex()) : "value");
    sql.append(", MAX(CASE WHEN pm.metric_id=");
    sql.append(criterion.getMetricId());
    sql.append(" AND pm.");
    sql.append(column);
    sql.append(criterion.getOperator());
    sql.append(criterion.getValue());
    sql.append(" THEN ");
    sql.append(column);
    sql.append(" ELSE NULL END) AS crit_");
    sql.append(index);
    sql.append(" ");
  }
}
