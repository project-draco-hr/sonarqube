{
  List<TokensLine> filtered=Lists.newArrayList();
  int i=0;
  while (i < fragments.size()) {
    TokensLine first=fragments.get(i);
    int j=i + 1;
    while (j < fragments.size() && fragments.get(j).getValue().equals(first.getValue())) {
      j++;
    }
    filtered.add(fragments.get(i));
    if (i < j - 1) {
      filtered.add(fragments.get(j - 1));
    }
    i=j;
  }
  fragments=filtered;
  if (fragments.size() < blockSize) {
    return Lists.newArrayList();
  }
  TokensLine[] fragmentsArr=fragments.toArray(new TokensLine[fragments.size()]);
  List<Block> blocks=Lists.newArrayListWithCapacity(fragmentsArr.length - blockSize + 1);
  long hash=0;
  int first=0;
  int last=0;
  for (; last < blockSize - 1; last++) {
    hash=hash * PRIME_BASE + fragmentsArr[last].getHashCode();
  }
  Block.Builder blockBuilder=Block.builder().setResourceId(resourceId);
  for (; last < fragmentsArr.length; last++, first++) {
    TokensLine firstFragment=fragmentsArr[first];
    TokensLine lastFragment=fragmentsArr[last];
    hash=hash * PRIME_BASE + lastFragment.getHashCode();
    Block block=blockBuilder.setBlockHash(new ByteArray(hash)).setIndexInFile(first).setLines(firstFragment.getStartLine(),lastFragment.getEndLine()).setUnit(firstFragment.getStartUnit(),lastFragment.getEndUnit()).build();
    blocks.add(block);
    hash-=power * firstFragment.getHashCode();
  }
  return blocks;
}
