{
  boolean hasScanPerm=UserSession.get().hasGlobalPermission(GlobalPermissions.SCAN_EXECUTION);
  checkPermission(query.isPreview());
  DbSession session=dbClient.openSession(false);
  try {
    ProjectReferentials ref=new ProjectReferentials();
    String projectKey=query.getModuleKey();
    ComponentDto module=dbClient.componentDao().getNullableByKey(session,query.getModuleKey());
    if (module != null) {
      ComponentDto project=getProject(module,session);
      if (!project.key().equals(module.key())) {
        addSettings(ref,module.getKey(),getSettingsFromParents(module,hasScanPerm,session));
        projectKey=project.key();
      }
      List<ComponentDto> moduleChildren=dbClient.componentDao().findChildrenModulesFromModule(session,query.getModuleKey());
      Map<String,String> moduleUuidsByKey=moduleUuidsByKey(module,moduleChildren);
      Map<String,Long> moduleIdsByKey=moduleIdsByKey(module,moduleChildren);
      List<PropertyDto> moduleChildrenSettings=dbClient.propertiesDao().findChildrenModuleProperties(query.getModuleKey(),session);
      TreeModuleSettings treeModuleSettings=new TreeModuleSettings(moduleUuidsByKey,moduleIdsByKey,moduleChildren,moduleChildrenSettings,module);
      addSettingsToChildrenModules(ref,query.getModuleKey(),Maps.<String,String>newHashMap(),treeModuleSettings,hasScanPerm,session);
      addFileData(session,ref,moduleChildren,module.key());
    }
    addProfiles(ref,projectKey,query.getProfileName(),session);
    addActiveRules(ref);
    addManualRules(ref);
    return ref;
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
