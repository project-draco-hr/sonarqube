{
  for (  org.sonar.batch.protocol.input.QProfile qProfile : ref.qProfiles()) {
    Map<RuleKey,Rule> languageRules=ruleByRuleKey(ruleService.search(new RuleQuery().setLanguages(newArrayList(qProfile.language())),new QueryContext(userSession).setLimit(100).setFieldsToReturn(newArrayList(RuleNormalizer.RuleField.KEY.field(),RuleNormalizer.RuleField.NAME.field(),RuleNormalizer.RuleField.INTERNAL_KEY.field(),RuleNormalizer.RuleField.TEMPLATE_KEY.field())).setScroll(true)).scroll());
    for (Iterator<ActiveRule> activeRuleIterator=qProfileLoader.findActiveRulesByProfile(qProfile.key()); activeRuleIterator.hasNext(); ) {
      ActiveRule activeRule=activeRuleIterator.next();
      Rule rule=languageRules.get(activeRule.key().ruleKey());
      if (rule == null) {
        LOG.warn("Rule could not be found on active rule '{}'",activeRule.key());
      }
 else {
        RuleKey templateKey=rule.templateKey();
        org.sonar.batch.protocol.input.ActiveRule inputActiveRule=new org.sonar.batch.protocol.input.ActiveRule(activeRule.key().ruleKey().repository(),activeRule.key().ruleKey().rule(),templateKey != null ? templateKey.rule() : null,rule.name(),activeRule.severity(),rule.internalKey(),qProfile.language());
        for (        Map.Entry<String,String> entry : activeRule.params().entrySet()) {
          inputActiveRule.addParam(entry.getKey(),entry.getValue());
        }
        ref.addActiveRule(inputActiveRule);
      }
    }
  }
}
