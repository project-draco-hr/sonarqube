{
  Table<String,String,String> nodes=HashBasedTable.create();
  for (  Map.Entry<String,NodeHealth> nodeEntry : searchHealth.getNodesHealth().entrySet()) {
    String name=nodeEntry.getKey();
    nodes.put(name,"Name",nodeEntry.getKey());
    NodeHealth nodeHealth=nodeEntry.getValue();
    nodes.put(name,"Type",nodeHealth.isMaster() ? "Master" : "Slave");
    nodes.put(name,"Address",nodeHealth.getAddress());
    nodes.put(name,"JVM Heap Usage",nodeHealth.getJvmHeapUsedPercent());
    nodes.put(name,"JVM Threads",String.valueOf(nodeHealth.getJvmThreads()));
    nodes.put(name,"JVM Started Since",formatDateTime(nodeHealth.getJvmUpSince()));
    nodes.put(name,"Disk Usage",nodeHealth.getFsUsedPercent());
    nodes.put(name,"Open Files",String.valueOf(nodeHealth.getOpenFiles()));
    nodes.put(name,"CPU Load Average",nodeHealth.getProcessCpuPercent());
    nodes.put(name,"Field Cache Size",byteCountToDisplaySize(nodeHealth.getFieldCacheMemory()));
    nodes.put(name,"Filter Cache Size",byteCountToDisplaySize(nodeHealth.getFilterCacheMemory()));
    for (    Performance performance : nodeHealth.getPerformanceStats()) {
      String message="";
      if (Performance.Status.ERROR.equals(performance.getStatus()) || Performance.Status.WARN.equals(performance.getStatus())) {
        message=String.format("- %s: %s",performance.getStatus(),performance.getMessage());
      }
      if (performance.getName().contains("Eviction")) {
        nodes.put(name,performance.getName(),String.format("%f %s",performance.getValue(),message));
      }
 else {
        nodes.put(name,performance.getName(),String.format("%.1f ms %s",performance.getValue(),message));
      }
    }
  }
  return nodes;
}
