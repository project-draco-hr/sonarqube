{
  InputPathCache cache=new InputPathCache(caches);
  DefaultInputFile fooFile=new DefaultInputFile("foo","src/main/java/Foo.java").setFile(temp.newFile("Foo.java"));
  cache.put("struts",fooFile);
  cache.put("struts-core",new DeprecatedDefaultInputFile("foo","src/main/java/Bar.java").setBasedir(temp.newFolder()).setDeprecatedKey("foo").setSourceDirAbsolutePath("foo").setPathRelativeToSourceDir("foo").setLanguage("bla").setType(Type.MAIN).setStatus(Status.ADDED).setHash("xyz").setLines(1).setEncoding("UTF-8").setOriginalLineOffsets(new long[]{0,4}).setLineHashes(new String[]{"foo","bar"}).setFile(temp.newFile("Bar.java")));
  DefaultInputFile loadedFile=(DefaultInputFile)cache.getFile("struts-core","src/main/java/Bar.java");
  assertThat(loadedFile.relativePath()).isEqualTo("src/main/java/Bar.java");
  assertThat(loadedFile.encoding()).isEqualTo("UTF-8");
  assertThat(loadedFile.originalLineOffsets()).containsOnly(0,4);
  assertThat(loadedFile.lineHashes()).containsOnly("foo","bar");
  assertThat(cache.filesByModule("struts")).hasSize(1);
  assertThat(cache.filesByModule("struts-core")).hasSize(1);
  assertThat(cache.all()).hasSize(2);
  for (  InputPath inputPath : cache.all()) {
    assertThat(inputPath.relativePath()).startsWith("src/main/java/");
  }
  cache.remove("struts",fooFile);
  assertThat(cache.all()).hasSize(1);
  cache.removeModule("struts");
  assertThat(cache.filesByModule("struts")).hasSize(0);
  assertThat(cache.filesByModule("struts-core")).hasSize(1);
  assertThat(cache.all()).hasSize(1);
}
