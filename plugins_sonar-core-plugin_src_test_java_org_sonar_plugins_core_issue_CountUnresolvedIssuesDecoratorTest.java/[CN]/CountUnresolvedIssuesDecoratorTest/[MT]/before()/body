{
  ruleA1=Rule.create().setRepositoryKey("ruleA1").setKey("ruleA1").setName("nameA1");
  ruleA2=Rule.create().setRepositoryKey("ruleA2").setKey("ruleA2").setName("nameA2");
  ruleB1=Rule.create().setRepositoryKey("ruleB1").setKey("ruleB1").setName("nameB1");
  ruleFinder=mock(RuleFinder.class);
  when(ruleFinder.findByKey(ruleA1.ruleKey())).thenReturn(ruleA1);
  when(ruleFinder.findByKey(ruleA2.ruleKey())).thenReturn(ruleA2);
  when(ruleFinder.findByKey(ruleB1.ruleKey())).thenReturn(ruleB1);
  rightNow=new Date();
  tenDaysAgo=DateUtils.addDays(rightNow,-10);
  afterTenDaysAgo=DateUtils.addDays(tenDaysAgo,1);
  fiveDaysAgo=DateUtils.addDays(rightNow,-5);
  afterFiveDaysAgo=DateUtils.addDays(fiveDaysAgo,1);
  sameSecond=DateUtils.truncate(rightNow,Calendar.SECOND);
  timeMachineConfiguration=mock(TimeMachineConfiguration.class);
  when(timeMachineConfiguration.periods()).thenReturn(newArrayList(new Period(1,afterFiveDaysAgo),new Period(2,afterTenDaysAgo)));
  project=mock(Project.class);
  resource=mock(Resource.class);
  context=mock(DecoratorContext.class);
  when(context.getResource()).thenReturn(resource);
  when(context.getProject()).thenReturn(project);
  when(context.getMeasure(CoreMetrics.NEW_VIOLATIONS)).thenReturn(null);
  issuable=mock(Issuable.class);
  ResourcePerspectives perspectives=mock(ResourcePerspectives.class);
  when(perspectives.as(Issuable.class,resource)).thenReturn(issuable);
  decorator=new CountUnresolvedIssuesDecorator(perspectives,ruleFinder,timeMachineConfiguration);
}
