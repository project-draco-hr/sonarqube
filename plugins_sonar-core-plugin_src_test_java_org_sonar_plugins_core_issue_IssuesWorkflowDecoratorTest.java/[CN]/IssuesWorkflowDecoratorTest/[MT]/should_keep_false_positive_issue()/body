{
  when(moduleIssues.issues(anyString())).thenReturn(Lists.<Issue>newArrayList(new DefaultIssue().setKey("100")));
  when(initialOpenIssuesStack.selectAndRemove(anyInt())).thenReturn(newArrayList(new IssueDto().setKey("100").setRuleId(1).setStatus(Issue.STATUS_RESOLVED).setResolution(Issue.RESOLUTION_FALSE_POSITIVE).setRuleKey_unit_test_only("squid","AvoidCycle")));
  decorator.decorate(mock(Resource.class),null);
  ArgumentCaptor<DefaultIssue> argument=ArgumentCaptor.forClass(DefaultIssue.class);
  verify(moduleIssues,times(2)).addOrUpdate(argument.capture());
  List<DefaultIssue> capturedDefaultIssues=argument.getAllValues();
  DefaultIssue defaultIssue=capturedDefaultIssues.get(1);
  assertThat(defaultIssue.status()).isEqualTo(Issue.STATUS_RESOLVED);
  assertThat(defaultIssue.resolution()).isEqualTo(Issue.RESOLUTION_FALSE_POSITIVE);
  assertThat(defaultIssue.updatedAt()).isEqualTo(loadedDate);
}
