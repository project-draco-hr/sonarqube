{
  LOGGER.info("Scroll table FILE_SOURCES");
  AtomicLong counter=new AtomicLong();
  ProgressTask progress=new ProgressTask(LOGGER,"source file",counter);
  Timer timer=new Timer("SourceDbScroll");
  timer.schedule(progress,ProgressTask.PERIOD_MS,ProgressTask.PERIOD_MS);
  try {
    long start=System.currentTimeMillis();
    SourceLineResultSetIterator it=SourceLineResultSetIterator.create(dbTester.getDbClient(),dbTester.getSession(),0L,null);
    while (it.hasNext()) {
      FileSourcesUpdaterHelper.Row row=it.next();
      assertThat(row.getUpdateRequests().size()).isEqualTo(NUMBER_OF_LINES);
      assertThat(row.getFileUuid()).isNotEmpty();
      counter.incrementAndGet();
    }
    long end=System.currentTimeMillis();
    long period=end - start;
    long throughputPerSecond=1000L * counter.get() / period;
    LOGGER.info(String.format("%d FILE_SOURCES rows scrolled in %d ms (%d rows/second)",counter.get(),period,throughputPerSecond));
    benchmark.expectBetween("Throughput to scroll FILE_SOURCES",throughputPerSecond,9,13);
  }
  finally {
    timer.cancel();
  }
}
