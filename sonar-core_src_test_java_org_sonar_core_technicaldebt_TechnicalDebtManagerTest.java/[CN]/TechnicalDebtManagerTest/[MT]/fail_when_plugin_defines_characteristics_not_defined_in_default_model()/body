{
  try {
    Characteristic defaultRootCharacteristic=new Characteristic().setKey("PORTABILITY");
    new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setParent(defaultRootCharacteristic);
    defaultModel.addRootCharacteristic(defaultRootCharacteristic);
    when(sqaleModelFinder.findAll()).thenReturn(defaultModel);
    TechnicalDebtModel javaModel=new TechnicalDebtModel();
    Characteristic javaRootCharacteristic=new Characteristic().setKey("PORTABILITY");
    new Characteristic().setKey("NEW_CHARACTERISTIC").setParent(javaRootCharacteristic);
    javaModel.addRootCharacteristic(javaRootCharacteristic);
    Reader javaModelReader=mock(Reader.class);
    when(technicalDebtModelRepository.createReaderForXMLFile("java")).thenReturn(javaModelReader);
    when(xmlImporter.importXML(eq(javaModelReader),any(ValidationMessages.class),eq(ruleCache))).thenReturn(javaModel);
    when(technicalDebtModelRepository.getContributingPluginList()).thenReturn(newArrayList("java"));
    manager.initAndMergePlugins(ValidationMessages.create(),ruleCache);
    fail();
  }
 catch (  Exception e) {
    assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage("The characteristic : NEW_CHARACTERISTIC cannot be used as it's not available in default characteristics.");
  }
 finally {
    verifyZeroInteractions(service);
  }
}
