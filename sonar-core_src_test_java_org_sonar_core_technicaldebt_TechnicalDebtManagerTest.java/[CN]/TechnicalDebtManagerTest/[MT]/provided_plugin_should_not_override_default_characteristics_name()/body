{
  Characteristic defaultRootCharacteristic=new Characteristic().setKey("PORTABILITY").setName("Portability");
  new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setName("Compiler").setParent(defaultRootCharacteristic);
  defaultModel.addRootCharacteristic(defaultRootCharacteristic);
  when(sqaleModelFinder.findAll()).thenReturn(defaultModel);
  TechnicalDebtModel javaModel=new TechnicalDebtModel();
  Characteristic javaRootCharacteristic=new Characteristic().setKey("PORTABILITY").setName("New Portability Name");
  new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setName("New Compiler Name").setParent(javaRootCharacteristic);
  javaModel.addRootCharacteristic(javaRootCharacteristic);
  Reader javaModelReader=mock(Reader.class);
  when(technicalDebtModelRepository.createReaderForXMLFile("java")).thenReturn(javaModelReader);
  when(xmlImporter.importXML(eq(javaModelReader),any(ValidationMessages.class),eq(ruleCache))).thenReturn(javaModel);
  when(technicalDebtModelRepository.getContributingPluginList()).thenReturn(newArrayList("java"));
  TechnicalDebtModel model=manager.initAndMergePlugins(ValidationMessages.create(),ruleCache);
  assertThat(model.characteristicByKey("PORTABILITY").name()).isEqualTo("Portability");
  assertThat(model.characteristicByKey("COMPILER_RELATED_PORTABILITY").name()).isEqualTo("Compiler");
  assertThat(model.characteristicByKey("PORTABILITY").name()).isEqualTo("Portability");
  verifyZeroInteractions(service);
}
