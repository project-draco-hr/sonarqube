{
  Characteristic defaultRootCharacteristic=new Characteristic().setKey("PORTABILITY");
  new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setParent(defaultRootCharacteristic);
  defaultModel.addRootCharacteristic(defaultRootCharacteristic);
  TechnicalDebtModel dbModel=new TechnicalDebtModel();
  Characteristic dbRootCharacteristic=new Characteristic().setKey("PORTABILITY");
  Characteristic dbCharacteristic=new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setParent(dbRootCharacteristic);
  dbModel.addRootCharacteristic(dbRootCharacteristic);
  RuleKey ruleKey1=RuleKey.of("checkstyle","import");
  when(ruleCache.exists(ruleKey1)).thenReturn(true);
  new Requirement().setRuleKey(ruleKey1).setFunction("linear").setFactor(WorkUnit.create(30.0,WorkUnit.MINUTES)).setCharacteristic(dbCharacteristic);
  when(sqaleModelFinder.findAll()).thenReturn(dbModel);
  TechnicalDebtModel javaModel=new TechnicalDebtModel();
  Characteristic javaRootCharacteristic=new Characteristic().setKey("PORTABILITY");
  Characteristic javaCharacteristic=new Characteristic().setKey("COMPILER_RELATED_PORTABILITY").setParent(javaRootCharacteristic);
  javaModel.addRootCharacteristic(javaRootCharacteristic);
  RuleKey ruleKey2=RuleKey.of("checkstyle","export");
  when(ruleCache.exists(ruleKey2)).thenReturn(true);
  Requirement javaRequirement=new Requirement().setRuleKey(ruleKey2).setFunction("linear").setFactor(WorkUnit.create(1.0,WorkUnit.HOURS)).setCharacteristic(javaCharacteristic);
  Reader javaModelReader=mock(Reader.class);
  when(technicalDebtModelRepository.createReaderForXMLFile("java")).thenReturn(javaModelReader);
  when(xmlImporter.importXML(eq(javaModelReader),any(ValidationMessages.class),eq(ruleCache))).thenReturn(javaModel);
  when(technicalDebtModelRepository.getContributingPluginList()).thenReturn(newArrayList("java"));
  manager.initAndMergePlugins(ValidationMessages.create(),ruleCache);
  verify(service).create(eq(javaRequirement),eq(javaCharacteristic),eq(ruleCache),eq(session));
  verifyNoMoreInteractions(service);
}
