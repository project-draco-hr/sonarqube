{
  ComponentDto project1=ComponentTesting.newProjectDto().setKey("project1");
  ComponentDto project2=ComponentTesting.newProjectDto().setKey("project2");
  ComponentDto project3=ComponentTesting.newProjectDto().setKey("project3");
  ComponentDto file1=ComponentTesting.newFileDto(project1).setKey("file1");
  ComponentDto file2=ComponentTesting.newFileDto(project1).setKey("file2");
  ComponentDto file3=ComponentTesting.newFileDto(project1).setKey("file3");
  tester.get(ComponentDao.class).insert(session,project1,project2,project3,file1,file2,file3);
  UserDto john=new UserDto().setLogin("john").setName("john").setActive(true);
  UserDto max=new UserDto().setLogin("max").setName("max").setActive(true);
  db.userDao().insert(session,max);
  db.userDao().insert(session,john);
  session.commit();
  MockUserSession.set().setLogin("admin").setGlobalPermissions(GlobalPermissions.SYSTEM_ADMIN);
  tester.get(InternalPermissionService.class).addPermission(new PermissionChange().setComponentKey(project1.getKey()).setUser(john.getLogin()).setPermission(UserRole.USER));
  tester.get(InternalPermissionService.class).addPermission(new PermissionChange().setComponentKey(project2.getKey()).setUser(max.getLogin()).setPermission(UserRole.USER));
  db.issueDao().insert(session,IssueTesting.newDto(rule,file1,project1),IssueTesting.newDto(rule,file2,project2),IssueTesting.newDto(rule,file2,project3));
  session.commit();
  session.clearCache();
  IssueQuery.Builder query=IssueQuery.builder();
  MockUserSession.set().setLogin("john");
  assertThat(index.search(query.build(),new QueryContext()).getHits()).hasSize(1);
  MockUserSession.set().setLogin("max");
  assertThat(index.search(query.build(),new QueryContext()).getHits()).hasSize(1);
  MockUserSession.set().setLogin("another guy");
  assertThat(index.search(query.build(),new QueryContext()).getHits()).hasSize(0);
  MockUserSession.set().setLogin("john");
  assertThat(index.search(query.componentRootUuids(newArrayList(project3.key())).build(),new QueryContext()).getHits()).hasSize(0);
}
