{
  Integer numberOfIssues=1000;
  ComponentDto project=new ComponentDto().setKey("MyProject");
  db.componentDao().insert(session,project);
  tester.get(PermissionFacade.class).insertGroupPermission(project.getId(),DefaultGroups.ANYONE,UserRole.USER,session);
  db.issueAuthorizationDao().synchronizeAfter(session,new Date(0));
  ComponentDto resource=new ComponentDto().setSubProjectId(project.getId()).setKey("MyComponent");
  db.componentDao().insert(session,resource);
  db.snapshotDao().insert(session,SnapshotTesting.createForComponent(resource));
  List<String> issueKeys=newArrayList();
  for (int i=0; i < numberOfIssues; i++) {
    IssueDto issue=IssueTesting.newDto(rule,resource,project);
    tester.get(IssueDao.class).insert(session,issue);
    issueKeys.add(issue.getKey());
  }
  session.commit();
  assertThat(db.issueDao().findAfterDate(session,new Date(0))).hasSize(numberOfIssues);
  assertThat(index.countAll()).isEqualTo(numberOfIssues);
  tester.get(BackendCleanup.class).clearIndex(IndexDefinition.ISSUES);
  tester.clearIndexes();
  assertThat(index.countAll()).isEqualTo(0);
  DbSession newSession=db.openSession(true);
  try {
    db.issueDao().synchronizeAfter(newSession,index.getLastSynchronization());
    newSession.commit();
  }
  finally {
    newSession.close();
  }
  assertThat(index.countAll()).isEqualTo(numberOfIssues);
}
