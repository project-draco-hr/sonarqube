{
  ComponentDto project=ComponentTesting.newProjectDto();
  ComponentDto file=ComponentTesting.newFileDto(project);
  indexIssues(IssueTesting.newDoc("ISSUE1",file).setSeverity(Severity.BLOCKER),IssueTesting.newDoc("ISSUE2",file).setSeverity(Severity.INFO),IssueTesting.newDoc("ISSUE3",file).setSeverity(Severity.MINOR),IssueTesting.newDoc("ISSUE4",file).setSeverity(Severity.CRITICAL),IssueTesting.newDoc("ISSUE5",file).setSeverity(Severity.MAJOR));
  IssueQuery.Builder query=IssueQuery.builder().sort(IssueQuery.SORT_BY_SEVERITY).asc(true);
  Result<Issue> result=index.search(query.build(),new QueryContext());
  assertThat(result.getHits().get(0).severity()).isEqualTo(Severity.INFO);
  assertThat(result.getHits().get(1).severity()).isEqualTo(Severity.MINOR);
  assertThat(result.getHits().get(2).severity()).isEqualTo(Severity.MAJOR);
  assertThat(result.getHits().get(3).severity()).isEqualTo(Severity.CRITICAL);
  assertThat(result.getHits().get(4).severity()).isEqualTo(Severity.BLOCKER);
  query=IssueQuery.builder().sort(IssueQuery.SORT_BY_SEVERITY).asc(false);
  result=index.search(query.build(),new QueryContext());
  assertThat(result.getHits().get(0).severity()).isEqualTo(Severity.BLOCKER);
  assertThat(result.getHits().get(1).severity()).isEqualTo(Severity.CRITICAL);
  assertThat(result.getHits().get(2).severity()).isEqualTo(Severity.MAJOR);
  assertThat(result.getHits().get(3).severity()).isEqualTo(Severity.MINOR);
  assertThat(result.getHits().get(4).severity()).isEqualTo(Severity.INFO);
}
