{
  Requirement requirement1=mock(Requirement.class);
  Requirement requirement2=mock(Requirement.class);
  Violation violation1=buildViolation("rule1","repo1",NOW);
  Violation violation2=buildViolation("rule1","repo1",NOW);
  Violation violation3=buildViolation("rule2","repo2",NOW);
  Violation violation4=buildViolation("unmatchable","repo2",NOW);
  List<Violation> violations=Lists.newArrayList(violation1,violation2,violation3,violation4);
  stub(technicalDebtModel.getRequirementByRule("repo1","rule1")).toReturn(requirement1);
  stub(technicalDebtModel.getRequirementByRule("repo2","rule2")).toReturn(requirement2);
  DecoratorContext context=mock(DecoratorContext.class);
  when(context.getViolations()).thenReturn(violations);
  ListMultimap<Requirement,Violation> groupedViolations=remediationCostCalculator.groupViolations(context);
  assertThat(groupedViolations.keySet().size()).isEqualTo(2);
  assertThat(groupedViolations.get(requirement1)).containsExactly(violation1,violation2);
  assertThat(groupedViolations.get(requirement2)).containsExactly(violation3);
}
