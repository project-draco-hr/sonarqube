{
  measureRepository.addRawMeasure(FILE_1_REF,metricKeys.getLines(),measureWithVariation(3000L,2000L)).addRawMeasure(FILE_1_REF,metricKeys.getConditions(),measureWithVariation(300L,400L)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredLines(),measureWithVariation(30L,200L)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredConditions(),measureWithVariation(9L,16L)).addRawMeasure(FILE_2_REF,metricKeys.getLines(),measureWithVariation(2000L,3000L)).addRawMeasure(FILE_2_REF,metricKeys.getConditions(),measureWithVariation(400L,300L)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredLines(),measureWithVariation(200L,30L)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredConditions(),measureWithVariation(16L,9L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getLines(),measureWithVariation(1000L,2000L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getConditions(),measureWithVariation(100L,400L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getUncoveredLines(),measureWithVariation(10L,200L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getUncoveredConditions(),measureWithVariation(3L,16L));
  underTest.execute();
  assertThat(toEntries(measureRepository.getNewRawMeasures(FILE_1_REF))).containsOnly(entryOf(codeCoverageKey,measureWithVariation(98.8d,91d)),entryOf(lineCoverageKey,measureWithVariation(99d,90d)),entryOf(branchCoverageKey,measureWithVariation(97d,96d)));
  assertThat(toEntries(measureRepository.getNewRawMeasures(FILE_2_REF))).containsOnly(entryOf(codeCoverageKey,measureWithVariation(91d,98.8d)),entryOf(lineCoverageKey,measureWithVariation(90d,99d)),entryOf(branchCoverageKey,measureWithVariation(96d,97d)));
  assertThat(toEntries(measureRepository.getNewRawMeasures(UNIT_TEST_FILE_REF))).isEmpty();
  MeasureRepoEntry[] nonFileRepoEntries={entryOf(codeCoverageKey,measureWithVariation(95.5d,95.5d)),entryOf(lineCoverageKey,measureWithVariation(95.4d,95.4d)),entryOf(branchCoverageKey,measureWithVariation(96.4d,96.4d))};
  assertThat(toEntries(measureRepository.getNewRawMeasures(DIRECTORY_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getNewRawMeasures(SUB_MODULE_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getNewRawMeasures(MODULE_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getNewRawMeasures(ROOT_REF))).containsOnly(nonFileRepoEntries);
}
