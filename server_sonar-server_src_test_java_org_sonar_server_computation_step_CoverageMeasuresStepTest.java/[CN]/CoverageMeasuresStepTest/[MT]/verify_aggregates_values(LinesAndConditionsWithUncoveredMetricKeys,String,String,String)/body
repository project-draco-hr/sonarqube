{
  measureRepository.addRawMeasure(FILE_1_REF,metricKeys.getLines(),newMeasureBuilder().create(3000L)).addRawMeasure(FILE_1_REF,metricKeys.getConditions(),newMeasureBuilder().create(300L)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredLines(),newMeasureBuilder().create(30L)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredConditions(),newMeasureBuilder().create(9L)).addRawMeasure(FILE_2_REF,metricKeys.getLines(),newMeasureBuilder().create(2000L)).addRawMeasure(FILE_2_REF,metricKeys.getConditions(),newMeasureBuilder().create(400L)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredLines(),newMeasureBuilder().create(200L)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredConditions(),newMeasureBuilder().create(16L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getLines(),newMeasureBuilder().create(1000L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getConditions(),newMeasureBuilder().create(100L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getUncoveredLines(),newMeasureBuilder().create(10L)).addRawMeasure(UNIT_TEST_FILE_REF,metricKeys.getUncoveredConditions(),newMeasureBuilder().create(3L));
  underTest.execute();
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_1_REF))).containsOnly(entryOf(codeCoverageKey,newMeasureBuilder().create(98.8d)),entryOf(lineCoverageKey,newMeasureBuilder().create(99d)),entryOf(branchCoverageKey,newMeasureBuilder().create(97d)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(FILE_2_REF))).containsOnly(entryOf(codeCoverageKey,newMeasureBuilder().create(91d)),entryOf(lineCoverageKey,newMeasureBuilder().create(90d)),entryOf(branchCoverageKey,newMeasureBuilder().create(96d)));
  assertThat(toEntries(measureRepository.getAddedRawMeasures(UNIT_TEST_FILE_REF))).isEmpty();
  MeasureRepoEntry[] nonFileRepoEntries={entryOf(codeCoverageKey,newMeasureBuilder().create(95.5d)),entryOf(lineCoverageKey,newMeasureBuilder().create(95.4d)),entryOf(branchCoverageKey,newMeasureBuilder().create(96.4d))};
  assertThat(toEntries(measureRepository.getAddedRawMeasures(DIRECTORY_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(SUB_MODULE_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(MODULE_REF))).containsOnly(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(ROOT_REF))).containsOnly(nonFileRepoEntries);
}
