{
  DumbComponent project=builder(PROJECT,1).addChildren(builder(MODULE,11).addChildren(builder(DIRECTORY,111).addChildren(builder(Component.Type.FILE,1111).build(),builder(Component.Type.FILE,1112).build()).build()).build(),builder(MODULE,12).addChildren(builder(DIRECTORY,121).addChildren(builder(Component.Type.FILE,1211).build()).build()).build()).build();
  treeRootHolder.setRoot(project);
  measureRepository.addRawMeasure(1111,LINES_KEY,newMeasureBuilder().create(10));
  measureRepository.addRawMeasure(1112,LINES_KEY,newMeasureBuilder().create(8));
  measureRepository.addRawMeasure(1211,LINES_KEY,newMeasureBuilder().create(2));
  underTest.visit(project);
  assertThat(measureRepository.getNewRawMeasure(1,LINES_KEY).get().getIntValue()).isEqualTo(20);
  assertThat(measureRepository.getNewRawMeasure(11,LINES_KEY).get().getIntValue()).isEqualTo(18);
  assertThat(measureRepository.getNewRawMeasure(111,LINES_KEY).get().getIntValue()).isEqualTo(18);
  assertThat(measureRepository.getNewRawMeasures(1111)).isEmpty();
  assertThat(measureRepository.getNewRawMeasures(1112)).isEmpty();
  assertThat(measureRepository.getNewRawMeasure(12,LINES_KEY).get().getIntValue()).isEqualTo(2);
  assertThat(measureRepository.getNewRawMeasure(121,LINES_KEY).get().getIntValue()).isEqualTo(2);
  assertThat(measureRepository.getNewRawMeasures(1211)).isEmpty();
}
