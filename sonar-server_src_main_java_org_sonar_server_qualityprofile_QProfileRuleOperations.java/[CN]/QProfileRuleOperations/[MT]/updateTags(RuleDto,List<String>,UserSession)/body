{
  checkPermission(userSession);
  SqlSession session=myBatis.openSession();
  try {
    boolean ruleChanged=false;
    Map<String,Long> neededTagIds=Maps.newHashMap();
    Set<String> unknownTags=Sets.newHashSet();
    for (    String tag : newTags) {
      Long tagId=ruleTagDao.selectId(tag,session);
      if (tagId == null) {
        unknownTags.add(tag);
      }
 else {
        neededTagIds.put(tag,tagId);
      }
    }
    if (!unknownTags.isEmpty()) {
      throw new NotFoundException("The following tags are unknown and must be created before association: " + StringUtils.join(unknownTags,", "));
    }
    Set<String> tagsToKeep=Sets.newHashSet();
    final Integer ruleId=rule.getId();
    List<RuleRuleTagDto> currentTags=ruleDao.selectTags(ruleId,session);
    for (    RuleRuleTagDto existingTag : currentTags) {
      if (existingTag.getType() == RuleTagType.ADMIN && !newTags.contains(existingTag.getTag())) {
        ruleDao.deleteTag(existingTag,session);
        ruleChanged=true;
      }
 else {
        tagsToKeep.add(existingTag.getTag());
      }
    }
    for (    String tag : newTags) {
      if (!tagsToKeep.contains(tag)) {
        ruleDao.insert(new RuleRuleTagDto().setRuleId(ruleId).setTagId(neededTagIds.get(tag)).setType(RuleTagType.ADMIN),session);
        ruleChanged=true;
      }
    }
    if (ruleChanged) {
      rule.setUpdatedAt(new Date(system.now()));
      ruleDao.update(rule,session);
      session.commit();
      reindexRule(rule,session);
    }
  }
  finally {
    MyBatis.closeQuietly(session);
  }
}
