{
  Collection<DefaultIssue> issues=Lists.newArrayList();
  for (  Issue issue : issueCache.byComponent(resource.getEffectiveKey())) {
    issues.add((DefaultIssue)issue);
  }
  issueCache.clear(resource.getEffectiveKey());
  Collection<PreviousIssue> dbOpenIssues=initialOpenIssues.selectAndRemoveIssues(resource.getEffectiveKey());
  SourceHashHolder sourceHashHolder=null;
  if (ResourceUtils.isFile(resource)) {
    File sonarFile=(File)resource;
    InputFile file=inputPathCache.getFile(project.getEffectiveKey(),sonarFile.getPath());
    if (file == null) {
      throw new IllegalStateException("Resource " + resource + " was not found in InputPath cache");
    }
    sourceHashHolder=new SourceHashHolder((DefaultInputFile)file,lastLineHashes);
  }
  IssueTrackingResult trackingResult=tracking.track(sourceHashHolder,dbOpenIssues,issues);
  addUnmatched(trackingResult.unmatched(),sourceHashHolder,issues);
  mergeMatched(trackingResult);
  if (ResourceUtils.isProject(resource)) {
    addIssuesOnDeletedComponents(issues);
  }
  for (  DefaultIssue issue : issues) {
    workflow.doAutomaticTransition(issue,changeContext);
    handlers.execute(issue,changeContext);
    issueCache.put(issue);
  }
}
