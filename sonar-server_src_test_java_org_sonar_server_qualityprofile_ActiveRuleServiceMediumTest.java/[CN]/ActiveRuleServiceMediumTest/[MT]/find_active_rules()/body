{
  QualityProfileDto profile1=QualityProfileDto.createFor("p1","java");
  QualityProfileDto profile2=QualityProfileDto.createFor("p2","java");
  dbClient.qualityProfileDao().insert(dbSession,profile1,profile2);
  RuleDto rule1=RuleDto.createFor(RuleKey.of("java","r1")).setSeverity(Severity.MAJOR);
  RuleDto rule2=RuleDto.createFor(RuleKey.of("java","r2")).setSeverity(Severity.MAJOR);
  dbClient.ruleDao().insert(rule1,dbSession);
  dbClient.ruleDao().insert(rule2,dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(profile1,rule1).setSeverity(Severity.MINOR),dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(profile1,rule2).setSeverity(Severity.BLOCKER),dbSession);
  dbClient.activeRuleDao().insert(ActiveRuleDto.createFor(profile2,rule2).setSeverity(Severity.CRITICAL),dbSession);
  dbSession.commit();
  List<ActiveRule> activeRules=service.findByRuleKey(RuleKey.of("java","r1"));
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).key().ruleKey()).isEqualTo(RuleKey.of("java","r1"));
  activeRules=service.findByRuleKey(RuleKey.of("java","r2"));
  assertThat(activeRules).hasSize(2);
  assertThat(activeRules.get(0).key().ruleKey()).isEqualTo(RuleKey.of("java","r2"));
  activeRules=service.findByRuleKey(RuleKey.of("java","r3"));
  assertThat(activeRules).isEmpty();
  activeRules=service.findByQProfileKey(profile1.getKey());
  assertThat(activeRules).hasSize(2);
  assertThat(activeRules.get(0).key().qProfile()).isEqualTo(profile1.getKey());
  assertThat(activeRules.get(1).key().qProfile()).isEqualTo(profile1.getKey());
  activeRules=service.findByQProfileKey(profile2.getKey());
  assertThat(activeRules).hasSize(1);
  assertThat(activeRules.get(0).key().qProfile()).isEqualTo(profile2.getKey());
  activeRules=service.findByQProfileKey(QualityProfileKey.of("unknown","unknown"));
  assertThat(activeRules).isEmpty();
}
