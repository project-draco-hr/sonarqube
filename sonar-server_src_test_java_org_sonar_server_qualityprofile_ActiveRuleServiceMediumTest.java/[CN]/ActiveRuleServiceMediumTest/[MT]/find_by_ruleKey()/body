{
  QualityProfileDto profile=QualityProfileDto.createFor("name","java");
  dbClient.getDao(QualityProfileDao.class).insert(profile,dbSession);
  RuleDto rule=RuleDto.createFor(RuleKey.of("java","r1")).setSeverity("MAJOR");
  dbClient.getDao(RuleDao.class).insert(rule,dbSession);
  RuleDto rule2=RuleDto.createFor(RuleKey.of("java","r2")).setSeverity("MAJOR");
  dbClient.getDao(RuleDao.class).insert(rule2,dbSession);
  dbClient.getDao(ActiveRuleDao.class).insert(ActiveRuleDto.createFor(profile,rule).setSeverity("MINOR"),dbSession);
  dbClient.getDao(ActiveRuleDao.class).insert(ActiveRuleDto.createFor(profile,rule2).setSeverity("BLOCKER"),dbSession);
  dbSession.commit();
  assertThat(service.findByRuleKey(rule.getKey())).hasSize(1);
  assertThat(service.findByRuleKey(rule.getKey()).get(0).severity()).isEqualTo("MINOR");
  assertThat(service.findByRuleKey(rule2.getKey())).hasSize(1);
  assertThat(service.findByRuleKey(rule2.getKey()).get(0).severity()).isEqualTo("BLOCKER");
}
