{
  super(new InputStream(){
    @Override public int read(){
      if (value._next < value._end) {
        return value._bytes[value._next++] & 0xFF;
      }
 else {
        return -1;
      }
    }
    @Override public int read(    final byte[] bytes){
      return read(bytes,0,bytes.length);
    }
    @Override public int read(    final byte[] bytes,    final int offset,    int size){
      if (value._next + size > value._end) {
        size=value._end - value._next;
      }
      if (size <= 0) {
        size=-1;
      }
 else {
        System.arraycopy(value._bytes,value._next,bytes,offset,size);
        value._next+=size;
      }
      return size;
    }
    @Override public long skip(    final long lsize){
      int size=lsize > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)lsize;
      if (size < 0)       return 0;
      if (value._next + size > value._end) {
        size=value._end - value._next;
      }
      if (size < 0)       return 0;
      value._next+=size;
      return size;
    }
    @Override public int available(){
      final int available=value._end - value._next;
      return available > 0 ? available : 0;
    }
  }
);
  _value=value;
}
