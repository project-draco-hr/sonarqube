{
  final int start=_next;
  final int type=nextType(CLASS_MULTI_ARRAY,CLASS_REREF);
  if (type == CLASS_REREF) {
    _next=start;
    final Object array=get(null,null);
    if (array == null || array.getClass().isArray()) {
      return array;
    }
 else {
      throw new ConversionException("Referenced object is not an array");
    }
  }
  Object result;
  try {
    _depth++;
    final int componentClassHandle=nextType();
    checkSize(1);
    final int dimensions=_bytes[_next++] & 0xFF;
    if (prototype == null) {
      prototype=Array.newInstance(classForHandle(componentClassHandle),new int[dimensions]).getClass();
    }
    final int length=decodeElementCount();
    result=Array.newInstance(prototype.getComponentType(),length);
    _serializedItemCount++;
    registerEncodedObject(result);
    final Class<?> componentType=prototype.getComponentType();
    if (componentType.getComponentType().isArray()) {
      for (int index=0; index < length; index++) {
        Array.set(result,index,getMultiArray(componentType));
      }
    }
 else {
      for (int index=0; index < length; index++) {
        Array.set(result,index,get(null,null));
      }
    }
  }
  finally {
    _depth--;
  }
  closeVariableLengthItem();
  return result;
}
