{
  Map<String,String> map=newHashMap();
  map.put("issues","ABCDE1234");
  map.put("severities","MAJOR,MINOR");
  map.put("statuses","CLOSED");
  map.put("resolutions","FALSE-POSITIVE");
  map.put("resolved","true");
  map.put("components","org.apache");
  map.put("componentRoots","org.sonar");
  map.put("reporters","marilyn");
  map.put("assignees","joanna");
  map.put("languages","xoo");
  map.put("assigned","true");
  map.put("planned","true");
  map.put("hideRules","true");
  map.put("createdAt","2013-04-15T09:08:24+0200");
  map.put("createdAfter","2013-04-16T09:08:24+0200");
  map.put("createdBefore","2013-04-17T09:08:24+0200");
  map.put("rules","squid:AvoidCycle,findbugs:NullReference");
  map.put("pageSize","10");
  map.put("pageIndex","50");
  map.put("sort","CREATION_DATE");
  map.put("asc","true");
  WsTester.TestRequest request=tester.newGetRequest("api/issues","search").setParams(map);
  request.execute();
  ArgumentCaptor<IssueQuery> captor=ArgumentCaptor.forClass(IssueQuery.class);
  verify(issueFinder).find(captor.capture());
  IssueQuery query=captor.getValue();
  assertThat(query.requiredRole()).isEqualTo("user");
  assertThat(query.issueKeys()).containsOnly("ABCDE1234");
  assertThat(query.severities()).containsOnly("MAJOR","MINOR");
  assertThat(query.statuses()).containsOnly("CLOSED");
  assertThat(query.resolutions()).containsOnly("FALSE-POSITIVE");
  assertThat(query.resolved()).isTrue();
  assertThat(query.components()).containsOnly("org.apache");
  assertThat(query.componentRoots()).containsOnly("org.sonar");
  assertThat(query.reporters()).containsOnly("marilyn");
  assertThat(query.assignees()).containsOnly("joanna");
  assertThat(query.languages()).containsOnly("xoo");
  assertThat(query.assigned()).isTrue();
  assertThat(query.planned()).isTrue();
  assertThat(query.hideRules()).isTrue();
  assertThat(query.createdAt()).isEqualTo(DateUtils.parseDateTime("2013-04-15T09:08:24+0200"));
  assertThat(query.createdAfter()).isEqualTo(DateUtils.parseDateTime("2013-04-16T09:08:24+0200"));
  assertThat(query.createdBefore()).isEqualTo(DateUtils.parseDateTime("2013-04-17T09:08:24+0200"));
  assertThat(query.rules()).containsOnly(RuleKey.of("squid","AvoidCycle"),RuleKey.of("findbugs","NullReference"));
  assertThat(query.pageSize()).isEqualTo(10);
  assertThat(query.pageIndex()).isEqualTo(50);
  assertThat(query.sort()).isEqualTo("CREATION_DATE");
  assertThat(query.asc()).isTrue();
}
