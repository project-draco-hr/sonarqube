{
  String projectAdminUser="with-admin-permission-on-project";
  String projectUser="with-user-permission-on-project";
  SonarClient adminClient=orchestrator.getServer().adminWsClient();
  try {
    adminClient.userClient().create(UserParameters.create().login(projectAdminUser).name(projectAdminUser).password("password").passwordConfirmation("password"));
    adminWsClient.permissionsClient().addUser(new AddUserWsRequest().setLogin(projectAdminUser).setProjectKey(PROJECT_KEY).setPermission("admin"));
    adminClient.userClient().create(UserParameters.create().login(projectUser).name(projectUser).password("password").passwordConfirmation("password"));
    adminWsClient.permissionsClient().addUser(new AddUserWsRequest().setLogin(projectUser).setProjectKey(PROJECT_KEY).setPermission("user"));
    try {
      orchestrator.getServer().wsClient(projectUser,"password").actionPlanClient().create(NewActionPlan.create().name("Short term").project(PROJECT_KEY).description("Short term issues"));
      fail();
    }
 catch (    Exception e) {
      assertThat(e).isInstanceOf(HttpException.class).describedAs("404");
    }
    orchestrator.getServer().wsClient(projectAdminUser,"password").actionPlanClient().create(NewActionPlan.create().name("Short term").project(PROJECT_KEY).description("Short term issues"));
    assertThat(actionPlanClient().find(PROJECT_KEY)).hasSize(1);
  }
  finally {
    adminClient.userClient().deactivate(projectAdminUser);
    adminClient.userClient().deactivate(projectUser);
  }
}
