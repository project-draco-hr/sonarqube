{
  Token theRetToken=null;
  tryAgain:   for (; ; ) {
    Token _token=null;
    int _ttype=Token.INVALID_TYPE;
    resetText();
    try {
      try {
switch (LA(1)) {
case '\t':
case '\n':
case '\r':
case ' ':
{
            mWS(true);
            theRetToken=_returnToken;
            break;
          }
case '-':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
{
          mDECIMAL_LITERAL(true);
          theRetToken=_returnToken;
          break;
        }
case '"':
case '\'':
{
        mSTRING_LITERAL(true);
        theRetToken=_returnToken;
        break;
      }
case '[':
{
      mLBRACKET(true);
      theRetToken=_returnToken;
      break;
    }
case ']':
{
    mRBRACKET(true);
    theRetToken=_returnToken;
    break;
  }
case '(':
{
  mLPAREN(true);
  theRetToken=_returnToken;
  break;
}
case ')':
{
mRPAREN(true);
theRetToken=_returnToken;
break;
}
case '*':
{
mTHIS(true);
theRetToken=_returnToken;
break;
}
case '.':
case '_':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
{
mIDENTIFIER(true);
theRetToken=_returnToken;
break;
}
case '=':
{
mEQUALSIGN(true);
theRetToken=_returnToken;
break;
}
case '!':
{
mNOTEQUALSIGN(true);
theRetToken=_returnToken;
break;
}
default :
if ((LA(1) == '0') && (LA(2) == 'x')) {
mHEX_LITERAL(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (LA(2) == '=')) {
mLESSEQUALSIGN(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '>') && (LA(2) == '=')) {
mGREATEREQUALSIGN(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '0') && (true)) {
mOCTAL_LITERAL(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (true)) {
mLESSTHANSIGN(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '>') && (true)) {
mGREATERTHANSIGN(true);
theRetToken=_returnToken;
}
 else {
if (LA(1) == EOF_CHAR) {
uponEOF();
_returnToken=makeToken(Token.EOF_TYPE);
}
 else {
throw new NoViableAltForCharException((char)LA(1),getFilename(),getLine(),getColumn());
}
}
}
if (_returnToken == null) continue tryAgain;
_ttype=_returnToken.getType();
_ttype=testLiteralsTable(_ttype);
_returnToken.setType(_ttype);
return _returnToken;
}
 catch (RecognitionException e) {
throw new TokenStreamRecognitionException(e);
}
}
 catch (CharStreamException cse) {
if (cse instanceof CharStreamIOException) {
throw new TokenStreamIOException(((CharStreamIOException)cse).io);
}
 else {
throw new TokenStreamException(cse.getMessage());
}
}
}
}
