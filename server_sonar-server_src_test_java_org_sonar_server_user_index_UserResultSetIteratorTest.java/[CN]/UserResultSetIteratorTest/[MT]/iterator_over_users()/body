{
  dbTester.prepareDbUnit(getClass(),"shared.xml");
  UserResultSetIterator it=UserResultSetIterator.create(client,connection,0L);
  Map<String,UserDoc> usersByLogin=Maps.uniqueIndex(it,new Function<UserDoc,String>(){
    @Override public String apply(    UserDoc user){
      return user.login();
    }
  }
);
  it.close();
  assertThat(usersByLogin).hasSize(3);
  UserDoc user1=usersByLogin.get("user1");
  assertThat(user1.name()).isEqualTo("User1");
  assertThat(user1.email()).isEqualTo("user1@mail.com");
  assertThat(user1.active()).isTrue();
  assertThat(user1.scmAccounts()).containsOnly("user_1","u1");
  assertThat(user1.createdAt()).isEqualTo(1500000000000L);
  assertThat(user1.updatedAt()).isEqualTo(1500000000000L);
  UserDoc user2=usersByLogin.get("user2");
  assertThat(user2.name()).isEqualTo("User2");
  assertThat(user2.email()).isEqualTo("user2@mail.com");
  assertThat(user2.active()).isTrue();
  assertThat(user2.scmAccounts()).containsOnly("user,2","user_2");
  assertThat(user2.createdAt()).isEqualTo(1500000000000L);
  assertThat(user2.updatedAt()).isEqualTo(1500000000000L);
  UserDoc user3=usersByLogin.get("user3");
  assertThat(user3.name()).isEqualTo("User3");
  assertThat(user3.email()).isNull();
  assertThat(user3.active()).isFalse();
  assertThat(user3.scmAccounts()).isEmpty();
  assertThat(user3.createdAt()).isEqualTo(1500000000000L);
  assertThat(user3.updatedAt()).isEqualTo(1550000000000L);
}
