{
  CharacteristicDto requirementDto=new CharacteristicDto().setId(3).setParentId(2).setRuleId(100).setFunction("linear").setFactorValue(2d).setFactorUnit(CharacteristicDto.DAYS).setOffsetValue(0d).setOffsetUnit(CharacteristicDto.MINUTES).setCreatedAt(new Date()).setUpdatedAt(new Date());
  DefaultCharacteristic rootCharacteristic=new DefaultCharacteristic().setKey("MEMORY_EFFICIENCY").setName("Memory use");
  DefaultCharacteristic characteristic=new DefaultCharacteristic().setKey("EFFICIENCY").setName("Efficiency").setParent(rootCharacteristic);
  DefaultRequirement requirement=requirementDto.toRequirement(RuleKey.of("squid","S106"),characteristic,rootCharacteristic);
  assertThat(requirement.ruleKey()).isEqualTo(RuleKey.of("squid","S106"));
  assertThat(requirement.characteristic()).isEqualTo(characteristic);
  assertThat(requirement.rootCharacteristic()).isEqualTo(rootCharacteristic);
  assertThat(requirement.function()).isEqualTo("linear");
  assertThat(requirement.factorValue()).isEqualTo(2);
  assertThat(requirement.factorUnit()).isEqualTo(WorkDuration.UNIT.DAYS);
  assertThat(requirement.offsetValue()).isEqualTo(0);
  assertThat(requirement.offsetUnit()).isEqualTo(WorkDuration.UNIT.MINUTES);
  assertThat(requirement.createdAt()).isNotNull();
  assertThat(requirement.updatedAt()).isNotNull();
}
