{
  verifyLoggedIn(userSession);
  ResourceDto component=resourceDao.getResource(ResourceQuery.create().setKey(componentKey));
  ResourceDto project=resourceDao.getRootProjectByComponentKey(componentKey);
  if (component == null || project == null) {
    throw new IllegalArgumentException("Unknown component: " + componentKey);
  }
  if (!authorizationDao.isAuthorizedComponentKey(component.getKey(),userSession.userId(),UserRole.USER)) {
    throw new IllegalStateException("User does not have the required role");
  }
  if (!org.sonar.server.rule.Rule.MANUAL_REPOSITORY_KEY.equals(ruleKey.repository())) {
    throw new IllegalArgumentException("Issues can be created only on rules marked as 'manual': " + ruleKey);
  }
  Rule rule=findRule(ruleKey);
  DefaultIssue issue=(DefaultIssue)new DefaultIssueBuilder().componentKey(component.getKey()).projectKey(project.getKey()).line(line).message(!Strings.isNullOrEmpty(message) ? message : rule.getName()).severity(Objects.firstNonNull(severity,Severity.MAJOR)).effortToFix(effortToFix).ruleKey(ruleKey).reporter(UserSession.get().login()).build();
  Date now=new Date();
  issue.setCreationDate(now);
  issue.setUpdateDate(now);
  issueStorage.save(issue);
  dryRunCache.reportResourceModification(component.getKey());
  return issue;
}
