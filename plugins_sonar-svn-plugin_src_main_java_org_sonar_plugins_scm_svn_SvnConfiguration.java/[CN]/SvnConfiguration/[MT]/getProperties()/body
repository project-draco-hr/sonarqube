{
  return ImmutableList.of(PropertyDefinition.builder(USER_PROP_KEY).name("Username").description("Username to be used for SVN authentication").type(PropertyType.STRING).onQualifiers(Qualifiers.PROJECT).category(CoreProperties.CATEGORY_SCM).subCategory(CATEGORY_SVN).index(0).build(),PropertyDefinition.builder(PASSWORD_PROP_KEY).name("Password").description("Password to be used for SVN authentication").type(PropertyType.PASSWORD).onQualifiers(Qualifiers.PROJECT).category(CoreProperties.CATEGORY_SCM).subCategory(CATEGORY_SVN).index(1).build(),PropertyDefinition.builder(CONFIG_DIR_PROP_KEY).name("Configuration directory").description("Folder containing configuration files (see --config-dir)").type(PropertyType.STRING).onQualifiers(Qualifiers.PROJECT).category(CoreProperties.CATEGORY_SCM).subCategory(CATEGORY_SVN).index(2).build(),PropertyDefinition.builder(TRUST_SERVER_PROP_KEY).name("Trust server certificate").description("Accept unknown SSL certificates (like self-signed)").type(PropertyType.BOOLEAN).defaultValue("false").onQualifiers(Qualifiers.PROJECT).category(CoreProperties.CATEGORY_SCM).subCategory(CATEGORY_SVN).index(3).build(),PropertyDefinition.builder(USE_MERGE_HISTORY_KEY).name("Use merge history for blame").description("Use merge history (--use-merge-history) to get real author of a modification instead of commiter of the merge. May not be supported by your SVN server/client.").type(PropertyType.BOOLEAN).defaultValue("false").onQualifiers(Qualifiers.PROJECT).category(CoreProperties.CATEGORY_SCM).subCategory(CATEGORY_SVN).index(4).build());
}
