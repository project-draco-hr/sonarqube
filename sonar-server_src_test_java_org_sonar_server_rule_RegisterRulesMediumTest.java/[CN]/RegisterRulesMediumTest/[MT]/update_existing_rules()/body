{
  register(new Rules(){
    @Override public void init(    RulesDefinition.NewRepository repository){
      RulesDefinition.NewRule x1Rule=repository.createRule("x1").setName("Name1").setHtmlDescription("Desc1").setSeverity(Severity.MINOR).setEffortToFixDescription("Effort1").setTags("tag1","tag2");
      x1Rule.createParam("max").setType(RuleParamType.INTEGER).setDefaultValue("10").setDescription("Maximum1");
      x1Rule.createParam("min").setType(RuleParamType.INTEGER);
      x1Rule.setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY).setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset("1h","30min"));
    }
  }
);
  register(new Rules(){
    @Override public void init(    RulesDefinition.NewRepository repository){
      RulesDefinition.NewRule x1Rule=repository.createRule(RuleTesting.XOO_X1.rule()).setName("Name2").setHtmlDescription("Desc2").setSeverity(Severity.INFO).setEffortToFixDescription("Effort2").setTags("tag2","tag3");
      x1Rule.createParam("max").setType(RuleParamType.INTEGER).setDefaultValue("15").setDescription("Maximum2");
      x1Rule.createParam("format").setType(RuleParamType.TEXT);
      x1Rule.setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY).setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linear("2h"));
    }
  }
);
  Rule rule=index.getByKey(RuleTesting.XOO_X1);
  assertThat(rule.severity()).isEqualTo(Severity.INFO);
  assertThat(rule.name()).isEqualTo("Name2");
  assertThat(rule.htmlDescription()).isEqualTo("Desc2");
  assertThat(rule.systemTags()).contains("tag2","tag3");
  assertThat(rule.params()).hasSize(2);
  assertThat(rule.param("max").type()).isEqualTo(RuleParamType.INTEGER);
  assertThat(rule.param("max").defaultValue()).isEqualTo("15");
  assertThat(rule.param("max").description()).isEqualTo("Maximum2");
  assertThat(rule.param("format").type()).isEqualTo(RuleParamType.TEXT);
  assertThat(rule.param("format").defaultValue()).isNull();
  assertThat(rule.param("format").description()).isNull();
  assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY);
  assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR);
  assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo("2h");
  assertThat(rule.debtRemediationFunction().offset()).isNull();
  assertThat(rule.effortToFixDescription()).isEqualTo("Effort2");
}
