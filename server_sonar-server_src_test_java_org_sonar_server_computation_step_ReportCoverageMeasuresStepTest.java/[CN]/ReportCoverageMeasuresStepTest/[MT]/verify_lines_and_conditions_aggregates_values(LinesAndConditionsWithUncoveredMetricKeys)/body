{
  measureRepository.addRawMeasure(FILE_1_REF,metricKeys.getLines(),newMeasureBuilder().create(3000)).addRawMeasure(FILE_1_REF,metricKeys.getConditions(),newMeasureBuilder().create(300)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredLines(),newMeasureBuilder().create(30)).addRawMeasure(FILE_1_REF,metricKeys.getUncoveredConditions(),newMeasureBuilder().create(9)).addRawMeasure(FILE_2_REF,metricKeys.getLines(),newMeasureBuilder().create(2000)).addRawMeasure(FILE_2_REF,metricKeys.getConditions(),newMeasureBuilder().create(400)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredLines(),newMeasureBuilder().create(200)).addRawMeasure(FILE_2_REF,metricKeys.getUncoveredConditions(),newMeasureBuilder().create(16));
  underTest.execute();
  MeasureRepoEntry[] nonFileRepoEntries={entryOf(metricKeys.getLines(),newMeasureBuilder().create(5000)),entryOf(metricKeys.getConditions(),newMeasureBuilder().create(700)),entryOf(metricKeys.getUncoveredLines(),newMeasureBuilder().create(230)),entryOf(metricKeys.getUncoveredConditions(),newMeasureBuilder().create(25))};
  assertThat(toEntries(measureRepository.getAddedRawMeasures(DIRECTORY_REF))).contains(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(SUB_MODULE_REF))).contains(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(MODULE_REF))).contains(nonFileRepoEntries);
  assertThat(toEntries(measureRepository.getAddedRawMeasures(ROOT_REF))).contains(nonFileRepoEntries);
}
