{
  servicesContainer=coreContainer.createChild();
  servicesContainer.addSingleton(HttpDownloader.class);
  servicesContainer.addSingleton(UriReader.class);
  servicesContainer.addSingleton(UpdateCenterClient.class);
  servicesContainer.addSingleton(UpdateCenterMatrixFactory.class);
  servicesContainer.addSingleton(PluginDownloader.class);
  servicesContainer.addSingleton(ServerIdGenerator.class);
  servicesContainer.addSingleton(DefaultModelFinder.class);
  servicesContainer.addSingleton(DefaultModelManager.class);
  servicesContainer.addSingleton(ChartFactory.class);
  servicesContainer.addSingleton(Languages.class);
  servicesContainer.addSingleton(Views.class);
  servicesContainer.addSingleton(CodeColorizers.class);
  servicesContainer.addComponent(RulesDao.class,false);
  servicesContainer.addComponent(MeasuresDao.class,false);
  servicesContainer.addComponent(org.sonar.api.database.daos.MeasuresDao.class,false);
  servicesContainer.addComponent(ProfilesDao.class,false);
  servicesContainer.addComponent(ProfilesManager.class,false);
  servicesContainer.addComponent(Backup.class,false);
  servicesContainer.addSingleton(SecurityRealmFactory.class);
  servicesContainer.addSingleton(ServerLifecycleNotifier.class);
  servicesContainer.addSingleton(AnnotationProfileParser.class);
  servicesContainer.addSingleton(XMLProfileParser.class);
  servicesContainer.addSingleton(XMLProfileSerializer.class);
  servicesContainer.addSingleton(AnnotationRuleParser.class);
  servicesContainer.addSingleton(XMLRuleParser.class);
  servicesContainer.addSingleton(DefaultRuleFinder.class);
  servicesContainer.addSingleton(DefaultMetricFinder.class);
  servicesContainer.addSingleton(ProfilesConsole.class);
  servicesContainer.addSingleton(RulesConsole.class);
  servicesContainer.addSingleton(ResourceTypes.class);
  servicesContainer.addSingleton(SettingsChangeNotifier.class);
  servicesContainer.addSingleton(PageDecorations.class);
  servicesContainer.addSingleton(MeasureFilterFactory.class);
  servicesContainer.addSingleton(MeasureFilterExecutor.class);
  servicesContainer.addSingleton(MeasureFilterEngine.class);
  servicesContainer.addSingleton(DryRunDatabaseFactory.class);
  servicesContainer.addSingleton(DefaultResourcePermissions.class);
  servicesContainer.addSingleton(Periods.class);
  servicesContainer.addSingleton(HibernateUserFinder.class);
  servicesContainer.addSingleton(NewUserNotifier.class);
  servicesContainer.addSingleton(DefaultUserFinder.class);
  servicesContainer.addSingleton(DefaultRubyUserService.class);
  servicesContainer.addSingleton(DefaultRubyComponentService.class);
  servicesContainer.addSingleton(ServerIssueStorage.class);
  servicesContainer.addSingleton(IssueUpdater.class);
  servicesContainer.addSingleton(FunctionExecutor.class);
  servicesContainer.addSingleton(IssueWorkflow.class);
  servicesContainer.addSingleton(IssueService.class);
  servicesContainer.addSingleton(IssueCommentService.class);
  servicesContainer.addSingleton(DefaultIssueFinder.class);
  servicesContainer.addSingleton(IssueStatsFinder.class);
  servicesContainer.addSingleton(PublicRubyIssueService.class);
  servicesContainer.addSingleton(InternalRubyIssueService.class);
  servicesContainer.addSingleton(ActionPlanService.class);
  servicesContainer.addSingleton(IssueChangelogService.class);
  servicesContainer.addSingleton(IssueNotifications.class);
  servicesContainer.addSingleton(ActionService.class);
  servicesContainer.addSingleton(Actions.class);
  servicesContainer.addSingleton(RubyRuleService.class);
  servicesContainer.addSingleton(MacroInterpreter.class);
  servicesContainer.addSingleton(RubyTextService.class);
  servicesContainer.addSingleton(EmailSettings.class);
  servicesContainer.addSingleton(NotificationService.class);
  servicesContainer.addSingleton(NotificationCenter.class);
  servicesContainer.addSingleton(DefaultNotificationManager.class);
  servicesContainer.addSingleton(TestablePerspectiveLoader.class);
  servicesContainer.addSingleton(TestPlanPerspectiveLoader.class);
  servicesContainer.addSingleton(SnapshotPerspectives.class);
  servicesContainer.addSingleton(HtmlSourceDecorator.class);
  ServerExtensionInstaller extensionRegistrar=servicesContainer.getComponentByType(ServerExtensionInstaller.class);
  extensionRegistrar.registerExtensions(servicesContainer);
  servicesContainer.startComponents();
}
