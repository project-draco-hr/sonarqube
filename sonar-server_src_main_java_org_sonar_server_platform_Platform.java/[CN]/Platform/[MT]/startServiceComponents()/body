{
  servicesContainer=coreContainer.createChild();
  servicesContainer.addSingleton(ESIndex.class);
  servicesContainer.addSingleton(HttpDownloader.class);
  servicesContainer.addSingleton(UriReader.class);
  servicesContainer.addSingleton(UpdateCenterClient.class);
  servicesContainer.addSingleton(UpdateCenterMatrixFactory.class);
  servicesContainer.addSingleton(PluginDownloader.class);
  servicesContainer.addSingleton(ServerIdGenerator.class);
  servicesContainer.addSingleton(ChartFactory.class);
  servicesContainer.addSingleton(Languages.class);
  servicesContainer.addSingleton(Views.class);
  servicesContainer.addSingleton(CodeColorizers.class);
  servicesContainer.addComponent(RulesDao.class,false);
  servicesContainer.addComponent(MeasuresDao.class,false);
  servicesContainer.addComponent(ProfilesDao.class,false);
  servicesContainer.addComponent(ProfilesManager.class,false);
  servicesContainer.addSingleton(SecurityRealmFactory.class);
  servicesContainer.addSingleton(ServerLifecycleNotifier.class);
  servicesContainer.addSingleton(AnnotationProfileParser.class);
  servicesContainer.addSingleton(XMLProfileParser.class);
  servicesContainer.addSingleton(XMLProfileSerializer.class);
  servicesContainer.addSingleton(AnnotationRuleParser.class);
  servicesContainer.addSingleton(XMLRuleParser.class);
  servicesContainer.addSingleton(DefaultRuleFinder.class);
  servicesContainer.addSingleton(DefaultMetricFinder.class);
  servicesContainer.addSingleton(ResourceTypes.class);
  servicesContainer.addSingleton(SettingsChangeNotifier.class);
  servicesContainer.addSingleton(PageDecorations.class);
  servicesContainer.addSingleton(MeasureFilterFactory.class);
  servicesContainer.addSingleton(MeasureFilterExecutor.class);
  servicesContainer.addSingleton(MeasureFilterEngine.class);
  servicesContainer.addSingleton(PreviewCache.class);
  servicesContainer.addSingleton(DefaultResourcePermissions.class);
  servicesContainer.addSingleton(Periods.class);
  servicesContainer.addSingleton(WebServiceEngine.class);
  servicesContainer.addSingleton(ListingWebService.class);
  servicesContainer.addSingleton(ProfileRules.class);
  servicesContainer.addSingleton(QProfiles.class);
  servicesContainer.addSingleton(QProfileLookup.class);
  servicesContainer.addSingleton(QProfileOperations.class);
  servicesContainer.addSingleton(QProfileActiveRuleOperations.class);
  servicesContainer.addSingleton(QProfileRuleOperations.class);
  servicesContainer.addSingleton(QProfileProjectOperations.class);
  servicesContainer.addSingleton(QProfileProjectLookup.class);
  servicesContainer.addSingleton(QProfileBackup.class);
  servicesContainer.addSingleton(QProfilePluginExporter.class);
  servicesContainer.addSingleton(HibernateUserFinder.class);
  servicesContainer.addSingleton(NewUserNotifier.class);
  servicesContainer.addSingleton(DefaultUserFinder.class);
  servicesContainer.addSingleton(DefaultUserService.class);
  servicesContainer.addSingleton(InternalGroupMembershipService.class);
  servicesContainer.addSingleton(GroupMembershipFinder.class);
  servicesContainer.addSingleton(PermissionFacade.class);
  servicesContainer.addSingleton(InternalPermissionService.class);
  servicesContainer.addSingleton(InternalPermissionTemplateService.class);
  servicesContainer.addSingleton(PermissionFinder.class);
  servicesContainer.addSingleton(DefaultComponentFinder.class);
  servicesContainer.addSingleton(DefaultRubyComponentService.class);
  servicesContainer.addSingleton(ServerIssueStorage.class);
  servicesContainer.addSingleton(IssueUpdater.class);
  servicesContainer.addSingleton(FunctionExecutor.class);
  servicesContainer.addSingleton(IssueWorkflow.class);
  servicesContainer.addSingleton(IssueService.class);
  servicesContainer.addSingleton(IssueCommentService.class);
  servicesContainer.addSingleton(DefaultIssueFinder.class);
  servicesContainer.addSingleton(IssueStatsFinder.class);
  servicesContainer.addSingleton(PublicRubyIssueService.class);
  servicesContainer.addSingleton(InternalRubyIssueService.class);
  servicesContainer.addSingleton(ActionPlanService.class);
  servicesContainer.addSingleton(IssueChangelogService.class);
  servicesContainer.addSingleton(IssueNotifications.class);
  servicesContainer.addSingleton(ActionService.class);
  servicesContainer.addSingleton(Actions.class);
  servicesContainer.addSingleton(IssueFilterSerializer.class);
  servicesContainer.addSingleton(IssueFilterService.class);
  servicesContainer.addSingleton(IssueBulkChangeService.class);
  servicesContainer.addSingleton(IssueChangelogFormatter.class);
  servicesContainer.addSingleton(AssignAction.class);
  servicesContainer.addSingleton(PlanAction.class);
  servicesContainer.addSingleton(SetSeverityAction.class);
  servicesContainer.addSingleton(CommentAction.class);
  servicesContainer.addSingleton(TransitionAction.class);
  servicesContainer.addSingleton(RuleRegistry.class);
  servicesContainer.addSingleton(ESRuleTags.class);
  servicesContainer.addSingleton(RuleTagLookup.class);
  servicesContainer.addSingleton(RubyRuleService.class);
  servicesContainer.addSingleton(RuleRepositories.class);
  servicesContainer.addSingleton(RuleWebService.class);
  servicesContainer.addSingleton(InternalRubyTechnicalDebtService.class);
  servicesContainer.addSingleton(TechnicalDebtModelSynchronizer.class);
  servicesContainer.addSingleton(TechnicalDebtModelRepository.class);
  servicesContainer.addSingleton(TechnicalDebtXMLImporter.class);
  servicesContainer.addSingleton(TechnicalDebtConverter.class);
  servicesContainer.addSingleton(TechnicalDebtFormatter.class);
  servicesContainer.addSingleton(DefaultTechnicalDebtManager.class);
  servicesContainer.addSingleton(MacroInterpreter.class);
  servicesContainer.addSingleton(RubyTextService.class);
  servicesContainer.addSingleton(EmailSettings.class);
  servicesContainer.addSingleton(NotificationService.class);
  servicesContainer.addSingleton(NotificationCenter.class);
  servicesContainer.addSingleton(DefaultNotificationManager.class);
  servicesContainer.addSingleton(TestablePerspectiveLoader.class);
  servicesContainer.addSingleton(TestPlanPerspectiveLoader.class);
  servicesContainer.addSingleton(SnapshotPerspectives.class);
  servicesContainer.addSingleton(HtmlSourceDecorator.class);
  servicesContainer.addSingleton(TypeValidations.class);
  servicesContainer.addSingleton(IntegerTypeValidation.class);
  servicesContainer.addSingleton(FloatTypeValidation.class);
  servicesContainer.addSingleton(BooleanTypeValidation.class);
  servicesContainer.addSingleton(TextTypeValidation.class);
  servicesContainer.addSingleton(StringTypeValidation.class);
  servicesContainer.addSingleton(StringListTypeValidation.class);
  ServerExtensionInstaller extensionRegistrar=servicesContainer.getComponentByType(ServerExtensionInstaller.class);
  extensionRegistrar.registerExtensions(servicesContainer);
  servicesContainer.startComponents();
}
