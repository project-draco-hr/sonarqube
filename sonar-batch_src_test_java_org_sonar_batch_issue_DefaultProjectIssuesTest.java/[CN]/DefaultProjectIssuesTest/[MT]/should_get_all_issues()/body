{
  DefaultIssue issueOnModule=new DefaultIssue().setKey("1").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core");
  DefaultIssue issueInModule=new DefaultIssue().setKey("2").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core:Action");
  DefaultIssue resolvedIssueInModule=new DefaultIssue().setKey("3").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core:Action").setResolution(Issue.RESOLUTION_FIXED);
  DefaultIssue issueOnRoot=new DefaultIssue().setKey("4").setRuleKey(SQUID_RULE_KEY).setSeverity(Severity.CRITICAL).setComponentKey("org.apache:struts");
  DefaultIssue issueInRoot=new DefaultIssue().setKey("5").setRuleKey(SQUID_RULE_KEY).setSeverity(Severity.CRITICAL).setComponentKey("org.apache:struts:FileInRoot");
  when(cache.all()).thenReturn(Arrays.<TrackedIssue>asList(toTrackedIssue(issueOnRoot),toTrackedIssue(issueInRoot),toTrackedIssue(issueOnModule),toTrackedIssue(issueInModule),toTrackedIssue(resolvedIssueInModule)));
  List<Issue> issues=Lists.newArrayList(projectIssues.issues());
  assertThat(issues).containsOnly(issueOnRoot,issueInRoot,issueInModule,issueOnModule);
  List<Issue> resolvedIssues=Lists.newArrayList(projectIssues.resolvedIssues());
  assertThat(resolvedIssues).containsOnly(resolvedIssueInModule);
}
