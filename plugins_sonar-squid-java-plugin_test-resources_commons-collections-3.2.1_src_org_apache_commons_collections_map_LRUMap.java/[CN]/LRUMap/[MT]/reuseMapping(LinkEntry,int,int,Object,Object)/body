{
  try {
    int removeIndex=hashIndex(entry.hashCode,data.length);
    HashEntry[] tmp=data;
    HashEntry loop=tmp[removeIndex];
    HashEntry previous=null;
    while (loop != entry && loop != null) {
      previous=loop;
      loop=loop.next;
    }
    if (loop == null) {
      throw new IllegalStateException("Entry.next=null, data[removeIndex]=" + data[removeIndex] + " previous="+ previous+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " Please check that your keys are immutable, and that you have used synchronization properly."+ " If so, then please report this to commons-dev@jakarta.apache.org as a bug.");
    }
    modCount++;
    removeEntry(entry,removeIndex,previous);
    reuseEntry(entry,hashIndex,hashCode,key,value);
    addEntry(entry,hashIndex);
  }
 catch (  NullPointerException ex) {
    throw new IllegalStateException("NPE, entry=" + entry + " entryIsHeader="+ (entry == header)+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " Please check that your keys are immutable, and that you have used synchronization properly."+ " If so, then please report this to commons-dev@jakarta.apache.org as a bug.");
  }
}
