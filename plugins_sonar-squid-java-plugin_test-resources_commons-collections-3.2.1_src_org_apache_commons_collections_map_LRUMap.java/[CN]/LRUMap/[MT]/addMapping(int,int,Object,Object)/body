{
  if (isFull()) {
    LinkEntry reuse=header.after;
    boolean removeLRUEntry=false;
    if (scanUntilRemovable) {
      while (reuse != header && reuse != null) {
        if (removeLRU(reuse)) {
          removeLRUEntry=true;
          break;
        }
        reuse=reuse.after;
      }
      if (reuse == null) {
        throw new IllegalStateException("Entry.after=null, header.after" + header.after + " header.before"+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " Please check that your keys are immutable, and that you have used synchronization properly."+ " If so, then please report this to commons-dev@jakarta.apache.org as a bug.");
      }
    }
 else {
      removeLRUEntry=removeLRU(reuse);
    }
    if (removeLRUEntry) {
      if (reuse == null) {
        throw new IllegalStateException("reuse=null, header.after=" + header.after + " header.before"+ header.before+ " key="+ key+ " value="+ value+ " size="+ size+ " maxSize="+ maxSize+ " Please check that your keys are immutable, and that you have used synchronization properly."+ " If so, then please report this to commons-dev@jakarta.apache.org as a bug.");
      }
      reuseMapping(reuse,hashIndex,hashCode,key,value);
    }
 else {
      super.addMapping(hashIndex,hashCode,key,value);
    }
  }
 else {
    super.addMapping(hashIndex,hashCode,key,value);
  }
}
