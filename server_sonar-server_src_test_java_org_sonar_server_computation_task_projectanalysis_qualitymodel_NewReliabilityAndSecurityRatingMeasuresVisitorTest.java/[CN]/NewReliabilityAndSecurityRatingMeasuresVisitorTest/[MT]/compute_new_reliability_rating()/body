{
  treeRootHolder.setRoot(ROOT_PROJECT);
  fillComponentIssuesVisitorRule.setIssues(FILE_1_REF,newBugIssue(10L,MAJOR).setCreationDate(AFTER_LEAK_PERIOD_DATE),newBugIssue(1L,MAJOR).setCreationDate(BEFORE_LEAK_PERIOD_DATE),newVulnerabilityIssue(1L,MAJOR).setCreationDate(AFTER_LEAK_PERIOD_DATE));
  fillComponentIssuesVisitorRule.setIssues(FILE_2_REF,newBugIssue(2L,CRITICAL).setCreationDate(AFTER_LEAK_PERIOD_DATE),newBugIssue(3L,MINOR).setCreationDate(AFTER_LEAK_PERIOD_DATE),newBugIssue(10L,BLOCKER).setCreationDate(AFTER_LEAK_PERIOD_DATE).setResolution(RESOLUTION_FIXED));
  fillComponentIssuesVisitorRule.setIssues(MODULE_REF,newBugIssue(7L,BLOCKER).setCreationDate(AFTER_LEAK_PERIOD_DATE));
  underTest.visit(ROOT_PROJECT);
  verifyAddedRawMeasureOnLeakPeriod(FILE_1_REF,NEW_RELIABILITY_RATING_KEY,C);
  verifyAddedRawMeasureOnLeakPeriod(FILE_2_REF,NEW_RELIABILITY_RATING_KEY,D);
  verifyAddedRawMeasureOnLeakPeriod(DIRECTORY_REF,NEW_RELIABILITY_RATING_KEY,D);
  verifyAddedRawMeasureOnLeakPeriod(MODULE_REF,NEW_RELIABILITY_RATING_KEY,E);
  verifyAddedRawMeasureOnLeakPeriod(PROJECT_REF,NEW_RELIABILITY_RATING_KEY,E);
}
