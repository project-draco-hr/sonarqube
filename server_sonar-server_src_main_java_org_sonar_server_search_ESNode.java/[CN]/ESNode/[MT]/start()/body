{
  initLogging();
  String typeValue=settings.getString(IndexProperties.TYPE);
  IndexProperties.ES_TYPE type=typeValue != null ? IndexProperties.ES_TYPE.valueOf(typeValue) : IndexProperties.ES_TYPE.DATA;
  ImmutableSettings.Builder esSettings=ImmutableSettings.settingsBuilder().put("index.merge.policy.max_merge_at_once","200").put("index.merge.policy.segments_per_tier","200").put("indices.store.throttle.type","merge").put("indices.store.throttle.max_bytes_per_sec","200mb").put("script.default_lang","native").put("script.native." + ListUpdate.NAME + ".type",UpdateListScriptFactory.class.getName()).put("cluster.name",StringUtils.defaultIfBlank(settings.getString(IndexProperties.CLUSTER_NAME),"sonarqube")).put("path.home",esHomeDir().getAbsolutePath());
  initAnalysis(esSettings);
  if (IndexProperties.ES_TYPE.TRANSPORT.equals(type)) {
    initRemoteClient(esSettings);
  }
 else {
    initLocalClient(type,esSettings);
  }
  if (client.admin().cluster().prepareHealth().setWaitForYellowStatus().setTimeout(healthTimeout).get().getStatus() == ClusterHealthStatus.RED) {
    throw new IllegalStateException(String.format("Elasticsearch index is corrupt, please delete directory '%s' " + "and relaunch the SonarQube server.",esDataDir()));
  }
  addIndexTemplates();
  LOG.info("Elasticsearch started");
}
