{
  QProfile profile=new QProfile().setId(1).setName("Default").setLanguage("java");
  when(profileLookup.profile(1)).thenReturn(profile);
  QProfileRule rule=mock(QProfileRule.class);
  when(rule.id()).thenReturn(10);
  when(rulesLookup.findByRuleId(10)).thenReturn(rule);
  ActiveRuleDto activeRule=new ActiveRuleDto().setId(5).setProfileId(1).setRuleId(10).setSeverity(1);
  when(activeRuleDao.selectById(5)).thenReturn(activeRule);
  RuleParamDto ruleParam=new RuleParamDto().setRuleId(10).setName("max").setDefaultValue("20").setType(PropertyType.INTEGER.name());
  when(ruleDao.selectParamByRuleAndKey(10,"max",session)).thenReturn(ruleParam);
  when(profilesManager.ruleParamChanged(eq(1),eq(5),eq("max"),eq((String)null),eq("30"),eq("Nicolas"))).thenReturn(new ProfilesManager.RuleInheritanceActions());
  operations.updateActiveRuleParam(1,5,"max","30",authorizedUserSession);
  ArgumentCaptor<ActiveRuleParamDto> argumentCaptor=ArgumentCaptor.forClass(ActiveRuleParamDto.class);
  verify(activeRuleDao).insert(argumentCaptor.capture(),eq(session));
  assertThat(argumentCaptor.getValue().getKey()).isEqualTo("max");
  assertThat(argumentCaptor.getValue().getValue()).isEqualTo("30");
  assertThat(argumentCaptor.getValue().getActiveRuleId()).isEqualTo(5);
  verify(session).commit();
  verify(profilesManager).ruleParamChanged(eq(1),eq(5),eq("max"),eq((String)null),eq("30"),eq("Nicolas"));
  verify(ruleRegistry).deleteActiveRules(anyListOf(Integer.class));
  verify(ruleRegistry).bulkIndexActiveRules(anyListOf(Integer.class),eq(session));
}
