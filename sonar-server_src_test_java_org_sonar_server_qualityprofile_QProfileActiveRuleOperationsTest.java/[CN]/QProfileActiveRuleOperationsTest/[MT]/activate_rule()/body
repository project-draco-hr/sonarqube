{
  QualityProfileDto qualityProfile=new QualityProfileDto().setId(1).setName("My profile").setLanguage("java");
  RuleDto rule=new RuleDto().setId(10).setRepositoryKey("squid").setRuleKey("AvoidCycle");
  when(ruleDao.selectParameters(eq(10),eq(session))).thenReturn(newArrayList(new RuleParamDto().setId(20).setName("max").setDefaultValue("10")));
  final int idActiveRuleToUpdate=42;
  final int idActiveRuleToDelete=24;
  ProfilesManager.RuleInheritanceActions inheritanceActions=new ProfilesManager.RuleInheritanceActions().addToIndex(idActiveRuleToUpdate).addToDelete(idActiveRuleToDelete);
  when(profilesManager.activated(eq(1),anyInt(),eq("Nicolas"))).thenReturn(inheritanceActions);
  ActiveRuleDto result=operations.createActiveRule(qualityProfile,rule,Severity.CRITICAL,authorizedUserSession);
  assertThat(result).isNotNull();
  ArgumentCaptor<ActiveRuleDto> activeRuleArgument=ArgumentCaptor.forClass(ActiveRuleDto.class);
  verify(activeRuleDao).insert(activeRuleArgument.capture(),eq(session));
  assertThat(activeRuleArgument.getValue().getRulId()).isEqualTo(10);
  assertThat(activeRuleArgument.getValue().getSeverity()).isEqualTo(3);
  ArgumentCaptor<ActiveRuleParamDto> activeRuleParamArgument=ArgumentCaptor.forClass(ActiveRuleParamDto.class);
  verify(activeRuleDao).insert(activeRuleParamArgument.capture(),eq(session));
  assertThat(activeRuleParamArgument.getValue().getKey()).isEqualTo("max");
  assertThat(activeRuleParamArgument.getValue().getValue()).isEqualTo("10");
  verify(session).commit();
  verify(profilesManager).activated(eq(1),anyInt(),eq("Nicolas"));
  verify(ruleRegistry).deleteActiveRules(eq(newArrayList(idActiveRuleToDelete)));
  verify(ruleRegistry).bulkIndexActiveRules(eq(newArrayList(idActiveRuleToUpdate)),eq(session));
}
