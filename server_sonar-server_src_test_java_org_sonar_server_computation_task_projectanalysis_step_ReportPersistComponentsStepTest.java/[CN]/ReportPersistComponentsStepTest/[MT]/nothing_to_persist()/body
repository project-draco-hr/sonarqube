{
  ComponentDto project=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(dbTester.getSession(),project);
  ComponentDto module=ComponentTesting.newModuleDto("BCDE",project).setKey(MODULE_KEY).setName("Module");
  dbClient.componentDao().insert(dbTester.getSession(),module);
  ComponentDto directory=ComponentTesting.newDirectory(module,"src/main/java/dir").setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir");
  ComponentDto file=ComponentTesting.newFileDto(module,directory,"DEFG").setPath("src/main/java/dir/Foo.java").setName("Foo.java").setKey("MODULE_KEY:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(dbTester.getSession(),directory,file);
  dbTester.getSession().commit();
  treeRootHolder.setRoot(builder(PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).setName("Project").addChildren(builder(Component.Type.MODULE,2).setUuid("BCDE").setKey(MODULE_KEY).setName("Module").addChildren(builder(DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").setPath("src/main/java/dir").addChildren(builder(FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").setPath("src/main/java/dir/Foo.java").build()).build()).build()).build());
  underTest.execute();
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(4);
  assertThat(dbClient.componentDao().selectByKey(dbTester.getSession(),PROJECT_KEY).get().getId()).isEqualTo(project.getId());
  assertThat(dbClient.componentDao().selectByKey(dbTester.getSession(),MODULE_KEY).get().getId()).isEqualTo(module.getId());
  assertThat(dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir").get().getId()).isEqualTo(directory.getId());
  assertThat(dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir/Foo.java").get().getId()).isEqualTo(file.getId());
  ComponentDto projectReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),PROJECT_KEY).get();
  assertThat(projectReloaded.getId()).isEqualTo(project.getId());
  assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());
  assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());
  assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());
  assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());
  assertThat(projectReloaded.getRootUuid()).isEqualTo(project.getRootUuid());
  ComponentDto moduleReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),MODULE_KEY).get();
  assertThat(moduleReloaded.getId()).isEqualTo(module.getId());
  assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());
  assertThat(moduleReloaded.getUuidPath()).isEqualTo(module.getUuidPath());
  assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());
  assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());
  assertThat(moduleReloaded.getRootUuid()).isEqualTo(module.getRootUuid());
  ComponentDto directoryReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir").get();
  assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());
  assertThat(directoryReloaded.getUuidPath()).isEqualTo(directory.getUuidPath());
  assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());
  assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());
  assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());
  assertThat(directoryReloaded.getRootUuid()).isEqualTo(directory.getRootUuid());
  assertThat(directoryReloaded.name()).isEqualTo(directory.name());
  assertThat(directoryReloaded.path()).isEqualTo(directory.path());
  ComponentDto fileReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir/Foo.java").get();
  assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());
  assertThat(fileReloaded.getUuidPath()).isEqualTo(file.getUuidPath());
  assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());
  assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());
  assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());
  assertThat(fileReloaded.getRootUuid()).isEqualTo(file.getRootUuid());
  assertThat(fileReloaded.name()).isEqualTo(file.name());
  assertThat(fileReloaded.path()).isEqualTo(file.path());
}
