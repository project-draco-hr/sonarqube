{
  Component file=builder(FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").setPath("src/main/java/dir/Foo.java").setFileAttributes(new FileAttributes(false,"java")).build();
  Component directory=builder(DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").setPath("src/main/java/dir").addChildren(file).build();
  Component module=builder(Component.Type.MODULE,2).setUuid("BCDE").setKey(MODULE_KEY).setPath("module").setName("Module").setDescription("Module description").addChildren(directory).build();
  Component project=builder(PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).setName("Project").setDescription("Project description").addChildren(module).build();
  treeRootHolder.setRoot(project);
  underTest.execute();
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(4);
  ComponentDto projectDto=dbClient.componentDao().selectByKey(dbTester.getSession(),PROJECT_KEY).get();
  assertThat(projectDto.name()).isEqualTo("Project");
  assertThat(projectDto.description()).isEqualTo("Project description");
  assertThat(projectDto.path()).isNull();
  assertThat(projectDto.uuid()).isEqualTo("ABCD");
  assertThat(projectDto.getUuidPath()).isEqualTo(UUID_PATH_OF_ROOT);
  assertThat(projectDto.moduleUuid()).isNull();
  assertThat(projectDto.moduleUuidPath()).isEqualTo("." + projectDto.uuid() + ".");
  assertThat(projectDto.projectUuid()).isEqualTo(projectDto.uuid());
  assertThat(projectDto.qualifier()).isEqualTo("TRK");
  assertThat(projectDto.scope()).isEqualTo("PRJ");
  assertThat(projectDto.getRootUuid()).isEqualTo("ABCD");
  assertThat(projectDto.getCreatedAt()).isEqualTo(now);
  ComponentDto moduleDto=dbClient.componentDao().selectByKey(dbTester.getSession(),MODULE_KEY).get();
  assertThat(moduleDto.name()).isEqualTo("Module");
  assertThat(moduleDto.description()).isEqualTo("Module description");
  assertThat(moduleDto.path()).isEqualTo("module");
  assertThat(moduleDto.uuid()).isEqualTo("BCDE");
  assertThat(moduleDto.getUuidPath()).isEqualTo(projectDto.getUuidPath() + projectDto.uuid() + UUID_PATH_SEPARATOR);
  assertThat(moduleDto.moduleUuid()).isEqualTo(projectDto.uuid());
  assertThat(moduleDto.moduleUuidPath()).isEqualTo(projectDto.moduleUuidPath() + moduleDto.uuid() + ".");
  assertThat(moduleDto.projectUuid()).isEqualTo(projectDto.uuid());
  assertThat(moduleDto.qualifier()).isEqualTo("BRC");
  assertThat(moduleDto.scope()).isEqualTo("PRJ");
  assertThat(moduleDto.getRootUuid()).isEqualTo(projectDto.uuid());
  assertThat(moduleDto.getCreatedAt()).isEqualTo(now);
  ComponentDto directoryDto=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir").get();
  assertThat(directoryDto.name()).isEqualTo("src/main/java/dir");
  assertThat(directoryDto.description()).isNull();
  assertThat(directoryDto.path()).isEqualTo("src/main/java/dir");
  assertThat(directoryDto.uuid()).isEqualTo("CDEF");
  assertThat(directoryDto.getUuidPath()).isEqualTo(moduleDto.getUuidPath() + moduleDto.uuid() + UUID_PATH_SEPARATOR);
  assertThat(directoryDto.moduleUuid()).isEqualTo(moduleDto.uuid());
  assertThat(directoryDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());
  assertThat(directoryDto.projectUuid()).isEqualTo(projectDto.uuid());
  assertThat(directoryDto.qualifier()).isEqualTo("DIR");
  assertThat(directoryDto.scope()).isEqualTo("DIR");
  assertThat(directoryDto.getRootUuid()).isEqualTo(moduleDto.uuid());
  assertThat(directoryDto.getCreatedAt()).isEqualTo(now);
  ComponentDto fileDto=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir/Foo.java").get();
  assertThat(fileDto.name()).isEqualTo("Foo.java");
  assertThat(fileDto.description()).isNull();
  assertThat(fileDto.path()).isEqualTo("src/main/java/dir/Foo.java");
  assertThat(fileDto.language()).isEqualTo("java");
  assertThat(fileDto.uuid()).isEqualTo("DEFG");
  assertThat(fileDto.getUuidPath()).isEqualTo(directoryDto.getUuidPath() + directoryDto.uuid() + UUID_PATH_SEPARATOR);
  assertThat(fileDto.moduleUuid()).isEqualTo(moduleDto.uuid());
  assertThat(fileDto.moduleUuidPath()).isEqualTo(moduleDto.moduleUuidPath());
  assertThat(fileDto.projectUuid()).isEqualTo(projectDto.uuid());
  assertThat(fileDto.qualifier()).isEqualTo("FIL");
  assertThat(fileDto.scope()).isEqualTo("FIL");
  assertThat(fileDto.getRootUuid()).isEqualTo(moduleDto.uuid());
  assertThat(fileDto.getCreatedAt()).isEqualTo(now);
  assertThat(dbIdsRepository.getComponentId(project)).isEqualTo(projectDto.getId());
  assertThat(dbIdsRepository.getComponentId(module)).isEqualTo(moduleDto.getId());
  assertThat(dbIdsRepository.getComponentId(directory)).isEqualTo(directoryDto.getId());
  assertThat(dbIdsRepository.getComponentId(file)).isEqualTo(fileDto.getId());
}
