{
  Project project=createProject();
  FindbugsExecutor executor=mock(FindbugsExecutor.class);
  SensorContext context=mock(SensorContext.class);
  Configuration conf=mock(Configuration.class);
  File xmlFile=new File(getClass().getResource("/org/sonar/plugins/findbugs/findbugsReport.xml").toURI());
  when(project.getConfiguration()).thenReturn(conf);
  when(executor.execute()).thenReturn(xmlFile);
  when(context.getResource(any(Resource.class))).thenReturn(new JavaFile("org.sonar.MyClass"));
  FindbugsSensor analyser=new FindbugsSensor(createRulesProfileWithActiveRules(),new FakeRuleFinder(),executor);
  analyser.analyse(project,context);
  verify(executor).execute();
  verify(context,times(3)).saveViolation(any(Violation.class));
  Violation wanted=new Violation(null,new JavaFile("org.sonar.commons.ZipUtils")).setMessage("Empty zip file entry created in org.sonar.commons.ZipUtils._zip(String, File, ZipOutputStream)").setLineId(107);
  verify(context).saveViolation(argThat(new IsViolation(wanted)));
  wanted=new Violation(null,new JavaFile("org.sonar.commons.resources.MeasuresDao")).setMessage("The class org.sonar.commons.resources.MeasuresDao$1 could be refactored into a named _static_ inner class").setLineId(56);
  verify(context).saveViolation(argThat(new IsViolation(wanted)));
}
