{
  Project project=createProject();
  FindbugsExecutor executor=mock(FindbugsExecutor.class);
  SensorContext context=mock(SensorContext.class);
  BugCollection collection=new SortedBugCollection();
  BugInstance bugInstance=new BugInstance("AM_CREATES_EMPTY_ZIP_FILE_ENTRY",2);
  String className="org.sonar.commons.ZipUtils";
  String sourceFile="org/sonar/commons/ZipUtils.java";
  int startLine=107;
  ClassAnnotation classAnnotation=new ClassAnnotation(className,sourceFile);
  bugInstance.add(classAnnotation);
  MethodAnnotation methodAnnotation=new MethodAnnotation(className,"_zip","(Ljava/lang/String;Ljava/io/File;Ljava/util/zip/ZipOutputStream;)V",true);
  methodAnnotation.setSourceLines(new SourceLineAnnotation(className,sourceFile,startLine,0,0,0));
  bugInstance.add(methodAnnotation);
  collection.add(bugInstance);
  when(executor.execute()).thenReturn(collection);
  when(context.getResource(any(Resource.class))).thenReturn(new JavaFile("org.sonar.MyClass"));
  FindbugsSensor analyser=new FindbugsSensor(createRulesProfileWithActiveRules(),new FakeRuleFinder(),executor);
  analyser.analyse(project,context);
  verify(executor).execute();
  verify(context,times(1)).saveViolation(any(Violation.class));
  Violation wanted=Violation.create((Rule)null,new JavaFile("org.sonar.commons.ZipUtils")).setMessage("Empty zip file entry created in org.sonar.commons.ZipUtils._zip(String, File, ZipOutputStream)").setLineId(107);
  verify(context).saveViolation(argThat(new IsViolation(wanted)));
}
