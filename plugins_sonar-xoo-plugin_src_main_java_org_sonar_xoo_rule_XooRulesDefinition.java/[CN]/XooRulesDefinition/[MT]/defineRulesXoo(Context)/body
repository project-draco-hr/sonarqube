{
  NewRepository repo=context.createRepository(XOO_REPOSITORY,Xoo.KEY).setName("Xoo");
  new RulesDefinitionAnnotationLoader().load(repo,Check.ALL);
  NewRule hasTag=repo.createRule(HasTagSensor.RULE_KEY).setName("Has Tag").setHtmlDescription("Search for a given tag in Xoo files");
  hasTag.setDebtRemediationFunction(hasTag.debtRemediationFunctions().constantPerIssue("2min"));
  hasTag.createParam("tag").setDefaultValue("xoo").setDescription("The tag to search for");
  NewRule ruleWithParameters=repo.createRule("RuleWithParameters").setName("Rule with parameters").setHtmlDescription("Rule containing parameter of different types : boolean, integer, etc. For information, no issue will be linked to this rule.");
  ruleWithParameters.createParam("string").setType(RuleParamType.STRING);
  ruleWithParameters.createParam("text").setType(RuleParamType.TEXT);
  ruleWithParameters.createParam("boolean").setType(RuleParamType.BOOLEAN);
  ruleWithParameters.createParam("integer").setType(RuleParamType.INTEGER);
  ruleWithParameters.createParam("float").setType(RuleParamType.FLOAT);
  NewRule oneIssuePerLine=repo.createRule(OneIssuePerLineSensor.RULE_KEY).setName("One Issue Per Line").setHtmlDescription("Generate an issue on each line of a file. It requires the metric \"lines\".");
  oneIssuePerLine.setDebtRemediationFunction(hasTag.debtRemediationFunctions().linear("1min")).setGapDescription("It takes about 1 minute to an experienced software craftsman to remove a line of code");
  repo.createRule(OneIssueOnDirPerFileSensor.RULE_KEY).setName("One Issue On Dir Per File").setHtmlDescription("Generate issues on directories");
  NewRule oneIssuePerFile=repo.createRule(OneIssuePerFileSensor.RULE_KEY).setName("One Issue Per File").setHtmlDescription("Generate an issue on each file");
  oneIssuePerFile.setDebtRemediationFunction(hasTag.debtRemediationFunctions().linear("10min"));
  NewRule oneDayDebtPerFile=repo.createRule(OneDayDebtPerFileSensor.RULE_KEY).setName("One Day Debt Per File").setHtmlDescription("Generate an issue on each file with a debt of one day");
  oneDayDebtPerFile.setDebtRemediationFunction(hasTag.debtRemediationFunctions().linear("1d"));
  NewRule oneIssuePerModule=repo.createRule(OneIssuePerModuleSensor.RULE_KEY).setName("One Issue Per Module").setHtmlDescription("Generate an issue on each module");
  oneIssuePerModule.setDebtRemediationFunction(hasTag.debtRemediationFunctions().linearWithOffset("25min","1h")).setGapDescription("A certified architect will need roughly half an hour to start working on removal of modules, " + "then it's about one hour per module.");
  repo.createRule(OneBlockerIssuePerFileSensor.RULE_KEY).setName("One Blocker Issue Per File").setHtmlDescription("Generate a blocker issue on each file, whatever the severity declared in the Quality profile");
  repo.createRule(CustomMessageSensor.RULE_KEY).setName("Issue With Custom Message").setHtmlDescription("Generate an issue on each file with a custom message");
  repo.createRule(RandomAccessSensor.RULE_KEY).setName("One Issue Per File with Random Access").setHtmlDescription("This issue is generated on each file");
  repo.createRule(DeprecatedResourceApiSensor.RULE_KEY).setName("Issue created using deprecated API").setHtmlDescription("Issue created using deprecated API");
  repo.createRule(MultilineIssuesSensor.RULE_KEY).setName("Creates issues with ranges/multiple locations").setHtmlDescription("Issue with range and multiple locations");
  repo.done();
}
