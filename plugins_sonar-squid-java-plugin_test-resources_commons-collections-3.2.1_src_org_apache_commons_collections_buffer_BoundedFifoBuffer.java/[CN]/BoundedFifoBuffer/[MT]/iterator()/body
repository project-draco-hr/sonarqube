{
  return new Iterator(){
    private int index=start;
    private int lastReturnedIndex=-1;
    private boolean isFirst=full;
    public boolean hasNext(){
      return isFirst || (index != end);
    }
    public Object next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      isFirst=false;
      lastReturnedIndex=index;
      index=increment(index);
      return elements[lastReturnedIndex];
    }
    public void remove(){
      if (lastReturnedIndex == -1) {
        throw new IllegalStateException();
      }
      if (lastReturnedIndex == start) {
        BoundedFifoBuffer.this.remove();
        lastReturnedIndex=-1;
        return;
      }
      int pos=lastReturnedIndex + 1;
      if (start < lastReturnedIndex && pos < end) {
        System.arraycopy(elements,pos,elements,lastReturnedIndex,end - pos);
      }
 else {
        while (pos != end) {
          if (pos >= maxElements) {
            elements[pos - 1]=elements[0];
            pos=0;
          }
 else {
            elements[decrement(pos)]=elements[pos];
            pos=increment(pos);
          }
        }
      }
      lastReturnedIndex=-1;
      end=decrement(end);
      elements[end]=null;
      full=false;
      index=decrement(index);
    }
  }
;
}
