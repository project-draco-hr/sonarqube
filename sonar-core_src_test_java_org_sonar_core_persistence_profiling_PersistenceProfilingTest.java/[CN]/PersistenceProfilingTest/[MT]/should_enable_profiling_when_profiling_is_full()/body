{
  final Logger sqlLogger=(Logger)LoggerFactory.getLogger("sql");
  ListAppender<ILoggingEvent> appender=new ListAppender<ILoggingEvent>();
  appender.setContext(new ContextBase());
  appender.start();
  sqlLogger.addAppender(appender);
  BasicDataSource originDataSource=mock(BasicDataSource.class);
  Connection connection=mock(Connection.class);
  when(originDataSource.getConnection()).thenReturn(connection);
  String sql="select 'polop' from dual;";
  String sqlWithParams="insert into polop (col1, col2, col3, col4) values (?, ?, ?, ?, ?);";
  int param1=42;
  String param2="plouf";
  Date param3=new Date(System.currentTimeMillis());
  Timestamp param4=new Timestamp(System.currentTimeMillis());
  byte[] param5="blob".getBytes("UTF-8");
  PreparedStatement preparedStatement=mock(PreparedStatement.class);
  when(connection.prepareStatement(sqlWithParams)).thenReturn(preparedStatement);
  when(preparedStatement.execute()).thenReturn(true);
  Statement statement=mock(Statement.class);
  when(connection.createStatement()).thenReturn(statement);
  when(statement.execute(sql)).thenReturn(true);
  Settings settings=new Settings();
  settings.setProperty(Profiling.CONFIG_PROFILING_LEVEL,Profiling.Level.FULL.toString());
  BasicDataSource resultDataSource=PersistenceProfiling.addProfilingIfNeeded(originDataSource,settings);
  assertThat(resultDataSource).isInstanceOf(ProfilingDataSource.class);
  assertThat(resultDataSource.getUrl()).isNull();
  assertThat(resultDataSource.getConnection().getClientInfo()).isNull();
  PreparedStatement preparedStatementProxy=resultDataSource.getConnection().prepareStatement(sqlWithParams);
  preparedStatementProxy.setInt(1,param1);
  preparedStatementProxy.setString(2,param2);
  preparedStatementProxy.setDate(3,param3);
  preparedStatementProxy.setTimestamp(4,param4);
  preparedStatementProxy.setBlob(5,new ByteArrayInputStream(param5));
  assertThat(preparedStatementProxy.getConnection()).isNull();
  assertThat(preparedStatementProxy.execute()).isTrue();
  final Statement statementProxy=resultDataSource.getConnection().createStatement();
  assertThat(statementProxy.getConnection()).isNull();
  assertThat(statementProxy.execute(sql)).isTrue();
  assertThat(appender.list).hasSize(2);
  assertThat(appender.list.get(0).getLevel()).isEqualTo(Level.INFO);
  assertThat(appender.list.get(0).getFormattedMessage()).contains(sqlWithParams).contains(" - parameters are: ").contains(Integer.toString(param1)).contains(param2);
  assertThat(appender.list.get(1).getLevel()).isEqualTo(Level.INFO);
  assertThat(appender.list.get(1).getFormattedMessage()).contains(sql);
}
