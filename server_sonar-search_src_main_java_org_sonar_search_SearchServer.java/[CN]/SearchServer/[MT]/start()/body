{
  Integer port=props.valueAsInt(ES_PORT_PROPERTY);
  String clusterName=props.value(ES_CLUSTER_PROPERTY);
  LoggerFactory.getLogger(SearchServer.class).info("Starting ES[{}] on port: {}",clusterName,port);
  Integer replicationFactor=0;
  ImmutableSettings.Builder esSettings=ImmutableSettings.settingsBuilder().put("discovery.zen.ping.multicast.enabled","false").put("index.number_of_shards","1").put("index.refresh_interval","30s").put("index.store.type","mmapfs").put("indices.store.throttle.type","none").put("index.merge.scheduler.max_thread_count",Math.max(1,Math.min(3,Runtime.getRuntime().availableProcessors() / 2))).put("script.default_lang","native").put("script.native." + ListUpdate.NAME + ".type",ListUpdate.UpdateListScriptFactory.class.getName()).put("transport.tcp.port",port).put("http.enabled",false).put("path.data",esDataDir().getAbsolutePath()).put("path.work",esWorkDir().getAbsolutePath()).put("path.logs",esLogDir().getAbsolutePath());
  if (!nodes.isEmpty()) {
    replicationFactor=1;
    LoggerFactory.getLogger(SearchServer.class).info("Joining ES cluster with master: {}",nodes);
    esSettings.put("discovery.zen.ping.unicast.hosts",StringUtils.join(nodes,","));
    esSettings.put("node.master",false);
    esSettings.put("discovery.zen.minimum_master_nodes",1);
  }
  if (props.valueAsBoolean(CLUSTER_ACTIVATION)) {
    replicationFactor=1;
  }
  esSettings.put("index.number_of_replicas",replicationFactor.toString());
  esSettings.put("action.auto_create_index",".marvel-*");
  if (!marvels.isEmpty()) {
    esSettings.put("marvel.agent.exporter.es.hosts",StringUtils.join(marvels,","));
  }
  esSettings.put("cluster.name",clusterName);
  esSettings.put("node.rack_id",props.value(SONAR_NODE_NAME,"unknown"));
  if (props.contains(SONAR_NODE_NAME)) {
    esSettings.put("node.name",props.value(SONAR_NODE_NAME));
  }
 else {
    try {
      esSettings.put("node.name",InetAddress.getLocalHost().getHostName());
    }
 catch (    Exception e) {
      LoggerFactory.getLogger(SearchServer.class).warn("Could not determine hostname",e);
      esSettings.put("node.name","sq-" + System.currentTimeMillis());
    }
  }
  node=new InternalNode(esSettings.build(),true);
  node.start();
  node.client().admin().indices().preparePutTemplate("default").setTemplate("*").addMapping("_default_","{\"dynamic\": \"strict\"}").get();
}
