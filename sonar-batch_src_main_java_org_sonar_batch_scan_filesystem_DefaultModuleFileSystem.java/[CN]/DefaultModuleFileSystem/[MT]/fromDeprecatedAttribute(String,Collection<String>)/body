{
  if ("TYPE".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : predicates().hasType(org.sonar.api.batch.fs.InputFile.Type.valueOf(s));
      }
    }
));
  }
  if ("STATUS".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : predicates().hasStatus(org.sonar.api.batch.fs.InputFile.Status.valueOf(s));
      }
    }
));
  }
  if ("LANG".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : predicates().hasLanguage(s);
      }
    }
));
  }
  if ("CMP_KEY".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : new AdditionalFilePredicates.KeyPredicate(s);
      }
    }
));
  }
  if ("CMP_DEPRECATED_KEY".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : new AdditionalFilePredicates.DeprecatedKeyPredicate(s);
      }
    }
));
  }
  if ("SRC_REL_PATH".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : new AdditionalFilePredicates.SourceRelativePathPredicate(s);
      }
    }
));
  }
  if ("SRC_DIR_PATH".equals(key)) {
    return predicates().or(Collections2.transform(value,new Function<String,FilePredicate>(){
      @Override public FilePredicate apply(      @Nullable String s){
        return s == null ? predicates().all() : new AdditionalFilePredicates.SourceDirPredicate(s);
      }
    }
));
  }
  throw new IllegalArgumentException("Unsupported file attribute: " + key);
}
