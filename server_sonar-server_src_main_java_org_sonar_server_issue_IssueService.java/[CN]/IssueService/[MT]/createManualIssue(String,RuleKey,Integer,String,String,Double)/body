{
  verifyLoggedIn();
  DbSession session=dbClient.openSession(false);
  try {
    Optional<ComponentDto> componentOptional=dbClient.componentDao().selectByKey(session,componentKey);
    if (!componentOptional.isPresent()) {
      throw new NotFoundException(String.format("Component with key '%s' not found",componentKey));
    }
    ComponentDto component=componentOptional.get();
    ComponentDto project=dbClient.componentDao().selectOrFailByUuid(session,component.projectUuid());
    userSession.checkProjectPermission(UserRole.USER,project.getKey());
    if (!ruleKey.isManual()) {
      throw new IllegalArgumentException("Issues can be created only on rules marked as 'manual': " + ruleKey);
    }
    Rule rule=getNullableRuleByKey(ruleKey);
    if (rule == null) {
      throw new IllegalArgumentException("Unknown rule: " + ruleKey);
    }
    DefaultIssue issue=new DefaultIssueBuilder().componentKey(component.getKey()).projectKey(project.getKey()).line(line).message(!Strings.isNullOrEmpty(message) ? message : rule.getName()).severity(Objects.firstNonNull(severity,Severity.MAJOR)).effortToFix(effortToFix).ruleKey(ruleKey).reporter(userSession.getLogin()).assignee(findSourceLineUser(component.uuid(),line)).build();
    Date now=new Date();
    issue.setCreationDate(now);
    issue.setUpdateDate(now);
    issueStorage.save(issue);
    return issue;
  }
  finally {
    session.close();
  }
}
