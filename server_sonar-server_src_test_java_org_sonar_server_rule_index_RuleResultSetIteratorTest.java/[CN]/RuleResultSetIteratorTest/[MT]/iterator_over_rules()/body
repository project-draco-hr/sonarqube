{
  dbClient.ruleDao().insert(dbSession,templateRule);
  dbClient.ruleDao().insert(dbSession,customRule);
  dbSession.commit();
  RuleResultSetIterator it=RuleResultSetIterator.create(dbTester.getDbClient(),dbTester.getSession(),0L);
  Map<String,RuleDoc> rulesByKey=rulesByKey(it);
  it.close();
  assertThat(rulesByKey).hasSize(2);
  RuleDoc rule=rulesByKey.get(templateRule.getRuleKey());
  assertThat(rule.key()).isEqualTo(RuleKey.of("xoo","S001"));
  assertThat(rule.keyAsList()).containsOnly("xoo","S001");
  assertThat(rule.ruleKey()).isEqualTo("S001");
  assertThat(rule.repository()).isEqualTo("xoo");
  assertThat(rule.internalKey()).isEqualTo("S1");
  assertThat(rule.name()).isEqualTo("Null Pointer");
  assertThat(rule.htmlDescription()).isEqualTo("S001 desc");
  assertThat(rule.language()).isEqualTo("xoo");
  assertThat(rule.severity()).isEqualTo(Severity.BLOCKER);
  assertThat(rule.status()).isEqualTo(RuleStatus.READY);
  assertThat(rule.isTemplate()).isTrue();
  assertThat(rule.allTags()).containsOnly("performance","cwe");
  assertThat(rule.createdAt()).isEqualTo(1500000000000L);
  assertThat(rule.updatedAt()).isEqualTo(1600000000000L);
  rule=rulesByKey.get(customRule.getRuleKey());
  assertThat(rule.key()).isEqualTo(RuleKey.of("xoo","S002"));
  assertThat(rule.keyAsList()).containsOnly("xoo","S002");
  assertThat(rule.ruleKey()).isEqualTo("S002");
  assertThat(rule.repository()).isEqualTo("xoo");
  assertThat(rule.internalKey()).isEqualTo("S2");
  assertThat(rule.name()).isEqualTo("Slow");
  assertThat(rule.htmlDescription()).isEqualTo("<strong>S002 desc</strong>");
  assertThat(rule.language()).isEqualTo("xoo");
  assertThat(rule.severity()).isEqualTo(Severity.MAJOR);
  assertThat(rule.status()).isEqualTo(RuleStatus.BETA);
  assertThat(rule.isTemplate()).isFalse();
  assertThat(rule.allTags()).isEmpty();
  assertThat(rule.createdAt()).isEqualTo(2000000000000L);
  assertThat(rule.updatedAt()).isEqualTo(2100000000000L);
}
