{
  CommandExecutor commandExecutor=mock(CommandExecutor.class);
  Settings settings=new Settings(new PropertyDefinitions(SvnConfiguration.getProperties()));
  SvnBlameCommand svnBlameCommand=new SvnBlameCommand(commandExecutor,new SvnConfiguration(settings));
  Command commandLine=svnBlameCommand.createCommandLine(baseDir,"src/main/java/Foo.java");
  assertThat(commandLine.toCommandLine()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive");
  assertThat(commandLine.toString()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive");
  settings.setProperty(SvnConfiguration.USER_PROP_KEY,"myUser");
  settings.setProperty(SvnConfiguration.PASSWORD_PROP_KEY,"myPass");
  commandLine=svnBlameCommand.createCommandLine(baseDir,"src/main/java/Foo.java");
  assertThat(commandLine.toCommandLine()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive --username myUser --password myPass");
  assertThat(commandLine.toString()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive --username ******** --password ********");
  settings.setProperty(SvnConfiguration.CONFIG_DIR_PROP_KEY,"/home/julien/.svn");
  settings.setProperty(SvnConfiguration.TRUST_SERVER_PROP_KEY,"true");
  commandLine=svnBlameCommand.createCommandLine(baseDir,"src/main/java/Foo.java");
  assertThat(commandLine.toCommandLine()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive --config-dir /home/julien/.svn --username myUser --password myPass --trust-server-cert");
  assertThat(commandLine.toString()).isEqualTo("svn blame --xml src/main/java/Foo.java --non-interactive --config-dir /home/julien/.svn --username ******** --password ******** --trust-server-cert");
}
