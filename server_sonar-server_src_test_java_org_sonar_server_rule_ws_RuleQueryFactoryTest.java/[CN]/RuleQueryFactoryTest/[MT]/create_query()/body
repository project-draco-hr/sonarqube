{
  RuleQuery result=execute(PARAM_RULE_KEY,"ruleKey",PARAM_ACTIVATION,"true",PARAM_ACTIVE_SEVERITIES,"MINOR,MAJOR",PARAM_AVAILABLE_SINCE,"2016-01-01",PARAM_INHERITANCE,"INHERITED,OVERRIDES",PARAM_IS_TEMPLATE,"true",PARAM_LANGUAGES,"java,js",TEXT_QUERY,"S001",PARAM_QPROFILE,"sonar-way",PARAM_REPOSITORIES,"pmd,checkstyle",PARAM_SEVERITIES,"MINOR,CRITICAL",PARAM_STATUSES,"DEPRECATED,READY",PARAM_TAGS,"tag1,tag2",PARAM_TEMPLATE_KEY,"architectural",PARAM_TYPES,"CODE_SMELL,BUG",SORT,"updatedAt",ASCENDING,"false");
  assertThat(result.getKey()).isEqualTo("ruleKey");
  assertThat(result.getActivation()).isTrue();
  assertThat(result.getActiveSeverities()).containsOnly(MINOR,MAJOR);
  assertThat(result.isAscendingSort()).isFalse();
  assertThat(result.getAvailableSinceLong()).isNotNull();
  assertThat(result.getInheritance()).containsOnly(INHERITED,OVERRIDES);
  assertThat(result.isTemplate()).isTrue();
  assertThat(result.getLanguages()).containsOnly("java","js");
  assertThat(result.getQueryText()).isEqualTo("S001");
  assertThat(result.getQProfileKey()).isEqualTo("sonar-way");
  assertThat(result.getRepositories()).containsOnly("pmd","checkstyle");
  assertThat(result.getRuleKey()).isNull();
  assertThat(result.getSeverities()).containsOnly(MINOR,CRITICAL);
  assertThat(result.getStatuses()).containsOnly(DEPRECATED,READY);
  assertThat(result.getTags()).containsOnly("tag1","tag2");
  assertThat(result.templateKey()).isEqualTo("architectural");
  assertThat(result.getTypes()).containsOnly(BUG,CODE_SMELL);
  assertThat(result.getSortField()).isEqualTo("updatedAt");
}
