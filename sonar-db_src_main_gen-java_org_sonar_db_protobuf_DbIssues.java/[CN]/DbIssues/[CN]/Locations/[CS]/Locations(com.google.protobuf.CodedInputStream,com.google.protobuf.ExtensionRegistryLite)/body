{
  initFields();
  int mutable_bitField0_=0;
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder();
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 10:
{
    org.sonar.db.protobuf.DbIssues.Location.Builder subBuilder=null;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      subBuilder=primary_.toBuilder();
    }
    primary_=input.readMessage(org.sonar.db.protobuf.DbIssues.Location.PARSER,extensionRegistry);
    if (subBuilder != null) {
      subBuilder.mergeFrom(primary_);
      primary_=subBuilder.buildPartial();
    }
    bitField0_|=0x00000001;
    break;
  }
case 18:
{
  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
    secondary_=new java.util.ArrayList<org.sonar.db.protobuf.DbIssues.Location>();
    mutable_bitField0_|=0x00000002;
  }
  secondary_.add(input.readMessage(org.sonar.db.protobuf.DbIssues.Location.PARSER,extensionRegistry));
  break;
}
case 26:
{
if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
  executionFlow_=new java.util.ArrayList<org.sonar.db.protobuf.DbIssues.ExecutionFlow>();
  mutable_bitField0_|=0x00000004;
}
executionFlow_.add(input.readMessage(org.sonar.db.protobuf.DbIssues.ExecutionFlow.PARSER,extensionRegistry));
break;
}
}
}
}
 catch (com.google.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
secondary_=java.util.Collections.unmodifiableList(secondary_);
}
if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
executionFlow_=java.util.Collections.unmodifiableList(executionFlow_);
}
this.unknownFields=unknownFields.build();
makeExtensionsImmutable();
}
}
