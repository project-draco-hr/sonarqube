{
  RuleActivationContext context=contextFactory.create(activation.getKey(),dbSession);
  List<ActiveRuleChange> changes=Lists.newArrayList();
  ActiveRuleChange change;
  if (context.activeRule() == null) {
    change=new ActiveRuleChange(ActiveRuleChange.Type.ACTIVATED,activation.getKey());
    if (activation.isCascade() || context.isSameAsParent(activation)) {
      change.setInheritance(ActiveRule.Inheritance.INHERITED);
    }
  }
 else {
    change=new ActiveRuleChange(ActiveRuleChange.Type.UPDATED,activation.getKey());
    if (activation.isCascade() && context.activeRule().doesOverride()) {
      return changes;
    }
    if (!activation.isCascade() && context.parentProfile() != null) {
      change.setInheritance(context.isSameAsParent(activation) ? ActiveRule.Inheritance.INHERITED : ActiveRule.Inheritance.OVERRIDES);
    }
  }
  change.setSeverity(StringUtils.defaultIfEmpty(activation.getSeverity(),context.defaultSeverity()));
  for (  RuleParamDto ruleParamDto : context.ruleParams()) {
    String value=StringUtils.defaultIfEmpty(activation.getParameters().get(ruleParamDto.getName()),context.defaultParam(ruleParamDto.getName()));
    verifyParam(ruleParamDto,value);
    change.setParameter(ruleParamDto.getName(),StringUtils.defaultIfEmpty(value,ruleParamDto.getDefaultValue()));
  }
  changes.add(change);
  persist(change,context,dbSession);
  changes.addAll(cascadeActivation(dbSession,activation));
  if (!changes.isEmpty()) {
    log.write(dbSession,changes);
    dbSession.commit();
    previewCache.reportGlobalModification();
  }
  return changes;
}
