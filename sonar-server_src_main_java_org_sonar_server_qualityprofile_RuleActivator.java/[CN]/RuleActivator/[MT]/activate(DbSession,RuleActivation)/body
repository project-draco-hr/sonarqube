{
  RuleActivatorContext context=contextFactory.create(activation.getKey(),dbSession);
  context.verifyForActivation();
  List<ActiveRuleChange> changes=Lists.newArrayList();
  ActiveRuleChange change;
  boolean stopPropagation=false;
  if (context.activeRule() == null) {
    change=ActiveRuleChange.createFor(ActiveRuleChange.Type.ACTIVATED,activation.getKey());
    if (activation.isCascade() || context.isSameAsParent(activation)) {
      change.setInheritance(ActiveRule.Inheritance.INHERITED);
    }
    applySeverityAndParamToChange(activation,context,change);
  }
 else {
    if (activation.isCascade() && context.activeRule().doesOverride()) {
      return changes;
    }
    change=ActiveRuleChange.createFor(ActiveRuleChange.Type.UPDATED,activation.getKey());
    if (activation.isCascade() && context.activeRule().getInheritance() == null) {
      change.setInheritance(ActiveRule.Inheritance.OVERRIDES);
      change.setSeverity(context.activeRule().getSeverityString());
      change.setParameters(context.activeRuleParamsAsStringMap());
      stopPropagation=true;
    }
 else {
      applySeverityAndParamToChange(activation,context,change);
      if (!activation.isCascade() && context.parentProfile() != null) {
        change.setInheritance(context.isSameAsParent(activation) ? ActiveRule.Inheritance.INHERITED : ActiveRule.Inheritance.OVERRIDES);
      }
    }
  }
  changes.add(change);
  persist(change,context,dbSession);
  if (!stopPropagation) {
    changes.addAll(cascadeActivation(dbSession,activation));
  }
  if (!changes.isEmpty()) {
    log.write(dbSession,Log.Type.ACTIVE_RULE,changes);
    dbSession.commit();
    previewCache.reportGlobalModification();
  }
  return changes;
}
