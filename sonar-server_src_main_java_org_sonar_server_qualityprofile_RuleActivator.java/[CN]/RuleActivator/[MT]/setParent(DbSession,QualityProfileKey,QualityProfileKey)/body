{
  QualityProfileDto profile=db.qualityProfileDao().getNonNullByKey(dbSession,key);
  if (parentKey == null) {
    removeParent(dbSession,profile);
  }
 else   if (profile.getParentKey() == null || !profile.getParentKey().equals(parentKey)) {
    QualityProfileDto parentProfile=db.qualityProfileDao().getNonNullByKey(dbSession,parentKey);
    if (isDescendant(dbSession,profile,parentProfile)) {
      throw new BadRequestException(String.format("Descendant profile '%s' can not be selected as parent of '%s'",parentKey,key));
    }
    removeParent(dbSession,profile);
    profile.setParent(parentKey.name());
    db.qualityProfileDao().update(dbSession,profile);
    for (    ActiveRuleDto parentActiveRule : db.activeRuleDao().findByProfileKey(dbSession,parentKey)) {
      RuleActivation activation=new RuleActivation(ActiveRuleKey.of(key,parentActiveRule.getKey().ruleKey()));
      activate(dbSession,activation);
    }
  }
}
