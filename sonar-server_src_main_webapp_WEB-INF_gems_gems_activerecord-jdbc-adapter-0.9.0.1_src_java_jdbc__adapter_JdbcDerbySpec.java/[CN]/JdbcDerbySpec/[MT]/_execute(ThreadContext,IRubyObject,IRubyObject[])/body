{
  Ruby runtime=recv.getRuntime();
  try {
    IRubyObject conn=rubyApi.getInstanceVariable(recv,"@connection");
    String sql=args[0].toString().trim().toLowerCase();
    if (sql.charAt(0) == '(') {
      sql=sql.substring(1).trim();
    }
    if (sql.startsWith("insert")) {
      return JdbcAdapterInternalService.execute_insert(conn,args[0]);
    }
 else     if (sql.startsWith("select") || sql.startsWith("show")) {
      IRubyObject offset=rubyApi.getInstanceVariable(recv,"@offset");
      if (offset == null || offset.isNil()) {
        offset=RubyFixnum.zero(runtime);
      }
      IRubyObject limit=rubyApi.getInstanceVariable(recv,"@limit");
      IRubyObject range;
      IRubyObject max;
      if (limit == null || limit.isNil() || RubyNumeric.fix2int(limit) == -1) {
        range=RubyRange.newRange(runtime,context,offset,runtime.newFixnum(-1),false);
        max=RubyFixnum.zero(runtime);
      }
 else {
        IRubyObject v1=rubyApi.callMethod(offset,"+",limit);
        range=RubyRange.newRange(runtime,context,offset,v1,true);
        max=rubyApi.callMethod(v1,"+",RubyFixnum.one(runtime));
      }
      IRubyObject result=JdbcAdapterInternalService.execute_query(conn,new IRubyObject[]{args[0],max});
      IRubyObject ret=rubyApi.callMethod(result,"[]",range);
      if (ret.isNil()) {
        return runtime.newArray();
      }
 else {
        return ret;
      }
    }
 else {
      return JdbcAdapterInternalService.execute_update(conn,args[0]);
    }
  }
  finally {
    rubyApi.setInstanceVariable(recv,"@limit",runtime.getNil());
    rubyApi.setInstanceVariable(recv,"@offset",runtime.getNil());
  }
}
