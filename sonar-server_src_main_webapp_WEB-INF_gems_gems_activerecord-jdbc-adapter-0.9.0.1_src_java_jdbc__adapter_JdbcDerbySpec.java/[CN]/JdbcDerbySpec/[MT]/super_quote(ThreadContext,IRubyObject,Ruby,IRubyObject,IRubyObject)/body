{
  if (value.respondsTo("quoted_id")) {
    return rubyApi.callMethod(value,"quoted_id");
  }
  IRubyObject type=(col.isNil()) ? col : rubyApi.callMethod(col,"type");
  RubyModule multibyteChars=(RubyModule)((RubyModule)((RubyModule)runtime.getModule("ActiveSupport")).getConstant("Multibyte")).getConstantAt("Chars");
  if (value instanceof RubyString || rubyApi.isKindOf(value,multibyteChars)) {
    RubyString svalue=RubyString.objAsString(context,value);
    if (type == runtime.newSymbol("binary") && col.getType().respondsTo("string_to_binary")) {
      return quote_string_with_surround(runtime,"'",(RubyString)(rubyApi.callMethod(col.getType(),"string_to_binary",svalue)),"'");
    }
 else     if (type == runtime.newSymbol("integer") || type == runtime.newSymbol("float")) {
      return RubyString.objAsString(context,((type == runtime.newSymbol("integer")) ? rubyApi.callMethod(svalue,"to_i") : rubyApi.callMethod(svalue,"to_f")));
    }
 else {
      return quote_string_with_surround(runtime,"'",svalue,"'");
    }
  }
 else   if (value.isNil()) {
    return runtime.newStringShared(NULL);
  }
 else   if (value instanceof RubyBoolean) {
    return (value.isTrue() ? (type == runtime.newSymbol(":integer")) ? runtime.newString("1") : rubyApi.callMethod(recv,"quoted_true") : (type == runtime.newSymbol(":integer")) ? runtime.newString("0") : rubyApi.callMethod(recv,"quoted_false"));
  }
 else   if ((value instanceof RubyFloat) || (value instanceof RubyFixnum) || (value instanceof RubyBignum)) {
    return RubyString.objAsString(context,value);
  }
 else   if (value instanceof RubyBigDecimal) {
    return rubyApi.callMethod(value,"to_s",runtime.newString("F"));
  }
 else   if (rubyApi.isKindOf(value,runtime.getModule("Date"))) {
    return quote_string_with_surround(runtime,"'",RubyString.objAsString(context,value),"'");
  }
 else   if (rubyApi.isKindOf(value,runtime.getModule("Time")) || rubyApi.isKindOf(value,runtime.getModule("DateTime"))) {
    return quote_string_with_surround(runtime,"'",(RubyString)(rubyApi.callMethod(recv,"quoted_date",value)),"'");
  }
 else {
    return quote_string_with_surround(runtime,"'",(RubyString)(rubyApi.callMethod(value,"to_yaml")),"'");
  }
}
