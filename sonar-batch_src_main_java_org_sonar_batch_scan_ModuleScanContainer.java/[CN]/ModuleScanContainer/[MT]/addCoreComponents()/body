{
  ProjectDefinition moduleDefinition=getComponentByType(ProjectTree.class).getProjectDefinition(module);
  add(moduleDefinition,module,ModuleSettings.class);
  ModuleSettings moduleSettings=getComponentByType(ModuleSettings.class);
  module.setSettings(moduleSettings);
  if (!sensorMode) {
    add(DefaultPhaseExecutor.class);
  }
 else {
    add(PreviewPhaseExecutor.class);
  }
  add(EventBus.class,PhasesTimeProfiler.class,MavenPluginsConfigurator.class,PostJobsExecutor.class,SensorsExecutor.class,InitializersExecutor.class,ProjectInitializer.class,PublishReportJob.class,ComponentsPublisher.class,IssuesPublisher.class,moduleDefinition.getContainerExtensions(),ModuleInputFileCache.class,FileExclusions.class,ExclusionFilters.class,DeprecatedFileFilters.class,InputFileBuilderFactory.class,StatusDetectionFactory.class,LanguageDetectionFactory.class,PreviousFileHashLoader.class,FileIndexer.class,ComponentIndexer.class,LanguageVerifier.class,FileSystemLogger.class,DefaultProjectClasspath.class,DefaultModuleFileSystem.class,ModuleFileSystemInitializer.class,ProjectFileSystemAdapter.class,QProfileVerifier.class,AnalyzerOptimizer.class,DefaultSensorContext.class,SensorContextAdapter.class,BatchExtensionDictionnary.class,DefaultTimeMachine.class,IssueFilters.class,MeasurementFilters.class,ResourceFilters.class,ModuleQProfiles.class,new ActiveRulesProvider(),new RulesProfileProvider(),QProfileSensor.class,QProfileDecorator.class,CheckFactory.class,JsonReport.class,IssuableFactory.class,ModuleIssues.class,org.sonar.api.issue.NoSonarFilter.class,IssueInclusionPatternInitializer.class,IssueExclusionPatternInitializer.class,IssueExclusionsRegexpScanner.class,IssueExclusionsLoader.class,EnforceIssuesFilter.class,IgnoreIssuesFilter.class,ScanPerspectives.class);
}
