{
  ComponentDto project=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY);
  ComponentDto module=ComponentTesting.newModuleDto("BCDE",project).setKey(MODULE_KEY);
  ComponentDto file=ComponentTesting.newFileDto(module,"CDEF").setKey(FILE_KEY).setPath(null);
  db.getDbClient().componentDao().insert(db.getSession(),project,module,file);
  db.getSession().commit();
  indexIssues(IssueTesting.newDoc("EFGH",file).setRuleKey("squid:AvoidCycle").setSeverity("BLOCKER").setStatus("RESOLVED").setResolution(null).setManualSeverity(false).setMessage(null).setLine(null).setChecksum(null).setAssignee(null));
  userSessionRule.login("henry").setGlobalPermissions(GlobalPermissions.PREVIEW_EXECUTION);
  WsTester.TestRequest request=tester.newGetRequest("scanner","issues").setParam("key",PROJECT_KEY);
  ServerIssue serverIssue=ServerIssue.parseDelimitedFrom(new ByteArrayInputStream(request.execute().output()));
  assertThat(serverIssue.getKey()).isEqualTo("EFGH");
  assertThat(serverIssue.getModuleKey()).isEqualTo(MODULE_KEY);
  assertThat(serverIssue.hasPath()).isFalse();
  assertThat(serverIssue.getRuleRepository()).isEqualTo("squid");
  assertThat(serverIssue.getRuleKey()).isEqualTo("AvoidCycle");
  assertThat(serverIssue.hasLine()).isFalse();
  assertThat(serverIssue.hasMsg()).isFalse();
  assertThat(serverIssue.hasResolution()).isFalse();
  assertThat(serverIssue.getStatus()).isEqualTo("RESOLVED");
  assertThat(serverIssue.getSeverity()).isEqualTo(Severity.BLOCKER);
  assertThat(serverIssue.getManualSeverity()).isFalse();
  assertThat(serverIssue.hasChecksum()).isFalse();
  assertThat(serverIssue.hasAssigneeLogin()).isFalse();
}
