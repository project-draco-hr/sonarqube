{
  if (!ResourceUtils.isPersistable(resource)) {
    return;
  }
  ReviewQuery openReviewQuery=ReviewQuery.create().setResourceId(resource.getId()).addStatus(ReviewDto.STATUS_OPEN).addStatus(ReviewDto.STATUS_REOPENED);
  Double resourceOpenReviewsCount=reviewDao.countByQuery(openReviewQuery).doubleValue();
  Double totalOpenReviewsCount=resourceOpenReviewsCount + getChildrenSum(resource,context,CoreMetrics.ACTIVE_REVIEWS);
  context.saveMeasure(CoreMetrics.ACTIVE_REVIEWS,totalOpenReviewsCount);
  ReviewQuery unassignedReviewQuery=ReviewQuery.copy(openReviewQuery).setNoAssignee();
  Double ressourceUnassignedReviewsCount=reviewDao.countByQuery(unassignedReviewQuery).doubleValue();
  Double totalUnassignedReviewsCount=ressourceUnassignedReviewsCount + getChildrenSum(resource,context,CoreMetrics.UNASSIGNED_REVIEWS);
  context.saveMeasure(CoreMetrics.UNASSIGNED_REVIEWS,totalUnassignedReviewsCount);
  ReviewQuery plannedReviewQuery=ReviewQuery.copy(openReviewQuery).setPlanned();
  Double resourcePlannedReviewsCount=reviewDao.countByQuery(plannedReviewQuery).doubleValue();
  Double childrenUnplannedReviewsCount=getChildrenSum(resource,context,CoreMetrics.UNPLANNED_REVIEWS);
  context.saveMeasure(CoreMetrics.UNPLANNED_REVIEWS,(resourceOpenReviewsCount - resourcePlannedReviewsCount) + childrenUnplannedReviewsCount);
  ReviewQuery falsePositiveReviewQuery=ReviewQuery.create().setResourceId(resource.getId()).addResolution(ReviewDto.RESOLUTION_FALSE_POSITIVE);
  Double resourceFalsePositiveReviewsCount=reviewDao.countByQuery(falsePositiveReviewQuery).doubleValue();
  Double totalFalsePositiveReviewsCount=resourceFalsePositiveReviewsCount + getChildrenSum(resource,context,CoreMetrics.FALSE_POSITIVE_REVIEWS);
  context.saveMeasure(CoreMetrics.FALSE_POSITIVE_REVIEWS,totalFalsePositiveReviewsCount);
  Double violationsCount=MeasureUtils.getValue(context.getMeasure(CoreMetrics.VIOLATIONS),0.0);
  context.saveMeasure(CoreMetrics.VIOLATIONS_WITHOUT_REVIEW,violationsCount - totalOpenReviewsCount);
}
