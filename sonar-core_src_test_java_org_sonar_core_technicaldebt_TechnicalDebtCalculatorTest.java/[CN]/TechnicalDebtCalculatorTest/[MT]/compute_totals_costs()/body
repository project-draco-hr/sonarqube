{
  TechnicalDebtRequirement requirement1=mock(TechnicalDebtRequirement.class);
  TechnicalDebtRequirement requirement2=mock(TechnicalDebtRequirement.class);
  Violation violation1=buildViolation("rule1","repo1",NOW);
  Violation violation2=buildViolation("rule1","repo1",NOW);
  Violation violation3=buildViolation("rule2","repo2",YESTERDAY);
  Violation violation4=buildViolation("rule2","repo2",LAST_MONTH);
  List<Violation> violations=Lists.newArrayList(violation1,violation2,violation3,violation4);
  when(technicalDebtModel.getRequirementByRule("repo1","rule1")).thenReturn(requirement1);
  when(technicalDebtModel.getRequirementByRule("repo2","rule2")).thenReturn(requirement2);
  when(technicalDebtModel.getAllRequirements()).thenReturn(Lists.newArrayList(requirement1,requirement2));
  when(functions.costInHours(any(TechnicalDebtRequirement.class),any(Collection.class))).thenReturn(1.0);
  DecoratorContext context=mock(DecoratorContext.class);
  when(context.getViolations()).thenReturn(violations);
  when(context.getChildrenMeasures(any(MeasuresFilter.class))).thenReturn(Collections.EMPTY_LIST);
  remediationCostCalculator.compute(context);
  assertThat(remediationCostCalculator.getTotal()).isEqualTo(2.0);
  assertThat(remediationCostCalculator.getRequirementCosts().get(requirement1)).isEqualTo(1.0);
  assertThat(remediationCostCalculator.getRequirementCosts().get(requirement2)).isEqualTo(1.0);
}
