{
  issuesLoader=mock(DefaultServerIssuesLoader.class);
  userRepositoryLoader=mock(UserRepositoryLoader.class);
  qualityProfileLoader=mock(DefaultQualityProfileLoader.class);
  activeRulesLoader=mock(DefaultActiveRulesLoader.class);
  projectSettingsLoader=mock(DefaultProjectSettingsLoader.class);
  QProfile pf=new QProfile("profile","profile","lang",new Date(1000));
  ActiveRule ar=mock(ActiveRule.class);
  ProjectSettingsRepo repo=mock(ProjectSettingsRepo.class);
  when(qualityProfileLoader.load(PROJECT_KEY,null)).thenReturn(ImmutableList.of(pf));
  when(activeRulesLoader.load(ImmutableList.of("profile"),PROJECT_KEY)).thenReturn(ImmutableList.of(ar));
  when(repo.lastAnalysisDate()).thenReturn(lastAnalysisDate);
  when(projectSettingsLoader.load(anyString(),any(MutableBoolean.class))).thenReturn(repo);
  return new ProjectCacheSynchronizer(qualityProfileLoader,projectSettingsLoader,activeRulesLoader,issuesLoader,userRepositoryLoader,cacheStatus);
}
