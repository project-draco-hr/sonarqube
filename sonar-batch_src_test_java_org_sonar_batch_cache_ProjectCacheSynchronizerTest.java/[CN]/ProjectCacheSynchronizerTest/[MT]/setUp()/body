{
  MockitoAnnotations.initMocks(this);
  String batchProject=getResourceAsString("batch_project.json");
  ByteSource issues=getResourceAsByteSource("batch_issues.protobuf");
  String lineHashes2=getResourceAsString("api_sources_hash_GitScmProvider.text");
  String lineHashes1=getResourceAsString("api_sources_hash_JGitBlameCommand.text");
  when(ws.loadString(BATCH_PROJECT)).thenReturn(new WSLoaderResult<>(batchProject,false));
  when(ws.loadSource(ISSUES)).thenReturn(new WSLoaderResult<>(issues,false));
  when(ws.loadString(LINE_HASHES1)).thenReturn(new WSLoaderResult<>(lineHashes1,false));
  when(ws.loadString(LINE_HASHES2)).thenReturn(new WSLoaderResult<>(lineHashes2,false));
  when(analysisMode.isIssues()).thenReturn(true);
  when(project.getKeyWithBranch()).thenReturn("org.codehaus.sonar-plugins:sonar-scm-git-plugin");
  when(projectReactor.getRoot()).thenReturn(project);
  when(properties.properties()).thenReturn(new HashMap<String,String>());
  projectRepositoryLoader=new DefaultProjectRepositoriesLoader(ws,analysisMode);
  issuesLoader=new DefaultServerIssuesLoader(ws);
  lineHashesLoader=new DefaultServerLineHashesLoader(ws);
  userRepositoryLoader=new UserRepositoryLoader(ws);
}
