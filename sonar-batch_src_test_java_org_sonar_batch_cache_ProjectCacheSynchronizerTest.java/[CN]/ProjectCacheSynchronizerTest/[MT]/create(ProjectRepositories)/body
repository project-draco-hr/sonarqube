{
  if (projectRepositories == null) {
    projectRepositoryLoader=new DefaultProjectRepositoriesLoader(ws,analysisMode);
  }
 else {
    projectRepositoryLoader=mock(ProjectRepositoriesLoader.class);
    when(projectRepositoryLoader.load(anyString(),anyString(),any(MutableBoolean.class))).thenReturn(projectRepositories);
  }
  ProjectReactor reactor=mock(ProjectReactor.class);
  ProjectDefinition root=mock(ProjectDefinition.class);
  when(root.getKeyWithBranch()).thenReturn(PROJECT_KEY);
  when(reactor.getRoot()).thenReturn(root);
  ProjectRepositoriesFactory projectRepositoriesFactory=new DefaultProjectRepositoriesFactory(reactor,analysisMode,projectRepositoryLoader,properties);
  issuesLoader=new DefaultServerIssuesLoader(ws);
  userRepositoryLoader=new UserRepositoryLoader(ws);
  qualityProfileLoader=new DefaultQualityProfileLoader(projectRepositoriesFactory);
  activeRulesLoader=new DefaultActiveRulesLoader(projectRepositoriesFactory);
  projectSettingsLoader=new DefaultProjectSettingsLoader(projectRepositoriesFactory);
  return new ProjectCacheSynchronizer(qualityProfileLoader,projectSettingsLoader,activeRulesLoader,issuesLoader,userRepositoryLoader,cacheStatus);
}
