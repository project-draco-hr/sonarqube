{
  if (!periodsHolder.getPeriods().isEmpty()) {
    Double[] unresolvedVariations=new Double[PeriodsHolder.MAX_NUMBER_OF_PERIODS];
    for (    Period period : periodsHolder.getPeriods()) {
      unresolvedVariations[period.getIndex() - 1]=(double)currentCounters.counterForPeriod(period.getIndex()).unresolved;
    }
    measureRepository.add(component,metricRepository.getByKey(NEW_VIOLATIONS_KEY),Measure.newMeasureBuilder().setVariations(new MeasureVariations(unresolvedVariations)).createNoValue());
    for (    Map.Entry<String,String> entry : SEVERITY_TO_NEW_METRIC_KEY.entrySet()) {
      String severity=entry.getKey();
      String metricKey=entry.getValue();
      Double[] variations=new Double[PeriodsHolder.MAX_NUMBER_OF_PERIODS];
      for (      Period period : periodsHolder.getPeriods()) {
        Multiset<String> bag=currentCounters.counterForPeriod(period.getIndex()).severityBag;
        variations[period.getIndex() - 1]=(double)bag.count(severity);
      }
      Metric metric=metricRepository.getByKey(metricKey);
      measureRepository.add(component,metric,Measure.newMeasureBuilder().setVariations(new MeasureVariations(variations)).createNoValue());
    }
    for (    Map.Entry<IssueType,String> entry : TYPE_TO_NEW_METRIC_KEY.entrySet()) {
      IssueType type=entry.getKey();
      String metricKey=entry.getValue();
      Double[] variations=new Double[PeriodsHolder.MAX_NUMBER_OF_PERIODS];
      for (      Period period : periodsHolder.getPeriods()) {
        Multiset<IssueType> bag=currentCounters.counterForPeriod(period.getIndex()).typeBag;
        variations[period.getIndex() - 1]=(double)bag.count(type);
      }
      Metric metric=metricRepository.getByKey(metricKey);
      measureRepository.add(component,metric,Measure.newMeasureBuilder().setVariations(new MeasureVariations(variations)).createNoValue());
    }
  }
}
