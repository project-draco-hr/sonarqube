{
  Map<String,Object> map=newHashMap();
  map.put("issues",newArrayList("ABCDE1234"));
  map.put("severities",newArrayList("MAJOR","MINOR"));
  map.put("statuses",newArrayList("CLOSED"));
  map.put("resolutions",newArrayList("FALSE-POSITIVE"));
  map.put("resolved",true);
  ArrayList<String> componentKeys=newArrayList("org.apache");
  map.put("components",componentKeys);
  ArrayList<String> moduleUuids=newArrayList("BCDE");
  map.put("moduleUuids",moduleUuids);
  map.put("directories",newArrayList("/src/main/java/example"));
  ArrayList<String> fileUuids=newArrayList("CDEF");
  map.put("fileUuids",fileUuids);
  map.put("reporters",newArrayList("marilyn"));
  map.put("assignees",newArrayList("joanna"));
  map.put("languages",newArrayList("xoo"));
  map.put("tags",newArrayList("tag1","tag2"));
  map.put("onComponentOnly",true);
  map.put("assigned",true);
  map.put("planned",true);
  map.put("hideRules",true);
  map.put("createdAfter","2013-04-16T09:08:24+0200");
  map.put("createdBefore","2013-04-17T09:08:24+0200");
  map.put("rules","squid:AvoidCycle,findbugs:NullReference");
  map.put("sort","CREATION_DATE");
  map.put("asc",true);
  when(componentService.componentUuids(eq(session),Matchers.anyCollection(),eq(true))).thenAnswer(new Answer<Collection<String>>(){
    @Override public Collection<String> answer(    InvocationOnMock invocation) throws Throwable {
      Collection<String> components=(Collection<String>)invocation.getArguments()[1];
      if (components == null) {
        return newArrayList();
      }
      if (components.contains("org.apache")) {
        return newArrayList("ABCD");
      }
      return newArrayList();
    }
  }
);
  when(componentService.getDistinctQualifiers(eq(session),Matchers.anyCollection())).thenReturn(Sets.newHashSet(Qualifiers.PROJECT));
  IssueQuery query=issueQueryService.createFromMap(map);
  assertThat(query.issueKeys()).containsOnly("ABCDE1234");
  assertThat(query.severities()).containsOnly("MAJOR","MINOR");
  assertThat(query.statuses()).containsOnly("CLOSED");
  assertThat(query.resolutions()).containsOnly("FALSE-POSITIVE");
  assertThat(query.resolved()).isTrue();
  assertThat(query.projectUuids()).containsOnly("ABCD");
  assertThat(query.moduleUuids()).containsOnly("BCDE");
  assertThat(query.fileUuids()).containsOnly("CDEF");
  assertThat(query.reporters()).containsOnly("marilyn");
  assertThat(query.assignees()).containsOnly("joanna");
  assertThat(query.languages()).containsOnly("xoo");
  assertThat(query.tags()).containsOnly("tag1","tag2");
  assertThat(query.onComponentOnly()).isTrue();
  assertThat(query.assigned()).isTrue();
  assertThat(query.planned()).isTrue();
  assertThat(query.hideRules()).isTrue();
  assertThat(query.rules()).hasSize(2);
  assertThat(query.directories()).containsOnly("/src/main/java/example");
  assertThat(query.createdAfter()).isEqualTo(DateUtils.parseDateTime("2013-04-16T09:08:24+0200"));
  assertThat(query.createdBefore()).isEqualTo(DateUtils.parseDateTime("2013-04-17T09:08:24+0200"));
  assertThat(query.sort()).isEqualTo(IssueQuery.SORT_BY_CREATION_DATE);
  assertThat(query.asc()).isTrue();
}
