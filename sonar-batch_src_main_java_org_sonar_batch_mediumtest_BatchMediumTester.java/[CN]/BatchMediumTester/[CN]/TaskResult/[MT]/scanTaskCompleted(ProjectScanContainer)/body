{
  LOG.info("Store analysis results in memory for later assertions in medium test");
  for (  Issue issue : container.getComponentByType(AnalyzerIssueCache.class).all()) {
    issues.add(issue);
  }
  for (  Measure<?> measure : container.getComponentByType(AnalyzerMeasureCache.class).all()) {
    measures.add(measure);
  }
  InputPathCache inputFileCache=container.getComponentByType(InputPathCache.class);
  for (  InputPath inputPath : inputFileCache.all()) {
    if (inputPath instanceof InputFile) {
      inputFiles.add((InputFile)inputPath);
    }
 else {
      inputDirs.add((InputDir)inputPath);
    }
  }
  ComponentDataCache componentDataCache=container.getComponentByType(ComponentDataCache.class);
  for (  InputFile file : inputFiles) {
    SyntaxHighlightingData highlighting=componentDataCache.getData(((DefaultInputFile)file).key(),SnapshotDataTypes.SYNTAX_HIGHLIGHTING);
    if (highlighting != null) {
      highlightingPerFile.put(file,highlighting);
    }
    SymbolData symbolTable=componentDataCache.getData(((DefaultInputFile)file).key(),SnapshotDataTypes.SYMBOL_HIGHLIGHTING);
    if (symbolTable != null) {
      symbolTablePerFile.put(file,symbolTable);
    }
  }
  DuplicationCache duplicationCache=container.getComponentByType(DuplicationCache.class);
  for (  Entry<ArrayList<DuplicationGroup>> entry : duplicationCache.entries()) {
    String effectiveKey=entry.key()[0].toString();
    duplications.put(effectiveKey,entry.value());
  }
}
