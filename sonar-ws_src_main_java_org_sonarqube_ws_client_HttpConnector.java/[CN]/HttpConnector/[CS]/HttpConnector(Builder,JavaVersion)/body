{
  this.baseUrl=HttpUrl.parse(builder.url.endsWith("/") ? builder.url : format("%s/",builder.url));
  this.userAgent=builder.userAgent;
  if (isNullOrEmpty(builder.login)) {
    this.credentials=null;
  }
 else {
    this.credentials=Credentials.basic(builder.login,nullToEmpty(builder.password));
  }
  if (builder.proxy != null) {
    this.okHttpClient.setProxy(builder.proxy);
  }
  if (isNullOrEmpty(builder.proxyLogin)) {
    this.proxyCredentials=null;
  }
 else {
    this.proxyCredentials=Credentials.basic(builder.proxyLogin,nullToEmpty(builder.proxyPassword));
  }
  this.okHttpClient.setConnectTimeout(builder.connectTimeoutMs,TimeUnit.MILLISECONDS);
  this.okHttpClient.setReadTimeout(builder.readTimeoutMs,TimeUnit.MILLISECONDS);
  ConnectionSpec tls=new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS).allEnabledTlsVersions().allEnabledCipherSuites().supportsTlsExtensions(true).build();
  this.okHttpClient.setConnectionSpecs(asList(tls,ConnectionSpec.CLEARTEXT));
  if (javaVersion.isJava7()) {
    try {
      this.okHttpClient.setSslSocketFactory(new Tls12Java7SocketFactory((SSLSocketFactory)SSLSocketFactory.getDefault()));
    }
 catch (    Exception e) {
      throw new IllegalStateException("Fail to init TLS context",e);
    }
  }
}
