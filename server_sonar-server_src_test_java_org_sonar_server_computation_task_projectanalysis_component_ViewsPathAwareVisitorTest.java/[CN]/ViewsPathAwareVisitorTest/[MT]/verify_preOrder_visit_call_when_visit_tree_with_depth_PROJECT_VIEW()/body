{
  CallRecorderPathAwareVisitor underTest=new CallRecorderPathAwareVisitor(CrawlerDepthLimit.PROJECT_VIEW,PRE_ORDER);
  new PathAwareCrawler<>(underTest).visit(SOME_TREE_ROOT);
  Iterator<PathAwareCallRecord> expected=of(viewsCallRecord("visitAny",1,null,of(1)),viewsCallRecord("visitView",1,null,of(1)),viewsCallRecord("visitAny",11,1,of(11,1)),viewsCallRecord("visitSubView",11,1,of(11,1)),viewsCallRecord("visitAny",111,11,of(111,11,1)),viewsCallRecord("visitSubView",111,11,of(111,11,1)),viewsCallRecord("visitAny",1111,111,of(1111,111,11,1)),viewsCallRecord("visitProjectView",1111,111,of(1111,111,11,1)),viewsCallRecord("visitAny",1112,111,of(1112,111,11,1)),viewsCallRecord("visitProjectView",1112,111,of(1112,111,11,1)),viewsCallRecord("visitAny",112,11,of(112,11,1)),viewsCallRecord("visitSubView",112,11,of(112,11,1)),viewsCallRecord("visitAny",1121,112,of(1121,112,11,1)),viewsCallRecord("visitProjectView",1121,112,of(1121,112,11,1)),viewsCallRecord("visitAny",12,1,of(12,1)),viewsCallRecord("visitSubView",12,1,of(12,1)),viewsCallRecord("visitAny",121,12,of(121,12,1)),viewsCallRecord("visitSubView",121,12,of(121,12,1)),viewsCallRecord("visitAny",1211,121,of(1211,121,12,1)),viewsCallRecord("visitSubView",1211,121,of(1211,121,12,1)),viewsCallRecord("visitAny",12111,1211,of(12111,1211,121,12,1)),viewsCallRecord("visitProjectView",12111,1211,of(12111,1211,121,12,1))).iterator();
  verifyCallRecords(expected,underTest.callsRecords.iterator());
}
