{
  String dataDir=props.of("sonar.path.data");
  Integer port=props.intOf(ES_PORT_PROPERTY);
  String clusterName=props.of(ES_CLUSTER_PROPERTY,DEFAULT_CLUSTER_NAME);
  LoggerFactory.getLogger(ElasticSearch.class).info("Starting ES[{}] on port: {}",clusterName,port);
  ImmutableSettings.Builder esSettings=ImmutableSettings.settingsBuilder().put("es.foreground","yes").put("discovery.zen.ping.multicast.enabled","false").put("index.merge.policy.max_merge_at_once","200").put("index.merge.policy.segments_per_tier","200").put("index.number_of_shards","1").put("index.number_of_replicas","0").put("index.store.type","mmapfs").put("indices.store.throttle.type","merge").put("indices.store.throttle.max_bytes_per_sec","200mb").put("script.default_lang","native").put("script.native." + ListUpdate.NAME + ".type",ListUpdate.UpdateListScriptFactory.class.getName()).put("cluster.name",clusterName).put("node.name","sonarqube-" + System.currentTimeMillis()).put("node.data",true).put("node.local",false).put("transport.tcp.port",port).put("path.data",new File(dataDir,"es").getAbsolutePath());
  if (props.booleanOf(ES_DEBUG_PROPERTY,false)) {
    esSettings.put("http.enabled",true).put("http.port",9200);
  }
 else {
    esSettings.put("http.enabled",false);
  }
  node=NodeBuilder.nodeBuilder().settings(esSettings).build().start();
  while (node != null && !node.isClosed()) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      node.close();
    }
  }
  terminate();
}
