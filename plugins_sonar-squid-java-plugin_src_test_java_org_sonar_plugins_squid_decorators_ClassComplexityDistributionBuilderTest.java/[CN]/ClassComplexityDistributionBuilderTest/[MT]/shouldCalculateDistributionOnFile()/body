{
  List<DecoratorContext> children=Arrays.asList(newClassChild("One",2.0),newClassChild("Two",1.0),newClassChild("Zero complexity",0.0),newClassChild("Three",8.0),newClassChild("No complexity",null));
  DecoratorContext context=mock(DecoratorContext.class);
  when(context.getMeasure(CoreMetrics.COMPLEXITY)).thenReturn(new Measure(CoreMetrics.COMPLEXITY,20.0));
  when(context.getChildren()).thenReturn(children);
  ClassComplexityDistributionBuilder builder=new ClassComplexityDistributionBuilder();
  builder.decorate(JavaFile.fromRelativePath("org/foo/MyFile.java",false),context);
  verify(context).saveMeasure(argThat(new BaseMatcher<Measure>(){
    public boolean matches(    Object o){
      Measure measure=(Measure)o;
      return measure.getMetric().equals(CoreMetrics.CLASS_COMPLEXITY_DISTRIBUTION) && measure.getData().equals("0=3;5=1;10=0;20=0;30=0;60=0;90=0");
    }
    public void describeTo(    Description description){
    }
  }
));
}
