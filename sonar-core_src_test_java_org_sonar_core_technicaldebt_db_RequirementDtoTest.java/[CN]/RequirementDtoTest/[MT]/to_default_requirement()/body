{
  RuleDto ruleDto=new RuleDto();
  ruleDto.setRepositoryKey("squid");
  ruleDto.setRuleKey("AvoidCycle");
  CharacteristicDto characteristicDto=new CharacteristicDto();
  CharacteristicDto rootCharacteristicDto=new CharacteristicDto();
  RequirementPropertyDto requirementPropertyDto1=new RequirementPropertyDto().setKey("remediationFactor").setValue(30d).setTextValue("mn");
  RequirementPropertyDto requirementPropertyDto2=new RequirementPropertyDto().setKey("remediationFunction").setTextValue("linear");
  RequirementDto dto=new RequirementDto().setId(1L).setRule(ruleDto).setCharacteristic(characteristicDto).setRootCharacteristic(rootCharacteristicDto).setProperties(newArrayList(requirementPropertyDto1,requirementPropertyDto2));
  DefaultRequirement result=dto.toDefaultRequirement();
  assertThat(result).isNotNull();
  assertThat(result.ruleKey()).isNotNull();
  assertThat(result.characteristic()).isNotNull();
  assertThat(result.rootCharacteristic()).isNotNull();
  assertThat(result.function()).isNotNull();
  assertThat(result.factor()).isNotNull();
}
