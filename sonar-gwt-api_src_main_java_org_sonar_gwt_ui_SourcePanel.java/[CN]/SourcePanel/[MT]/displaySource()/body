{
  if (started && source != null) {
    createRowsTable();
    int displayedLines=0;
    SortedMap<Integer,String> lines=source.getLinesById().subMap(offset,offset + source.getLinesById().lastKey() + 1);
    Iterator<Map.Entry<Integer,String>> linesById=lines.entrySet().iterator();
    while (displayedLines < MAX_LINES_BY_BLOCK && linesById.hasNext()) {
      Map.Entry<Integer,String> entry=linesById.next();
      Integer lineIndex=entry.getKey();
      if (shouldDecorateLine(lineIndex)) {
        if (!previousLineIsDecorated && !firstDecoratedLine) {
          setRowHtml(0,"<div class='src' style='background-color: #fff;height: 3em; border-top: 1px dashed silver;border-bottom: 1px dashed silver;'> </div>");
          setRowHtml(1," ");
          setRowHtml(2," ");
          setRowHtml(3,"<div class='src' style='background-color: #fff;height: 3em; border-top: 1px dashed silver;border-bottom: 1px dashed silver;'> </div>");
          currentRow++;
        }
        List<Row> rows=decorateLine(lineIndex,entry.getValue());
        if (rows != null) {
          for (          Row row : rows) {
            setRowHtml(0,row.getColumn1());
            setRowHtml(1,row.getColumn2());
            setRowHtml(2,row.getColumn3());
            setRowHtml(3,row.getColumn4());
            currentRow++;
          }
          previousLineIsDecorated=true;
          firstDecoratedLine=false;
        }
        displayedLines++;
      }
 else {
        previousLineIsDecorated=false;
      }
      offset++;
    }
    if (firstPage) {
      panel.clear();
      panel.add(rowsTable);
      firstPage=false;
    }
    if (offset <= source.getLinesById().lastKey()) {
      showMoreButton();
    }
 else {
      hideMoreButton();
    }
  }
}
