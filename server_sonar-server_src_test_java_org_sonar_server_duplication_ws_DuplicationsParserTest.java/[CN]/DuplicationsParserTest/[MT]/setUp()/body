{
  project1=ComponentTesting.newProjectDto().setId(1L).setName("SonarQube").setLongName("SonarQube").setKey("org.codehaus.sonar:sonar");
  project2=ComponentTesting.newProjectDto().setId(2L);
  String key1="org.codehaus.sonar:sonar-plugin-api:src/main/java/org/sonar/api/utils/command/CommandExecutor.java";
  currentFile=ComponentTesting.newFileDto(project1).setId(10L).setKey(key1).setLongName("CommandExecutor");
  when(componentDao.selectNonNullByKey(session,key1)).thenReturn(currentFile);
  String key2="org.codehaus.sonar:sonar-plugin-api:src/main/java/com/sonar/orchestrator/util/CommandExecutor.java";
  fileOnSameProject=ComponentTesting.newFileDto(project1).setId(11L).setKey(key2).setLongName("CommandExecutor");
  when(componentDao.selectNonNullByKey(session,key2)).thenReturn(fileOnSameProject);
  String key3="com.sonarsource.orchestrator:sonar-orchestrator:src/main/java/com/sonar/orchestrator/util/CommandExecutor.java";
  fileOnDifferentProject=ComponentTesting.newFileDto(project2).setId(12L).setKey(key3).setLongName("CommandExecutor");
  when(componentDao.selectNonNullByKey(session,key3)).thenReturn(fileOnDifferentProject);
  parser=new DuplicationsParser(componentDao);
}
