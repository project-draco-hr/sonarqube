{
  Date createdAt=DateUtils.addDays(new Date(),-5);
  Date updatedAt=DateUtils.addDays(new Date(),-3);
  Date closedAt=DateUtils.addDays(new Date(),-1);
  IssueDto dto=new IssueDto().setKee("100").setRuleId(1).setRuleKey_unit_test_only("squid","AvoidCycle").setComponentKey_unit_test_only("component-key").setResourceId(1).setStatus(Issue.STATUS_CLOSED).setResolution(Issue.RESOLUTION_FALSE_POSITIVE).setEffortToFix(15.0).setLine(6).setSeverity("BLOCKER").setDescription("message").setManualSeverity(true).setReporter("arthur").setAssignee("perceval").setAttributes("key=value").setAuthorLogin("pierre").setIssueCreationDate(createdAt).setIssueUpdateDate(updatedAt).setIssueCloseDate(closedAt);
  DefaultIssue issue=dto.toDefaultIssue();
  assertThat(issue.key()).isEqualTo("100");
  assertThat(issue.ruleKey().toString()).isEqualTo("squid:AvoidCycle");
  assertThat(issue.componentKey()).isEqualTo("component-key");
  assertThat(issue.status()).isEqualTo(Issue.STATUS_CLOSED);
  assertThat(issue.resolution()).isEqualTo(Issue.RESOLUTION_FALSE_POSITIVE);
  assertThat(issue.effortToFix()).isEqualTo(15.0);
  assertThat(issue.line()).isEqualTo(6);
  assertThat(issue.severity()).isEqualTo("BLOCKER");
  assertThat(issue.description()).isEqualTo("message");
  assertThat(issue.manualSeverity()).isTrue();
  assertThat(issue.reporter()).isEqualTo("arthur");
  assertThat(issue.assignee()).isEqualTo("perceval");
  assertThat(issue.attribute("key")).isEqualTo("value");
  assertThat(issue.authorLogin()).isEqualTo("pierre");
  assertThat(issue.creationDate()).isEqualTo(createdAt);
  assertThat(issue.updateDate()).isEqualTo(updatedAt);
  assertThat(issue.closeDate()).isEqualTo(closedAt);
  assertThat(issue.isNew()).isFalse();
}
