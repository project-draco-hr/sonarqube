{
  Answer<Object> answer=new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      Object request=arguments[0];
      Parser<?> parser=arguments.length == 2 ? (Parser<?>)arguments[1] : null;
      if (request instanceof PostRequest) {
        postCalls.add(new PostCall((PostRequest)request,parser));
      }
 else       if (request instanceof GetRequest) {
        getCalls.add(new GetCall((GetRequest)request,parser));
      }
 else {
        rawCalls.add(new RawCall((WsRequest)request));
      }
      return null;
    }
  }
;
  doAnswer(answer).when(this.underTest).call(any(GetRequest.class),any(Parser.class));
  doAnswer(answer).when(this.underTest).call(any(WsRequest.class));
}
