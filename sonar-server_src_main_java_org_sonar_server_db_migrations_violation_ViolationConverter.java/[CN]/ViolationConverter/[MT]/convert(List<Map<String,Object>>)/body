{
  Connection readConnection=null;
  Connection writeConnection=null;
  try {
    readConnection=db.getDataSource().getConnection();
    writeConnection=db.getDataSource().getConnection();
    writeConnection.setAutoCommit(false);
    List<Object[]> allParams=Lists.newArrayList();
    List<Map<String,Object>> allComments=Lists.newArrayList();
    for (    Map<String,Object> row : rows) {
      Long componentId=(Long)row.get(PROJECT_ID);
      if (componentId == null) {
        continue;
      }
      String issueKey=UUID.randomUUID().toString();
      String status, severity, reporter=null;
      boolean manualSeverity;
      Object createdAt=Objects.firstNonNull(row.get(CREATED_AT),ONE_YEAR_AGO);
      Object updatedAt;
      Long reviewId=(Long)row.get(REVIEW_ID);
      if (reviewId == null) {
        status=STATUS_OPEN;
        manualSeverity=false;
        severity=(String)row.get(SEVERITY);
        updatedAt=createdAt;
      }
 else {
        String reviewStatus=(String)row.get(REVIEW_STATUS);
        status=(STATUS_OPEN.equals(reviewStatus) ? STATUS_CONFIRMED : reviewStatus);
        manualSeverity=Objects.firstNonNull((Boolean)row.get(REVIEW_MANUAL_SEVERITY),false);
        severity=(String)row.get(REVIEW_SEVERITY);
        updatedAt=Objects.firstNonNull(row.get(REVIEW_UPDATED_AT),ONE_YEAR_AGO);
        if ((Boolean)row.get(REVIEW_MANUAL_VIOLATION)) {
          reporter=referentials.userLogin((Long)row.get(REVIEW_REPORTER_ID));
        }
        List<Map<String,Object>> comments=new QueryRunner().query(readConnection,ReviewCommentsHandler.SQL + reviewId,new ReviewCommentsHandler());
        for (        Map<String,Object> comment : comments) {
          comment.put(ISSUE_KEY,issueKey);
          allComments.add(comment);
        }
      }
      Object[] params=new Object[20];
      params[0]=issueKey;
      params[1]=componentId;
      params[2]=row.get(ROOT_PROJECT_ID);
      params[3]=row.get(RULE_ID);
      params[4]=severity;
      params[5]=manualSeverity;
      params[6]=row.get(MESSAGE);
      params[7]=row.get(LINE);
      params[8]=row.get(COST);
      params[9]=status;
      params[10]=row.get(REVIEW_RESOLUTION);
      params[11]=row.get(CHECKSUM);
      params[12]=reporter;
      params[13]=referentials.userLogin((Long)row.get(REVIEW_ASSIGNEE_ID));
      params[14]=referentials.actionPlan((Long)row.get(PLAN_ID));
      params[15]=row.get(REVIEW_DATA);
      params[16]=createdAt;
      params[17]=updatedAt;
      params[18]=createdAt;
      params[19]=updatedAt;
      allParams.add(params);
    }
    new QueryRunner().batch(writeConnection,SQL_INSERT_ISSUE,allParams.toArray(new Object[allParams.size()][]));
    writeConnection.commit();
    insertComments(writeConnection,allComments);
    progress.increment(rows.size());
  }
 catch (  SQLException e) {
    throw new IllegalStateException();
  }
 finally {
    DbUtils.closeQuietly(readConnection);
    DbUtils.closeQuietly(writeConnection);
  }
}
