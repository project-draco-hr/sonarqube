{
  DbSession dbSession=dbClient.openSession(false);
  try {
    ComponentDto baseComponent=componentFinder.getByUuidOrKey(dbSession,wsRequest.getBaseComponentId(),wsRequest.getBaseComponentKey(),BASE_COMPONENT_ID_AND_KEY);
    checkPermissions(baseComponent);
    SnapshotDto baseSnapshot=dbClient.snapshotDao().selectLastSnapshotByComponentUuid(dbSession,baseComponent.uuid());
    if (baseSnapshot == null) {
      return ComponentTreeData.builder().setBaseComponent(baseComponent).build();
    }
    Long developerId=searchDeveloperId(dbSession,wsRequest);
    ComponentTreeQuery dbQuery=toComponentTreeQuery(wsRequest,baseSnapshot);
    ComponentDtosAndTotal componentDtosAndTotal=searchComponents(dbSession,dbQuery,wsRequest);
    List<ComponentDtoWithSnapshotId> components=componentDtosAndTotal.componentDtos;
    List<MetricDto> metrics=searchMetrics(dbSession,wsRequest);
    List<WsMeasures.Period> periods=snapshotToWsPeriods(baseSnapshot);
    Table<String,MetricDto,MeasureDto> measuresByComponentUuidAndMetric=searchMeasuresByComponentUuidAndMetric(dbSession,baseComponent,baseSnapshot,components,metrics,periods,developerId);
    components=filterComponents(components,measuresByComponentUuidAndMetric,metrics,wsRequest);
    components=sortComponents(components,wsRequest,metrics,measuresByComponentUuidAndMetric);
    int componentCount=computeComponentCount(componentDtosAndTotal.total,components,componentWithMeasuresOnly(wsRequest));
    components=paginateComponents(components,wsRequest);
    Map<String,ComponentDto> referenceComponentsById=searchReferenceComponentsById(dbSession,components);
    return ComponentTreeData.builder().setBaseComponent(baseComponent).setComponentsFromDb(components).setComponentCount(componentCount).setMeasuresByComponentUuidAndMetric(measuresByComponentUuidAndMetric).setMetrics(metrics).setPeriods(periods).setReferenceComponentsByUuid(referenceComponentsById).build();
  }
  finally {
    dbClient.closeSession(dbSession);
  }
}
