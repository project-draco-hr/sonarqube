{
  Map<Long,ComponentDto> componentsBySnapshotId=new HashMap<>();
  componentsBySnapshotId.put(baseSnapshot.getId(),baseComponent);
  for (  ComponentDtoWithSnapshotId component : components) {
    componentsBySnapshotId.put(component.getSnapshotId(),component);
  }
  Map<Integer,MetricDto> metricsById=Maps.uniqueIndex(metrics,MetricDtoFunctions.toId());
  List<MeasureDto> measureDtos=dbClient.measureDao().selectByDeveloperAndSnapshotIdsAndMetricIds(dbSession,developerId,new ArrayList<>(componentsBySnapshotId.keySet()),new ArrayList<>(metricsById.keySet()));
  Table<String,MetricDto,MeasureDto> measuresByComponentUuidAndMetric=HashBasedTable.create(components.size(),metrics.size());
  for (  MeasureDto measureDto : measureDtos) {
    measuresByComponentUuidAndMetric.put(componentsBySnapshotId.get(measureDto.getSnapshotId()).uuid(),metricsById.get(measureDto.getMetricId()),measureDto);
  }
  addBestValuesToMeasures(measuresByComponentUuidAndMetric,components,metrics,periods);
  return measuresByComponentUuidAndMetric;
}
