{
  File javaFile1=new File(baseDir,"src/main/java/foo/bar/Foo.java");
  File javaFile2=new File(baseDir,"src/main/java2/foo/bar/Foo.java");
  when(fs.inputFiles(FileQuery.onSource().onLanguage(Java.KEY))).thenReturn((Iterable)Arrays.asList(new InputFileBuilder(javaFile1,Charsets.UTF_8,"src/main/java/foo/bar/Foo.java").attribute(InputFile.ATTRIBUTE_SOURCE_RELATIVE_PATH,"foo/bar/Foo.java").build(),new InputFileBuilder(javaFile2,Charsets.UTF_8,"src/main/java2/foo/bar/Foo.java").attribute(InputFile.ATTRIBUTE_SOURCE_RELATIVE_PATH,"foo/bar/Foo.java").build()));
  File javaTestFile1=new File(baseDir,"src/test/java/foo/bar/FooTest.java");
  when(fs.inputFiles(FileQuery.onTest().onLanguage(Java.KEY))).thenReturn((Iterable)Arrays.asList(new InputFileBuilder(javaTestFile1,Charsets.UTF_8,"src/test/java/foo/bar/FooTest.java").attribute(InputFile.ATTRIBUTE_SOURCE_RELATIVE_PATH,"foo/bar/FooTest.java").build()));
  when(project.getLanguageKey()).thenReturn(Java.KEY);
  FileIndexer indexer=new FileIndexer(project,fs,new Languages(Java.INSTANCE),sonarIndex,settings);
  indexer.execute();
  verify(sonarIndex).index(JavaFile.create("src/main/java/foo/bar/Foo.java","foo/bar/Foo.java",false));
  verify(sonarIndex).index(JavaFile.create("src/main/java2/foo/bar/Foo.java","foo/bar/Foo.java",false));
  verify(sonarIndex).index(argThat(new ArgumentMatcher<JavaFile>(){
    @Override public boolean matches(    Object arg0){
      JavaFile javaFile=(JavaFile)arg0;
      return javaFile.getKey().equals("/src/test/java/foo/bar/FooTest.java") && javaFile.getDeprecatedKey().equals("foo.bar.FooTest") && javaFile.getPath().equals("/src/test/java/foo/bar/FooTest.java")&& javaFile.getQualifier().equals(Qualifiers.UNIT_TEST_FILE);
    }
  }
));
}
