{
  Dependency dependency=new Dependency(file1,file2).setWeight(1).setId(51L);
  when(index.getEdge(file1,file2)).thenReturn(dependency);
  when(index.hasEdge(file1,file2)).thenReturn(true);
  when(index.getOutgoingEdges(file1)).thenReturn(Arrays.asList(dependency));
  when(index.getIncomingEdges(file2)).thenReturn(Arrays.asList(dependency));
  List<DecoratorContext> contexts=new ArrayList<DecoratorContext>(201);
  contexts.add(file1Context);
  contexts.add(file2Context);
  for (int i=0; i < 199; i++) {
    DecoratorContext fileContext=mock(DecoratorContext.class);
    when(fileContext.getResource()).thenReturn(File.create("file" + i));
    contexts.add(fileContext);
  }
  when(dirContext.getChildren()).thenReturn(contexts);
  decorator.decorate(dir,dirContext);
  verify(dirContext,times(4)).saveMeasure(any(Measure.class));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_CYCLES,0.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_FEEDBACK_EDGES,0.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_TANGLES,0.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_EDGES_WEIGHT,1.0));
}
