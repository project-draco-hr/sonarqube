{
  Dependency dependency1to2=new Dependency(file1,file2).setWeight(1).setId(50L);
  when(index.getEdge(file1,file2)).thenReturn(dependency1to2);
  when(index.hasEdge(file1,file2)).thenReturn(true);
  when(index.getOutgoingEdges(file1)).thenReturn(Arrays.asList(dependency1to2));
  when(index.getIncomingEdges(file2)).thenReturn(Arrays.asList(dependency1to2));
  Dependency dependency2to1=new Dependency(file2,file1).setWeight(2).setId(51L);
  when(index.getEdge(file2,file1)).thenReturn(dependency2to1);
  when(index.hasEdge(file2,file1)).thenReturn(true);
  when(index.getOutgoingEdges(file2)).thenReturn(Arrays.asList(dependency2to1));
  when(index.getIncomingEdges(file1)).thenReturn(Arrays.asList(dependency2to1));
  decorator.decorate(dir,dirContext);
  verify(dirContext,times(5)).saveMeasure(any(Measure.class));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_CYCLES,1.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_FEEDBACK_EDGES,1.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_TANGLES,1.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.FILE_EDGES_WEIGHT,3.0));
  verify(dirContext).saveMeasure(isMeasureWithValue(CoreMetrics.DEPENDENCY_MATRIX,"[{\"i\":2,\"n\":\"Foo2.java\",\"q\":\"FIL\",\"v\":[{},{\"i\":50,\"w\":1}]},{\"i\":1,\"n\":\"Foo1.java\",\"q\":\"FIL\",\"v\":[{\"i\":51,\"w\":2},{}]}]"));
}
