{
  DbSession batchSession=mock(DbSession.class);
  when(dbClient.openSession(true)).thenReturn(batchSession);
  when(ruleDao.selectRulesByDebtSubCharacteristicId(batchSession,2)).thenReturn(newArrayList(new RuleDto().setSubCharacteristicId(2).setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("5min").setDefaultSubCharacteristicId(10).setDefaultRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setDefaultRemediationCoefficient("4h").setDefaultRemediationOffset("15min")));
  when(dao.selectById(batchSession,2)).thenReturn(subCharacteristicDto);
  service.delete(2);
  verify(ruleDao).update(eq(batchSession),ruleCaptor.capture());
  RuleDto ruleDto=ruleCaptor.getValue();
  assertThat(ruleDto.getUpdatedAt()).isEqualTo(now);
  assertThat(ruleDto.getSubCharacteristicId()).isEqualTo(-1);
  assertThat(ruleDto.getRemediationFunction()).isNull();
  assertThat(ruleDto.getRemediationCoefficient()).isNull();
  assertThat(ruleDto.getRemediationOffset()).isNull();
  assertThat(ruleDto.getDefaultSubCharacteristicId()).isEqualTo(10);
  assertThat(ruleDto.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(ruleDto.getDefaultRemediationCoefficient()).isEqualTo("4h");
  assertThat(ruleDto.getDefaultRemediationOffset()).isEqualTo("15min");
  verify(dao).update(characteristicCaptor.capture(),eq(batchSession));
  CharacteristicDto characteristicDto=characteristicCaptor.getValue();
  assertThat(characteristicDto.getId()).isEqualTo(2);
  assertThat(characteristicDto.isEnabled()).isFalse();
  assertThat(characteristicDto.getUpdatedAt()).isEqualTo(now);
}
