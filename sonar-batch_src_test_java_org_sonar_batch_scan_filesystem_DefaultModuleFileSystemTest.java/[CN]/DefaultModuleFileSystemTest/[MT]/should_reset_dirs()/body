{
  File basedir=temp.newFolder();
  when(initializer.baseDir()).thenReturn(basedir);
  when(initializer.workingDir()).thenReturn(basedir);
  when(initializer.sourceDirs()).thenReturn(Arrays.asList(new File(basedir,"src/main/java")));
  DefaultModuleFileSystem fs=new DefaultModuleFileSystem(new Project("foo"),settings,fileIndex,initializer,mode);
  File existingDir=temp.newFolder("new_folder");
  File notExistingDir=new File(existingDir,"not_exist");
  fs.resetDirs(existingDir,existingDir,Lists.newArrayList(existingDir,notExistingDir),Lists.newArrayList(existingDir,notExistingDir),Lists.newArrayList(existingDir,notExistingDir));
  assertThat(fs.baseDir().getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fs.buildDir().getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fs.sourceDirs()).hasSize(1);
  assertThat(fs.sourceDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fs.testDirs()).hasSize(1);
  assertThat(fs.testDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fs.binaryDirs()).hasSize(1);
  assertThat(fs.binaryDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  verify(fileIndex).index(fs);
}
