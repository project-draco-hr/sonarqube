{
  File basedir=temp.newFolder();
  DefaultModuleFileSystem fileSystem=new DefaultModuleFileSystem.Builder().baseDir(basedir).sourceCharset(Charsets.UTF_8).workingDir(basedir).addSourceDir(new File(basedir,"src/main/java")).addFileFilter(JavaIoFileFilter.create(FileFilterUtils.nameFileFilter("Foo.java"))).pathResolver(new PathResolver()).build();
  File existingDir=temp.newFolder("new_folder");
  File notExistingDir=new File(existingDir,"not_exist");
  fileSystem.resetDirs(existingDir,existingDir,Arrays.asList(existingDir,notExistingDir),Arrays.asList(existingDir,notExistingDir),Arrays.asList(existingDir,notExistingDir));
  assertThat(fileSystem.baseDir().getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fileSystem.buildDir().getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fileSystem.sourceDirs()).hasSize(1);
  assertThat(fileSystem.sourceDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fileSystem.testDirs()).hasSize(1);
  assertThat(fileSystem.testDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
  assertThat(fileSystem.binaryDirs()).hasSize(1);
  assertThat(fileSystem.binaryDirs().get(0).getCanonicalPath()).isEqualTo(existingDir.getCanonicalPath());
}
