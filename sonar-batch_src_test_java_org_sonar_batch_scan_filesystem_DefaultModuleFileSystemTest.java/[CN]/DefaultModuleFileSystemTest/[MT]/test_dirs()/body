{
  File basedir=temp.newFolder("base");
  File buildDir=temp.newFolder("build");
  File workingDir=temp.newFolder("work");
  File additionalFile=temp.newFile("Main.java");
  File additionalTest=temp.newFile("Test.java");
  when(initializer.baseDir()).thenReturn(basedir);
  when(initializer.buildDir()).thenReturn(buildDir);
  when(initializer.workingDir()).thenReturn(workingDir);
  when(initializer.binaryDirs()).thenReturn(Arrays.asList(new File(basedir,"target/classes")));
  when(initializer.sourceDirs()).thenReturn(Arrays.asList(new File(basedir,"src/main/java"),new File(basedir,"src/main/groovy")));
  when(initializer.testDirs()).thenReturn(Arrays.asList(new File(basedir,"src/test/java")));
  when(initializer.additionalSourceFiles()).thenReturn(Arrays.asList(additionalFile));
  when(initializer.additionalTestFiles()).thenReturn(Arrays.asList(additionalTest));
  DefaultModuleFileSystem fs=new DefaultModuleFileSystem(new Project("foo"),settings,fileIndex,initializer,mode,componentIndexer);
  assertThat(fs.baseDir().getCanonicalPath()).isEqualTo(basedir.getCanonicalPath());
  assertThat(fs.workingDir().getCanonicalPath()).isEqualTo(workingDir.getCanonicalPath());
  assertThat(fs.buildDir().getCanonicalPath()).isEqualTo(buildDir.getCanonicalPath());
  assertThat(fs.sourceDirs()).hasSize(2);
  assertThat(fs.testDirs()).hasSize(1);
  assertThat(fs.binaryDirs()).hasSize(1);
  assertThat(fs.sourceFiles()).containsOnly(additionalFile);
  assertThat(fs.testFiles()).containsOnly(additionalTest);
}
