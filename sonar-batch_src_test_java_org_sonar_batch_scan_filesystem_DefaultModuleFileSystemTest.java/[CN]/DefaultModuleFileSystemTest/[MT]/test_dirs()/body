{
  File basedir=temp.newFolder("base");
  File buildDir=temp.newFolder("build");
  File workingDir=temp.newFolder("work");
  File additionalFile=temp.newFile("Main.java");
  File additionalTest=temp.newFile("Test.java");
  when(initializer.baseDir()).thenReturn(basedir);
  when(initializer.buildDir()).thenReturn(buildDir);
  when(initializer.workingDir()).thenReturn(workingDir);
  when(initializer.binaryDirs()).thenReturn(Arrays.asList(new File(basedir,"target/classes")));
  File javaSrc=new File(basedir,"src/main/java");
  javaSrc.mkdirs();
  File groovySrc=new File(basedir,"src/main/groovy");
  groovySrc.mkdirs();
  when(initializer.sources()).thenReturn(Arrays.asList(javaSrc,groovySrc,additionalFile));
  File javaTest=new File(basedir,"src/test/java");
  javaTest.mkdirs();
  when(initializer.tests()).thenReturn(Arrays.asList(javaTest,additionalTest));
  DefaultModuleFileSystem fs=new DefaultModuleFileSystem(moduleInputFileCache,ProjectDefinition.create(),new Project("foo"),settings,fileIndexer,initializer,componentIndexer);
  assertThat(fs.baseDir().getCanonicalPath()).isEqualTo(basedir.getCanonicalPath());
  assertThat(fs.workingDir().getCanonicalPath()).isEqualTo(workingDir.getCanonicalPath());
  assertThat(fs.buildDir().getCanonicalPath()).isEqualTo(buildDir.getCanonicalPath());
  assertThat(fs.sourceDirs()).hasSize(2);
  assertThat(fs.testDirs()).hasSize(1);
  assertThat(fs.binaryDirs()).hasSize(1);
}
