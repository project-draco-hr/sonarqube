{
  File basedir=new File(resourcesDir(),"main_and_test_files");
  Settings settings=new Settings();
  File mainDir=new File(basedir,"src/main/java");
  File testDir=new File(basedir,"src/test/java");
  File foo=new File(mainDir,"Foo.java");
  File hello=new File(mainDir,"Hello.java");
  File fooTest=new File(testDir,"FooTest.java");
  File helloTest=new File(testDir,"HelloTest.java");
  FileHashCache fileHashCache=mock(FileHashCache.class);
  when(fileHashCache.getPreviousHash(foo)).thenReturn("oldfoohash");
  when(fileHashCache.getCurrentHash(foo,Charsets.UTF_8)).thenReturn("foohash");
  when(fileHashCache.getPreviousHash(hello)).thenReturn("oldhellohash");
  when(fileHashCache.getCurrentHash(hello,Charsets.UTF_8)).thenReturn("oldhellohash");
  when(fileHashCache.getPreviousHash(fooTest)).thenReturn("oldfooTesthash");
  when(fileHashCache.getCurrentHash(fooTest,Charsets.UTF_8)).thenReturn("fooTesthash");
  when(fileHashCache.getPreviousHash(helloTest)).thenReturn("oldhelloTesthash");
  when(fileHashCache.getCurrentHash(helloTest,Charsets.UTF_8)).thenReturn("oldhelloTesthash");
  DefaultModuleFileSystem fileSystem=new DefaultModuleFileSystem(fileHashCache).setBaseDir(basedir).setWorkingDir(temp.newFolder()).addSourceDir(mainDir).addTestDir(testDir).setSettings(settings);
  assertThat(fileSystem.files(FileQuery.onSource())).containsExactly(foo,hello);
  assertThat(fileSystem.files(FileQuery.onTest())).containsExactly(fooTest,helloTest);
  assertThat(fileSystem.changedFiles(FileQuery.onSource())).containsExactly(foo);
  assertThat(fileSystem.changedFiles(FileQuery.onTest())).containsExactly(fooTest);
  settings.setProperty(CoreProperties.INCREMENTAL_PREVIEW,true);
  settings.setProperty(CoreProperties.DRY_RUN,true);
  assertThat(fileSystem.files(FileQuery.onSource())).containsExactly(foo);
  assertThat(fileSystem.files(FileQuery.onTest())).containsExactly(fooTest);
}
