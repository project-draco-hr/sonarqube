{
  orchestrator.getServer().restoreProfile(getResource("one-issue-per-line.xml"));
  orchestrator.getServer().provisionProject("sample:mybranch","Sample");
  orchestrator.getServer().associateProjectToQualityProfile("sample:mybranch","xoo","one-issue-per-line");
  SonarRunner scan=SonarRunner.create(ItUtils.projectDir("batch/tracking/v1")).setProperty("sonar.projectDate","2013-05-01").setProperty("sonar.branch","mybranch");
  orchestrator.executeBuild(scan);
  File projectDir=ItUtils.projectDir("batch/tracking/v2");
  SonarRunner issuesModeScan=SonarRunner.create(projectDir).setProperty("sonar.analysis.mode","issues").setProperty("sonar.userHome",temp.newFolder().getAbsolutePath()).setProperty("sonar.report.export.path","sonar-report.json").setProperty("sonar.issuesReport.console.enable","true").setProperty("sonar.projectDate","2013-05-02").setProperty("sonar.verbose","true").setProperty("sonar.branch","mybranch");
  orchestrator.executeBuild(issuesModeScan);
  File report=new File(projectDir,".sonar/sonar-report.json");
  assertThat(report).isFile().exists();
  String json=sanitize(FileUtils.readFileToString(report));
  String expectedJson=sanitize(IOUtils.toString(getResourceInputStream("report-on-single-module-branch.json")));
  JSONAssert.assertEquals(expectedJson,json,false);
}
