{
  Props props=new Props(new Properties());
  InetAddress host=InetAddress.getLocalHost();
  props.set(ProcessProperties.SEARCH_HOST,host.getHostAddress());
  props.set(ProcessProperties.SEARCH_PORT,String.valueOf(port));
  props.set(ProcessProperties.CLUSTER_NAME,CLUSTER_NAME);
  props.set(ProcessProperties.CLUSTER_NODE_NAME,"test");
  props.set(ProcessProperties.PATH_HOME,temp.newFolder().getAbsolutePath());
  props.set(ProcessEntryPoint.PROPERTY_SHARED_PATH,temp.newFolder().getAbsolutePath());
  searchServer=new SearchServer(props);
  searchServer.start();
  assertThat(searchServer.isUp()).isTrue();
  Settings settings=Settings.builder().put("cluster.name",CLUSTER_NAME).build();
  client=TransportClient.builder().settings(settings).build().addTransportAddress(new InetSocketTransportAddress(host,port));
  assertThat(client.admin().cluster().prepareClusterStats().get().getStatus()).isEqualTo(ClusterHealthStatus.GREEN);
  searchServer.stop();
  searchServer.awaitStop();
  searchServer=null;
  try {
    client.admin().cluster().prepareClusterStats().get();
    fail();
  }
 catch (  NoNodeAvailableException exception) {
  }
}
