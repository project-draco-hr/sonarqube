{
  Properties props=new Properties();
  props.put(SearchServer.CLUSTER_ACTIVATION,Boolean.TRUE.toString());
  props.put(SearchServer.ES_PORT_PROPERTY,port.toString());
  props.put(SearchServer.SONAR_NODE_NAME,"MASTER");
  props.put(SearchServer.ES_CLUSTER_PROPERTY,cluster);
  props.put(SearchServer.SONAR_PATH_HOME,temp.getRoot().getAbsolutePath());
  searchServer=new SearchServer(new Props(props));
  assertThat(searchServer).isNotNull();
  searchServer.start();
  assertThat(searchServer.isReady()).isTrue();
  client=getSearchClient();
  client.admin().indices().prepareCreate("test").get();
  props=new Properties();
  props.put(SearchServer.ES_CLUSTER_INET,"localhost:" + port);
  props.put(SearchServer.SONAR_NODE_NAME,"SLAVE");
  props.put(SearchServer.ES_PORT_PROPERTY,NetworkUtils.freePort() + "");
  props.put(SearchServer.ES_CLUSTER_PROPERTY,cluster);
  props.put(SearchServer.SONAR_PATH_HOME,temp2.getRoot().getAbsolutePath());
  SearchServer slaveServer=new SearchServer(new Props(props));
  assertThat(slaveServer).isNotNull();
  slaveServer.start();
  assertThat(slaveServer.isReady()).isTrue();
  assertThat(client.admin().cluster().prepareClusterStats().get().getNodesStats().getCounts().getTotal()).isEqualTo(2);
  searchServer.stop();
  slaveServer.stop();
  searchServer.awaitStop();
  slaveServer.awaitStop();
}
