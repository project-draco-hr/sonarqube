{
  Props props=new Props(new Properties());
  props.set(EsSettings.PROP_CLUSTER_ACTIVATION,"true");
  props.set(EsSettings.PROP_TCP_PORT,String.valueOf(port));
  props.set(EsSettings.PROP_NODE_NAME,"MASTER");
  props.set(EsSettings.PROP_CLUSTER_NAME,CLUSTER_NAME);
  props.set(EsSettings.SONAR_PATH_HOME,temp.newFolder().getAbsolutePath());
  searchServer=new SearchServer(props);
  assertThat(searchServer).isNotNull();
  searchServer.start();
  assertThat(searchServer.isReady()).isTrue();
  client=getSearchClient();
  client.admin().indices().prepareCreate("test").get();
  props=new Props(new Properties());
  props.set(EsSettings.PROP_CLUSTER_MASTER,"localhost:" + port);
  props.set(EsSettings.PROP_NODE_NAME,"SLAVE");
  props.set(EsSettings.PROP_TCP_PORT,String.valueOf(NetworkUtils.freePort()));
  props.set(EsSettings.PROP_CLUSTER_NAME,CLUSTER_NAME);
  props.set(EsSettings.SONAR_PATH_HOME,temp.newFolder().getAbsolutePath());
  SearchServer slaveServer=new SearchServer(props);
  assertThat(slaveServer).isNotNull();
  slaveServer.start();
  assertThat(slaveServer.isReady()).isTrue();
  assertThat(client.admin().cluster().prepareClusterStats().get().getNodesStats().getCounts().getTotal()).isEqualTo(2);
  searchServer.stop();
  slaveServer.stop();
  searchServer.awaitStop();
  slaveServer.awaitStop();
}
