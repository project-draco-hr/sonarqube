{
  setupData("shared");
  final int currentSID=400;
  final int previousSID=300;
  Snapshot snapshot=getSession().getSingleResult(Snapshot.class,"id",currentSID);
  org.sonar.api.batch.Purge deprecated1=mock(org.sonar.api.batch.Purge.class), deprecated2=mock(org.sonar.api.batch.Purge.class);
  org.sonar.api.batch.Purge[] deprecatedPurges=new org.sonar.api.batch.Purge[]{deprecated1,deprecated2};
  new PurgeRunner(getSession(),new Project("key"),snapshot,new Purge[0],deprecatedPurges).purge();
  verify(deprecated1).purge(argThat(new BaseMatcher<org.sonar.api.batch.PurgeContext>(){
    public boolean matches(    Object o){
      org.sonar.api.batch.PurgeContext context=(org.sonar.api.batch.PurgeContext)o;
      return context.getLastSnapshotId() == currentSID && context.getPreviousSnapshotId() == previousSID;
    }
    public void describeTo(    Description description){
    }
  }
));
}
