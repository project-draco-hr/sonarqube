{
  String key=null;
  String name=null;
  String description=null;
  String descriptionFormat=DescriptionFormat.HTML.name();
  String internalKey=null;
  String severity=Severity.defaultSeverity();
  String type=null;
  RuleStatus status=RuleStatus.defaultStatus();
  boolean template=false;
  String gapDescription=null;
  String debtRemediationFunction=null;
  String debtRemediationFunctionGapMultiplier=null;
  String debtRemediationFunctionBaseEffort=null;
  List<ParamStruct> params=new ArrayList<>();
  List<String> tags=new ArrayList<>();
  String keyAttribute=ruleC.getAttrValue("key");
  if (isNotBlank(keyAttribute)) {
    key=trim(keyAttribute);
  }
  String priorityAttribute=ruleC.getAttrValue("priority");
  if (isNotBlank(priorityAttribute)) {
    severity=trim(priorityAttribute);
  }
  SMInputCursor cursor=ruleC.childElementCursor();
  while (cursor.getNext() != null) {
    String nodeName=cursor.getLocalName();
    if (equalsIgnoreCase("name",nodeName)) {
      name=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("type",nodeName)) {
      type=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("description",nodeName)) {
      description=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("descriptionFormat",nodeName)) {
      descriptionFormat=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("key",nodeName)) {
      key=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("configKey",nodeName)) {
      internalKey=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("internalKey",nodeName)) {
      internalKey=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("priority",nodeName) || equalsIgnoreCase("severity",nodeName)) {
      severity=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("cardinality",nodeName)) {
      template=Cardinality.MULTIPLE == Cardinality.valueOf(nodeValue(cursor));
    }
 else     if (equalsIgnoreCase("gapDescription",nodeName) || equalsIgnoreCase("effortToFixDescription",nodeName)) {
      gapDescription=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("remediationFunction",nodeName) || equalsIgnoreCase("debtRemediationFunction",nodeName)) {
      debtRemediationFunction=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("remediationFunctionBaseEffort",nodeName) || equalsIgnoreCase("debtRemediationFunctionOffset",nodeName)) {
      debtRemediationFunctionGapMultiplier=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("remediationFunctionGapMultiplier",nodeName) || equalsIgnoreCase("debtRemediationFunctionCoefficient",nodeName)) {
      debtRemediationFunctionBaseEffort=nodeValue(cursor);
    }
 else     if (equalsIgnoreCase("status",nodeName)) {
      String s=nodeValue(cursor);
      if (s != null) {
        status=RuleStatus.valueOf(s);
      }
    }
 else     if (equalsIgnoreCase("param",nodeName)) {
      params.add(processParameter(cursor));
    }
 else     if (equalsIgnoreCase("tag",nodeName)) {
      tags.add(nodeValue(cursor));
    }
  }
  try {
    RulesDefinition.NewRule rule=repo.createRule(key).setSeverity(severity).setName(name).setInternalKey(internalKey).setTags(tags.toArray(new String[tags.size()])).setTemplate(template).setStatus(status).setGapDescription(gapDescription);
    if (type != null) {
      rule.setType(RuleType.valueOf(type));
    }
    fillDescription(rule,descriptionFormat,description);
    fillRemediationFunction(rule,debtRemediationFunction,debtRemediationFunctionGapMultiplier,debtRemediationFunctionBaseEffort);
    fillParams(rule,params);
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(format("Fail to load the rule with key [%s:%s]",repo.key(),key),e);
  }
}
