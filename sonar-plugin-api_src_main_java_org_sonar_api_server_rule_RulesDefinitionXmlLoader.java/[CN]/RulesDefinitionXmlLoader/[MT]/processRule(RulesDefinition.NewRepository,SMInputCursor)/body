{
  String key=null, name=null, description=null, internalKey=null, severity=Severity.defaultSeverity(), status=null;
  Cardinality cardinality=Cardinality.SINGLE;
  List<ParamStruct> params=new ArrayList<ParamStruct>();
  List<String> tags=new ArrayList<String>();
  String keyAttribute=ruleC.getAttrValue("key");
  if (StringUtils.isNotBlank(keyAttribute)) {
    key=StringUtils.trim(keyAttribute);
  }
  String priorityAttribute=ruleC.getAttrValue("priority");
  if (StringUtils.isNotBlank(priorityAttribute)) {
    severity=StringUtils.trim(priorityAttribute);
  }
  SMInputCursor cursor=ruleC.childElementCursor();
  while (cursor.getNext() != null) {
    String nodeName=cursor.getLocalName();
    if (StringUtils.equalsIgnoreCase("name",nodeName)) {
      name=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("description",nodeName)) {
      description=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("key",nodeName)) {
      key=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("configKey",nodeName)) {
      internalKey=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("internalKey",nodeName)) {
      internalKey=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("priority",nodeName)) {
      severity=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("severity",nodeName)) {
      severity=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("cardinality",nodeName)) {
      cardinality=Cardinality.valueOf(StringUtils.trim(cursor.collectDescendantText(false)));
    }
 else     if (StringUtils.equalsIgnoreCase("status",nodeName)) {
      status=StringUtils.trim(cursor.collectDescendantText(false));
    }
 else     if (StringUtils.equalsIgnoreCase("param",nodeName)) {
      params.add(processParameter(cursor));
    }
 else     if (StringUtils.equalsIgnoreCase("tag",nodeName)) {
      tags.add(StringUtils.trim(cursor.collectDescendantText(false)));
    }
  }
  RulesDefinition.NewRule rule=repo.createRule(key).setHtmlDescription(description).setSeverity(severity).setName(name).setInternalKey(internalKey).setTags(tags.toArray(new String[tags.size()])).setTemplate(cardinality == Cardinality.MULTIPLE);
  if (status != null) {
    rule.setStatus(RuleStatus.valueOf(status));
  }
  for (  ParamStruct param : params) {
    rule.createParam(param.key).setDefaultValue(param.defaultValue).setType(param.type).setDescription(param.description);
  }
}
