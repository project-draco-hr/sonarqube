{
  ProjectFileSystem fileSystem=mock(ProjectFileSystem.class);
  when(fileSystem.getSourceDirs()).thenReturn(Collections.<File>emptyList());
  File file1=new File("target/tmp/file1.ext");
  File file2=new File("target/tmp/file2.ext");
  File file3=new File("target/tmp/file3.ext");
  Project project=new Project("key").setFileSystem(fileSystem);
  SensorContext context=mock(SensorContext.class);
  CpdMapping cpdMapping=mock(CpdMapping.class);
  Resource resource1=new JavaFile("foo.Foo");
  Resource resource2=new JavaFile("foo.Bar");
  Resource resource3=new JavaFile("foo.Hotel");
  when(cpdMapping.createResource((File)anyObject(),anyList())).thenReturn(resource1).thenReturn(resource2).thenReturn(resource2).thenReturn(resource1).thenReturn(resource1).thenReturn(resource3).thenReturn(resource3).thenReturn(resource1);
  Match match1=new Match(5,new TokenEntry(null,file1.getAbsolutePath(),5),new TokenEntry(null,file2.getAbsolutePath(),15));
  match1.setLineCount(200);
  Match match2=new Match(5,new TokenEntry(null,file1.getAbsolutePath(),5),new TokenEntry(null,file3.getAbsolutePath(),15));
  match2.setLineCount(100);
  CpdAnalyser cpdAnalyser=new CpdAnalyser(project,context,cpdMapping);
  cpdAnalyser.analyse(Arrays.asList(match1,match2).iterator());
  ArgumentCaptor<Measure> measureCaptor=ArgumentCaptor.forClass(Measure.class);
  verify(context).saveMeasure(resource1,CoreMetrics.DUPLICATED_FILES,1d);
  verify(context).saveMeasure(resource1,CoreMetrics.DUPLICATED_BLOCKS,2d);
  verify(context).saveMeasure(resource1,CoreMetrics.DUPLICATED_LINES,200d);
  verify(context).saveMeasure(eq(resource1),measureCaptor.capture());
  Measure measure=measureCaptor.getValue();
  assertThat(measure.getMetric(),is(CoreMetrics.DUPLICATIONS_DATA));
  assertThat(measure.getData(),is("<duplications>" + "<g>" + "<b s=\"5\" l=\"100\" r=\"key:foo.Foo\" />"+ "<b s=\"15\" l=\"100\" r=\"key:foo.Hotel\" />"+ "</g>"+ "<g>"+ "<b s=\"5\" l=\"200\" r=\"key:foo.Foo\" />"+ "<b s=\"15\" l=\"200\" r=\"key:foo.Bar\" />"+ "</g>"+ "</duplications>"));
  verify(context).saveMeasure(resource2,CoreMetrics.DUPLICATED_FILES,1d);
  verify(context).saveMeasure(resource2,CoreMetrics.DUPLICATED_LINES,200d);
  verify(context).saveMeasure(resource2,CoreMetrics.DUPLICATED_BLOCKS,1d);
  verify(context).saveMeasure(eq(resource2),measureCaptor.capture());
  measure=measureCaptor.getValue();
  assertThat(measure.getMetric(),is(CoreMetrics.DUPLICATIONS_DATA));
  assertThat(measure.getData(),is("<duplications>" + "<g>" + "<b s=\"15\" l=\"200\" r=\"key:foo.Bar\" />"+ "<b s=\"5\" l=\"200\" r=\"key:foo.Foo\" />"+ "</g>"+ "</duplications>"));
  verify(context).saveMeasure(resource3,CoreMetrics.DUPLICATED_FILES,1d);
  verify(context).saveMeasure(resource3,CoreMetrics.DUPLICATED_LINES,100d);
  verify(context).saveMeasure(resource3,CoreMetrics.DUPLICATED_BLOCKS,1d);
  verify(context).saveMeasure(eq(resource3),measureCaptor.capture());
  measure=measureCaptor.getValue();
  assertThat(measure.getMetric(),is(CoreMetrics.DUPLICATIONS_DATA));
  assertThat(measure.getData(),is("<duplications>" + "<g>" + "<b s=\"15\" l=\"100\" r=\"key:foo.Hotel\" />"+ "<b s=\"5\" l=\"100\" r=\"key:foo.Foo\" />"+ "</g>"+ "</duplications>"));
}
