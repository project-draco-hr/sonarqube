{
  setupData("create_model_with_requirements_from_plugin_on_first_execution");
  TechnicalDebtModelFinder technicalDebtModelFinder=mock(TechnicalDebtModelFinder.class);
  when(technicalDebtModelFinder.getContributingPluginList()).thenReturn(ImmutableList.of("java"));
  when(technicalDebtModelFinder.createReaderForXMLFile("java")).thenReturn(new FileReader(Resources.getResource(TechnicalDebtManagerTest.class,"TechnicalDebtManagerTest/fake-java-model.xml").getPath()));
  when(technicalDebtModelFinder.createReaderForXMLFile("technical-debt")).thenReturn(new FileReader(Resources.getResource(TechnicalDebtManagerTest.class,"TechnicalDebtManagerTest/fake-default-model.xml").getPath()));
  RuleCache ruleCache=mock(RuleCache.class);
  Rule rule1=Rule.create("checkstyle","import","Regular expression");
  rule1.setId(1);
  when(ruleCache.getRule("checkstyle","import")).thenReturn(rule1);
  Rule rule2=Rule.create("checkstyle","export","Regular expression");
  rule2.setId(2);
  when(ruleCache.getRule("checkstyle","export")).thenReturn(rule2);
  TechnicalDebtManager manager=new TechnicalDebtManager(getSessionFactory(),new DefaultModelFinder(getSessionFactory()),technicalDebtModelFinder,new XMLImporter());
  manager.reset(ValidationMessages.create(),ruleCache);
  getSession().commit();
  checkTables("create_model_with_requirements_from_plugin_on_first_execution","quality_models","characteristics","characteristic_edges","characteristic_properties");
}
