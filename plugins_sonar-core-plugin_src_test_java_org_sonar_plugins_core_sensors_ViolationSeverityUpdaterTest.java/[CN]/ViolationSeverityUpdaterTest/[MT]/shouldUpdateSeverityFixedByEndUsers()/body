{
  ReviewDao reviewDao=mock(ReviewDao.class);
  when(reviewDao.selectOpenByResourceId(anyInt(),(Predicate<ReviewDto>[])anyVararg())).thenReturn(Lists.newArrayList(new ReviewDto().setManualSeverity(true).setSeverity("BLOCKER").setViolationPermanentId(380)));
  DecoratorContext context=mock(DecoratorContext.class);
  Violation newViolation=Violation.create(new Rule(),project).setSeverity(RulePriority.MINOR);
  Violation unchangedViolation=Violation.create(new Rule(),project).setPermanentId(120).setSeverity(RulePriority.MINOR);
  Violation changedViolation=Violation.create(new Rule(),project).setPermanentId(380).setSeverity(RulePriority.MINOR);
  when(context.getViolations()).thenReturn(Arrays.<Violation>asList(newViolation,unchangedViolation,changedViolation));
  ViolationSeverityUpdater updater=new ViolationSeverityUpdater(reviewDao);
  updater.decorate(project,context);
  assertThat(newViolation.getSeverity(),Is.is(RulePriority.MINOR));
  assertThat(unchangedViolation.getSeverity(),Is.is(RulePriority.MINOR));
  assertThat(changedViolation.getSeverity(),Is.is(RulePriority.BLOCKER));
}
