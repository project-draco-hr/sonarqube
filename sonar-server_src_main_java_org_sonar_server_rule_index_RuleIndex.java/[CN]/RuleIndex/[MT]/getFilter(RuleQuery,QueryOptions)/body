{
  BoolFilterBuilder fb=FilterBuilders.boolFilter();
  fb.mustNot(FilterBuilders.termFilter(RuleNormalizer.RuleField.STATUS.field(),RuleStatus.REMOVED.toString()));
  this.addTermFilter(fb,RuleNormalizer.RuleField.INTERNAL_KEY.field(),query.getInternalKey());
  this.addTermFilter(fb,RuleNormalizer.RuleField.RULE_KEY.field(),query.getRuleKey());
  this.addTermFilter(fb,RuleNormalizer.RuleField.LANGUAGE.field(),query.getLanguages());
  this.addTermFilter(fb,RuleNormalizer.RuleField.REPOSITORY.field(),query.getRepositories());
  this.addTermFilter(fb,RuleNormalizer.RuleField.SEVERITY.field(),query.getSeverities());
  this.addTermFilter(fb,RuleNormalizer.RuleField.KEY.field(),query.getKey());
  this.addTermFilter(fb,RuleNormalizer.RuleField._TAGS.field(),query.getTags());
  Collection<String> debtCharacteristics=query.getDebtCharacteristics();
  if (debtCharacteristics != null && !debtCharacteristics.isEmpty()) {
    fb.must(FilterBuilders.orFilter(FilterBuilders.andFilter(FilterBuilders.notFilter(FilterBuilders.termsFilter(RuleNormalizer.RuleField.SUB_CHARACTERISTIC.field(),DebtCharacteristic.NONE)),FilterBuilders.orFilter(FilterBuilders.termsFilter(RuleNormalizer.RuleField.SUB_CHARACTERISTIC.field(),debtCharacteristics),FilterBuilders.termsFilter(RuleNormalizer.RuleField.CHARACTERISTIC.field(),debtCharacteristics))),FilterBuilders.andFilter(FilterBuilders.orFilter(FilterBuilders.termsFilter(RuleNormalizer.RuleField.SUB_CHARACTERISTIC.field(),""),FilterBuilders.notFilter(FilterBuilders.existsFilter(RuleNormalizer.RuleField.SUB_CHARACTERISTIC.field()))),FilterBuilders.orFilter(FilterBuilders.termsFilter(RuleNormalizer.RuleField.DEFAULT_SUB_CHARACTERISTIC.field(),debtCharacteristics),FilterBuilders.termsFilter(RuleNormalizer.RuleField.DEFAULT_CHARACTERISTIC.field(),debtCharacteristics)))));
  }
  Boolean hasDebtCharacteristic=query.getHasDebtCharacteristic();
  if (hasDebtCharacteristic != null && hasDebtCharacteristic) {
    fb.must(FilterBuilders.existsFilter(RuleNormalizer.RuleField.SUB_CHARACTERISTIC.field()));
  }
  if (query.getAvailableSince() != null) {
    fb.must(FilterBuilders.rangeFilter(RuleNormalizer.RuleField.CREATED_AT.field()).gte(query.getAvailableSince()));
  }
  Collection<RuleStatus> statusValues=query.getStatuses();
  if (statusValues != null && !statusValues.isEmpty()) {
    Collection<String> stringStatus=new ArrayList<String>();
    for (    RuleStatus status : statusValues) {
      stringStatus.add(status.name());
    }
    this.addTermFilter(fb,RuleNormalizer.RuleField.STATUS.field(),stringStatus);
  }
  Boolean isTemplate=query.isTemplate();
  if (isTemplate != null) {
    this.addTermFilter(fb,RuleNormalizer.RuleField.IS_TEMPLATE.field(),Boolean.toString(isTemplate));
  }
  String template=query.templateKey();
  if (template != null) {
    this.addTermFilter(fb,RuleNormalizer.RuleField.TEMPLATE_KEY.field(),template);
  }
  BoolFilterBuilder childrenFilter=FilterBuilders.boolFilter();
  this.addTermFilter(childrenFilter,ActiveRuleNormalizer.ActiveRuleField.PROFILE_KEY.field(),query.getQProfileKey());
  this.addTermFilter(childrenFilter,ActiveRuleNormalizer.ActiveRuleField.INHERITANCE.field(),query.getInheritance());
  QueryBuilder childQuery;
  if (childrenFilter.hasClauses()) {
    childQuery=QueryBuilders.constantScoreQuery(childrenFilter);
  }
 else {
    childQuery=QueryBuilders.matchAllQuery();
  }
  if (query.getActivation().equals(Boolean.TRUE)) {
    fb.must(FilterBuilders.hasChildFilter(IndexDefinition.ACTIVE_RULE.getIndexType(),childQuery));
  }
 else   if (query.getActivation().equals(Boolean.FALSE)) {
    fb.mustNot(FilterBuilders.hasChildFilter(IndexDefinition.ACTIVE_RULE.getIndexType(),childQuery));
  }
  return fb;
}
