{
  ScannerReportWriter writer=reportPublisher.getWriter();
  writer.writeComponentSymbols(componentCache.get(inputFile).batchId(),Iterables.transform(referencesBySymbol.entrySet(),new Function<Map.Entry<Symbol,Set<TextRange>>,ScannerReport.Symbol>(){
    private ScannerReport.Symbol.Builder builder=ScannerReport.Symbol.newBuilder();
    private ScannerReport.TextRange.Builder rangeBuilder=ScannerReport.TextRange.newBuilder();
    @Override public ScannerReport.Symbol apply(    Map.Entry<Symbol,Set<TextRange>> input){
      builder.clear();
      rangeBuilder.clear();
      DefaultSymbol symbol=(DefaultSymbol)input.getKey();
      builder.setDeclaration(rangeBuilder.setStartLine(symbol.range().start().line()).setStartOffset(symbol.range().start().lineOffset()).setEndLine(symbol.range().end().line()).setEndOffset(symbol.range().end().lineOffset()).build());
      for (      TextRange reference : input.getValue()) {
        builder.addReference(rangeBuilder.setStartLine(reference.start().line()).setStartOffset(reference.start().lineOffset()).setEndLine(reference.end().line()).setEndOffset(reference.end().lineOffset()).build());
      }
      return builder.build();
    }
  }
));
}
