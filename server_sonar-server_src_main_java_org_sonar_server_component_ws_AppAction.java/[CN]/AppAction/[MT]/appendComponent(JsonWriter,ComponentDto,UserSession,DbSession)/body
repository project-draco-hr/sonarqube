{
  List<PropertyDto> propertyDtos=dbClient.propertiesDao().selectByQuery(PropertyQuery.builder().setKey("favourite").setComponentId(component.getId()).setUserId(userSession.getUserId()).build(),session);
  boolean isFavourite=propertyDtos.size() == 1;
  json.prop("key",component.key());
  json.prop("uuid",component.uuid());
  json.prop("path",component.path());
  json.prop("name",component.name());
  json.prop("longName",component.longName());
  json.prop("q",component.qualifier());
  ComponentDto parentProject=retrieveRootIfNotCurrentComponent(component,session);
  ComponentDto project=dbClient.componentDao().selectOrFailByUuid(session,component.projectUuid());
  boolean displayParentProject=parentProject != null && !parentProject.uuid().equals(project.uuid());
  json.prop("subProject",displayParentProject ? parentProject.key() : null);
  json.prop("subProjectName",displayParentProject ? parentProject.longName() : null);
  json.prop("project",project.key());
  json.prop("projectName",project.longName());
  json.prop("fav",isFavourite);
}
