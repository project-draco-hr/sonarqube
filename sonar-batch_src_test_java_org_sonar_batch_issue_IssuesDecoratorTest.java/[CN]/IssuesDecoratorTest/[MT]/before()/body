{
  ruleA1=Rule.create().setRepositoryKey("ruleA1").setKey("ruleA1").setName("nameA1");
  ruleA2=Rule.create().setRepositoryKey("ruleA2").setKey("ruleA2").setName("nameA2");
  ruleB1=Rule.create().setRepositoryKey("ruleB1").setKey("ruleB1").setName("nameB1");
  rulefinder=mock(RuleFinder.class);
  when(rulefinder.findByKey(ruleA1.getRepositoryKey(),ruleA1.getKey())).thenReturn(ruleA1);
  when(rulefinder.findByKey(ruleA2.getRepositoryKey(),ruleA2.getKey())).thenReturn(ruleA2);
  when(rulefinder.findByKey(ruleB1.getRepositoryKey(),ruleB1.getKey())).thenReturn(ruleB1);
  resource=mock(Resource.class);
  context=mock(DecoratorContext.class);
  when(context.getResource()).thenReturn(resource);
  issuable=mock(Issuable.class);
  ResourcePerspectives perspectives=mock(ResourcePerspectives.class);
  when(perspectives.as(Issuable.class,resource)).thenReturn(issuable);
  decorator=new IssuesDecorator(perspectives,rulefinder);
}
