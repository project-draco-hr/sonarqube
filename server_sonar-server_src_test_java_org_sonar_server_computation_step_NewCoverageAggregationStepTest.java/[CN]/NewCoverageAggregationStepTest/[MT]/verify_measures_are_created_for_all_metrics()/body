{
  treeRootHolder.setRoot(MOST_SIMPLE_ONE_FILE_TREE);
  periodHolder.setPeriods(createPeriod(2));
  for (  Metric metric : metricRepository.getAll()) {
    measureRepository.addRawMeasure(4,metric.getKey(),createMeasure(metric.getKey().hashCode()));
  }
  underTest.execute();
  MeasureRepoEntry[] expectedEntries=from(metricRepository.getAll()).transform(new Function<Metric,MeasureRepoEntry>(){
    @Override @Nonnull public MeasureRepoEntry apply(    @Nonnull Metric input){
      return entryOf(input.getKey(),createMeasure(input.getKey().hashCode()));
    }
  }
).toArray(MeasureRepoEntry.class);
  assertThat(toEntries(measureRepository.getNewRawMeasures(1))).containsOnly(expectedEntries);
  assertThat(toEntries(measureRepository.getNewRawMeasures(2))).containsOnly(expectedEntries);
  assertThat(toEntries(measureRepository.getNewRawMeasures(3))).containsOnly(expectedEntries);
  assertThat(measureRepository.getNewRawMeasures(4).isEmpty()).isTrue();
}
