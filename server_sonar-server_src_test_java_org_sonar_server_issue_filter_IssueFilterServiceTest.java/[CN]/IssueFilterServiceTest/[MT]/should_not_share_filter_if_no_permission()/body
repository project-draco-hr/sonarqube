{
  when(authorizationDao.selectGlobalPermissions("john")).thenReturn(Collections.<String>emptyList());
  when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName("My Filter").setShared(false).setUserLogin("john"));
  try {
    service.update(new IssueFilterDto().setId(1L).setName("My Filter").setShared(true).setUserLogin("john"),userSession);
    fail();
  }
 catch (  Exception e) {
    assertThat(e).isInstanceOf(ForbiddenException.class).hasMessage("User cannot own this filter because of insufficient rights");
  }
  verify(issueFilterDao,never()).update(any(IssueFilterDto.class));
}
