{
  when(authorizationDao.selectGlobalPermissions("john")).thenReturn(newArrayList(UserRole.USER));
  when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName("My Issues").setUserLogin("arthur").setShared(true));
  try {
    underTest.delete(1L,userSession);
    fail();
  }
 catch (  Exception e) {
    assertThat(e).isInstanceOf(ForbiddenException.class).hasMessage("User is not authorized to modify this filter");
  }
  verify(issueFilterDao,never()).delete(anyLong());
}
