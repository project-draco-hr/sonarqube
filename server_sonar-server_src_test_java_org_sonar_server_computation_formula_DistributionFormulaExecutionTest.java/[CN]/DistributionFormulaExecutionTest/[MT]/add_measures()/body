{
  DumbComponent project=builder(PROJECT,1).addChildren(builder(MODULE,11).addChildren(builder(DIRECTORY,111).addChildren(builder(Component.Type.FILE,1111).build(),builder(Component.Type.FILE,1112).build()).build()).build(),builder(MODULE,12).addChildren(builder(DIRECTORY,121).addChildren(builder(Component.Type.FILE,1211).build()).build()).build()).build();
  treeRootHolder.setRoot(project);
  measureRepository.addRawMeasure(1111,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY,newMeasureBuilder().create("0.5=3;3.5=5;6.5=9"));
  measureRepository.addRawMeasure(1112,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY,newMeasureBuilder().create("0.5=0;3.5=2;6.5=1"));
  measureRepository.addRawMeasure(1211,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY,newMeasureBuilder().create("0.5=1;3.5=3;6.5=2"));
  underTest.visit(project);
  assertThat(measureRepository.getNewRawMeasure(1,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY).get().getStringValue()).isEqualTo("0.5=4;3.5=10;6.5=12");
  assertThat(measureRepository.getNewRawMeasure(11,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY).get().getStringValue()).isEqualTo("0.5=3;3.5=7;6.5=10");
  assertThat(measureRepository.getNewRawMeasure(111,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY).get().getStringValue()).isEqualTo("0.5=3;3.5=7;6.5=10");
  assertThat(measureRepository.getNewRawMeasures(1111)).isEmpty();
  assertThat(measureRepository.getNewRawMeasures(1112)).isEmpty();
  assertThat(measureRepository.getNewRawMeasure(12,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY).get().getStringValue()).isEqualTo("0.5=1;3.5=3;6.5=2");
  assertThat(measureRepository.getNewRawMeasure(121,FUNCTION_COMPLEXITY_DISTRIBUTION_KEY).get().getStringValue()).isEqualTo("0.5=1;3.5=3;6.5=2");
  assertThat(measureRepository.getNewRawMeasures(1211)).isEmpty();
}
