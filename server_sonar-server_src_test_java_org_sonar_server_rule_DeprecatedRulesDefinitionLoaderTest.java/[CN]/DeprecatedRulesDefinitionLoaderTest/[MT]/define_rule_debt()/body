{
  RulesDefinition.Context context=new RulesDefinition.Context();
  List<DebtModelXMLExporter.RuleDebt> ruleDebts=newArrayList(new DebtModelXMLExporter.RuleDebt().setRuleKey(RuleKey.of("checkstyle","ConstantName")).setFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.name()).setCoefficient("1d").setOffset("10min"));
  Reader javaModelReader=mock(Reader.class);
  when(debtModelRepository.createReaderForXMLFile("java")).thenReturn(javaModelReader);
  when(debtModelRepository.getContributingPluginList()).thenReturn(newArrayList("java"));
  when(importer.importXML(eq(javaModelReader),any(ValidationMessages.class))).thenReturn(ruleDebts);
  new DeprecatedRulesDefinitionLoader(i18n,debtModelRepository,importer,new RuleRepository[]{new CheckstyleRules()}).complete(context);
  assertThat(context.repositories()).hasSize(1);
  RulesDefinition.Repository checkstyle=context.repository("checkstyle");
  assertThat(checkstyle.rules()).hasSize(1);
  RulesDefinition.Rule rule=checkstyle.rule("ConstantName");
  assertThat(rule).isNotNull();
  assertThat(rule.key()).isEqualTo("ConstantName");
  assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);
  assertThat(rule.debtRemediationFunction().gapMultiplier()).isEqualTo("1d");
  assertThat(rule.debtRemediationFunction().baseEffort()).isEqualTo("10min");
}
