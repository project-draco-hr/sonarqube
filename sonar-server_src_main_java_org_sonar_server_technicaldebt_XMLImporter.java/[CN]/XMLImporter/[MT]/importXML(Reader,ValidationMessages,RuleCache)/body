{
  Model sqale=Model.createByName(RegisterTechnicalDebtModel.TECHNICAL_DEBT_MODEL);
  try {
    SMInputFactory inputFactory=initStax();
    SMHierarchicCursor cursor=inputFactory.rootElementCursor(xml);
    cursor.advance();
    SMInputCursor chcCursor=cursor.childElementCursor(XMLConstants.CHARACTERISTIC);
    while (chcCursor.getNext() != null) {
      processCharacteristic(sqale,chcCursor,messages,repositoryCache);
    }
    cursor.getStreamReader().closeCompletely();
  }
 catch (  XMLStreamException e) {
    LOG.error("XML is not valid",e);
    messages.addErrorText("XML is not valid: " + e.getMessage());
  }
  return sqale;
}
