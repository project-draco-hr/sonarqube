{
  Snapshot baseProjectSnapshot=analysisMetadataHolder.getBaseProjectSnapshot();
  if (baseProjectSnapshot == null) {
    LOG.debug("First analysis. Do nothing.");
    return;
  }
  Map<String,ComponentDtoWithSnapshotId> dbFilesByKey=getDbFilesByKey(baseProjectSnapshot);
  if (dbFilesByKey.isEmpty()) {
    LOG.debug("Previous snapshot has no file. Do nothing.");
    return;
  }
  Map<String,Component> reportFilesByKey=getReportFilesByKey(this.rootHolder.getRoot());
  if (reportFilesByKey.isEmpty()) {
    LOG.debug("No files in report. Do nothing.");
    return;
  }
  Set<String> addedFileKeys=ImmutableSet.copyOf(Sets.difference(reportFilesByKey.keySet(),dbFilesByKey.keySet()));
  Set<String> removedFileKeys=ImmutableSet.copyOf(Sets.difference(dbFilesByKey.keySet(),reportFilesByKey.keySet()));
  if (addedFileKeys.isEmpty() || removedFileKeys.isEmpty()) {
    LOG.debug("Either no files added or no files removed. Do nothing.");
    return;
  }
  Map<String,File> dbFileSourcesByKey=getDbFileSourcesByKey(dbFilesByKey,removedFileKeys);
  Map<String,File> reportFileSourcesByKey=getReportFileSourcesByKey(reportFilesByKey,addedFileKeys);
  ScoreMatrix scoreMatrix=computeScoreMatrix(dbFileSourcesByKey,reportFileSourcesByKey);
  printIfDebug(scoreMatrix);
  if (scoreMatrix.maxScore < MIN_REQUIRED_SCORE) {
    LOG.debug("max score in matrix is less than min required score (%s). Do nothing.",MIN_REQUIRED_SCORE);
    return;
  }
  MatchesByScore matchesByScore=MatchesByScore.create(scoreMatrix);
  ElectedMatches electedMatches=electMatches(dbFileSourcesByKey,reportFileSourcesByKey,matchesByScore);
  for (  Match validatedMatch : electedMatches) {
    movedFilesRepository.setOriginalFile(reportFilesByKey.get(validatedMatch.getReportKey()),toOriginalFile(dbFilesByKey.get(validatedMatch.getDbKey())));
    LOG.info("File move found: " + validatedMatch);
  }
}
