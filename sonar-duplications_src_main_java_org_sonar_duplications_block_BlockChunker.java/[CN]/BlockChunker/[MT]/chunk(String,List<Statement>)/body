{
  List<Statement> filtered=new ArrayList<>();
  int i=0;
  while (i < statements.size()) {
    Statement first=statements.get(i);
    int j=i + 1;
    while (j < statements.size() && statements.get(j).getValue().equals(first.getValue())) {
      j++;
    }
    filtered.add(statements.get(i));
    if (i < j - 1) {
      filtered.add(statements.get(j - 1));
    }
    i=j;
  }
  statements=filtered;
  if (statements.size() < blockSize) {
    return Collections.emptyList();
  }
  Statement[] statementsArr=statements.toArray(new Statement[statements.size()]);
  List<Block> blocks=new ArrayList<>(statementsArr.length - blockSize + 1);
  long hash=0;
  int first=0;
  int last=0;
  for (; last < blockSize - 1; last++) {
    hash=hash * PRIME_BASE + statementsArr[last].getValue().hashCode();
  }
  Block.Builder blockBuilder=Block.builder().setResourceId(resourceId);
  for (; last < statementsArr.length; last++, first++) {
    Statement firstStatement=statementsArr[first];
    Statement lastStatement=statementsArr[last];
    hash=hash * PRIME_BASE + lastStatement.getValue().hashCode();
    Block block=blockBuilder.setBlockHash(new ByteArray(hash)).setIndexInFile(first).setLines(firstStatement.getStartLine(),lastStatement.getEndLine()).build();
    blocks.add(block);
    hash-=power * firstStatement.getValue().hashCode();
  }
  return blocks;
}
