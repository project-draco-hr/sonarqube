{
  return new Converter(){
    public void marshal(    Object source,    HierarchicalStreamWriter writer,    MarshallingContext context){
      ActiveRule rule=(ActiveRule)source;
      writeNode(writer,KEY,rule.getRule().getKey());
      writeNode(writer,PLUGIN,rule.getRule().getRepositoryKey());
      writeNode(writer,LEVEL,rule.getSeverity().name());
      writeNode(writer,INHERITANCE,rule.getInheritance());
      if (!rule.getActiveRuleParams().isEmpty()) {
        writer.startNode(PARAMS);
        for (        ActiveRuleParam activeRuleParam : rule.getActiveRuleParams()) {
          writer.startNode("param");
          writeNode(writer,KEY,activeRuleParam.getRuleParam().getKey());
          writeNode(writer,VALUE,activeRuleParam.getValue());
          writer.endNode();
        }
        writer.endNode();
      }
    }
    public Object unmarshal(    HierarchicalStreamReader reader,    UnmarshallingContext context){
      Map<String,String> valuesRule=new HashMap<String,String>();
      List<ActiveRuleParam> params=new ArrayList<ActiveRuleParam>();
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        valuesRule.put(reader.getNodeName(),reader.getValue());
        if (PARAMS.equals(reader.getNodeName())) {
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            Map<String,String> valuesParam=readNode(reader);
            ActiveRuleParam activeRuleParam=new ActiveRuleParam(null,new RuleParam(null,valuesParam.get(KEY),null,null),valuesParam.get(VALUE));
            params.add(activeRuleParam);
            reader.moveUp();
          }
        }
        reader.moveUp();
      }
      ActiveRule activeRule=new ActiveRule(null,new Rule(valuesRule.get(PLUGIN),valuesRule.get(KEY)),RulePriority.valueOf(valuesRule.get(LEVEL)));
      activeRule.setActiveRuleParams(params);
      if (valuesRule.containsKey(INHERITANCE)) {
        activeRule.setInheritance(valuesRule.get(INHERITANCE));
      }
      return activeRule;
    }
    public boolean canConvert(    Class type){
      return type.equals(ActiveRule.class);
    }
  }
;
}
