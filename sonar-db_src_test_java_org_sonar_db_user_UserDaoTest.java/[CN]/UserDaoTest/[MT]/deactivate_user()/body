{
  UserDto user=newActiveUser();
  DashboardDto dashboard=newDashboard(user,false);
  ActiveDashboardDto activeDashboard=newActiveDashboard(dashboard,user);
  IssueFilterDto issueFilter=newIssueFilter(user,false);
  IssueFilterFavouriteDto issueFilterFavourite=newIssueFilterFavourite(issueFilter,user);
  MeasureFilterDto measureFilter=newMeasureFilter(user,false);
  MeasureFilterFavouriteDto measureFilterFavourite=newMeasureFilterFavourite(measureFilter,user);
  PropertyDto property=newProperty(user);
  newUserRole(user);
  newUserGroup(user);
  UserDto otherUser=newActiveUser();
  session.commit();
  boolean deactivated=underTest.deactivateUserByLogin(session,user.getLogin());
  assertThat(deactivated).isTrue();
  UserDto userReloaded=underTest.selectUserById(session,user.getId());
  assertThat(userReloaded.isActive()).isFalse();
  assertThat(userReloaded.getEmail()).isNull();
  assertThat(userReloaded.getScmAccounts()).isNull();
  assertThat(userReloaded.getSalt()).isNull();
  assertThat(userReloaded.getCryptedPassword()).isNull();
  assertThat(userReloaded.getExternalIdentity()).isNull();
  assertThat(userReloaded.getExternalIdentityProvider()).isNull();
  assertThat(userReloaded.getRememberToken()).isNull();
  assertThat(userReloaded.getRememberTokenExpiresAt()).isNull();
  assertThat(userReloaded.getUpdatedAt()).isEqualTo(NOW);
  assertThat(underTest.selectUserById(session,otherUser.getId())).isNotNull();
  assertThat(dbClient.dashboardDao().selectById(session,dashboard.getId())).isNull();
  assertThat(dbClient.activeDashboardDao().selectById(session,activeDashboard.getId())).isNull();
  assertThat(dbClient.issueFilterDao().selectById(session,issueFilter.getId())).isNull();
  assertThat(dbClient.issueFilterFavouriteDao().selectById(session,issueFilterFavourite.getId())).isNull();
  assertThat(dbClient.measureFilterDao().selectById(session,measureFilter.getId())).isNull();
  assertThat(dbClient.measureFilterFavouriteDao().selectById(session,measureFilterFavourite.getId())).isNull();
  assertThat(dbClient.propertiesDao().selectByQuery(PropertyQuery.builder().setKey(property.getKey()).build(),session)).isEmpty();
  assertThat(dbClient.roleDao().selectUserPermissions(session,user.getLogin(),null)).isEmpty();
  assertThat(dbClient.groupMembershipDao().countGroups(session,builder().login(user.getLogin()).membership(IN).build(),user.getId())).isZero();
}
