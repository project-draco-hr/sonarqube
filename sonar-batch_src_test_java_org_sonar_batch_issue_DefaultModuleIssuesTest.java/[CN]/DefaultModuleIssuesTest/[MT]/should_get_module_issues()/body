{
  DefaultIssue issueOnModule=new DefaultIssue().setKey("1").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core");
  DefaultIssue issueInModule=new DefaultIssue().setKey("2").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core:Action");
  DefaultIssue resolvedIssueInModule=new DefaultIssue().setKey("3").setRuleKey(SQUID_RULE_KEY).setComponentKey("org.apache:struts-core:Action").setResolution(Issue.RESOLUTION_FIXED);
  when(cache.all()).thenReturn(Arrays.<DefaultIssue>asList(new DefaultIssue().setKey("4").setRuleKey(SQUID_RULE_KEY).setSeverity(Severity.CRITICAL).setComponentKey("org.apache:struts"),new DefaultIssue().setKey("5").setRuleKey(SQUID_RULE_KEY).setSeverity(Severity.CRITICAL).setComponentKey("org.apache:struts:FileInRoot"),issueOnModule,issueInModule,resolvedIssueInModule));
  List<Issue> issues=Lists.newArrayList(moduleIssues.issues());
  assertThat(issues).containsOnly(issueInModule,issueOnModule);
  List<Issue> resolvedIssues=Lists.newArrayList(moduleIssues.resolvedIssues());
  assertThat(resolvedIssues).containsOnly(resolvedIssueInModule);
}
