{
  context.addExtensions(PropertyDefinition.builder(Xoo.FILE_SUFFIXES_KEY).defaultValue(Xoo.DEFAULT_FILE_SUFFIXES).name("File suffixes").description("Comma-separated list of suffixes for files to analyze. To not filter, leave the list empty.").subCategory("General").onQualifiers(Qualifiers.PROJECT).build(),Xoo.class,Xoo2.class,XooRulesDefinition.class,XooBasicProfile.class,Xoo2BasicProfile.class,XooEmptyProfile.class,XooFakeExporter.class,XooFakeImporter.class,XooFakeImporterWithMessages.class,XooScmProvider.class,XooBlameCommand.class,XooCpdMapping.class,XooTokenizer.class,HasTagSensor.class,LineMeasureSensor.class,SyntaxHighlightingSensor.class,SymbolReferencesSensor.class,ChecksSensor.class,RandomAccessSensor.class,SaveDataTwiceSensor.class,NoSonarSensor.class,OneBlockerIssuePerFileSensor.class,OneIssuePerLineSensor.class,OneDayDebtPerFileSensor.class,OneIssuePerFileSensor.class,OneIssuePerModuleSensor.class,OneIssueOnDirPerFileSensor.class,CreateIssueByInternalKeySensor.class,MultilineIssuesSensor.class,CustomMessageSensor.class,OneBugIssuePerLineSensor.class,OneVulnerabilityIssuePerModuleSensor.class,UtCoverageSensor.class,ItCoverageSensor.class,OverallCoverageSensor.class,AnalysisErrorSensor.class,TestExecutionSensor.class,CoveragePerTestSensor.class,XooProjectBuilder.class,XooPostJob.class);
  if (context.getRuntime().getProduct() != SonarProduct.SONARLINT) {
    context.addExtensions(MeasureSensor.class,DeprecatedResourceApiSensor.class);
  }
  if (context.getRuntime().getApiVersion().isGreaterThanOrEqual(Version.create(5,5))) {
    context.addExtension(CpdTokenizerSensor.class);
  }
}
