{
  double percent=this.totalTime() / 100.0;
  Map<Object,AbstractTimeProfiling> categories=Maps.newLinkedHashMap();
  categories.putAll(profilingPerPhase);
  categories.putAll(profilingPerBatchStep);
  for (  Map.Entry<Object,AbstractTimeProfiling> batchStep : categories.entrySet()) {
    props.setProperty(batchStep.getKey().toString(),"" + batchStep.getValue().totalTime());
  }
  for (  Map.Entry<Object,AbstractTimeProfiling> batchStep : sortByDescendingTotalTime(categories).entrySet()) {
    println(" * " + batchStep.getKey() + " execution time: ",percent,batchStep.getValue());
  }
  for (  Phase phase : Phases.Phase.values()) {
    if (profilingPerPhase.containsKey(phase) && getProfilingPerPhase(phase).hasItems()) {
      println("");
      println(" * " + phase + " execution time breakdown: ",getProfilingPerPhase(phase));
      getProfilingPerPhase(phase).dump();
    }
  }
}
