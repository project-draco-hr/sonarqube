{
  double percent=this.totalTime() / 100.0;
  for (  PhaseProfiling phaseProfiling : sortByDescendingTotalTime(profilingPerPhase.values())) {
    StringBuilder sb=new StringBuilder();
    sb.append(" * ").append(phaseProfiling.phase()).append(" execution time: ").append(phaseProfiling.totalTimeAsString()).append(" (").append((int)(phaseProfiling.totalTime() / percent)).append("%)");
    println(sb.toString());
  }
  for (  Phase phase : Phases.Phase.values()) {
    if (profilingPerPhase.containsKey(phase)) {
      StringBuilder sb=new StringBuilder();
      sb.append("\n * ").append(phase).append(" execution time breakdown: ").append(TimeUtils.formatDuration(getProfilingPerPhase(phase).totalTime()));
      println(sb.toString());
      getProfilingPerPhase(phase).dump();
    }
  }
}
