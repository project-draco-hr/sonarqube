{
  ComponentDto project=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(session,project);
  ComponentDto module=ComponentTesting.newModuleDto("BCDE",project).setKey("MODULE_KEY").setName("Module");
  dbClient.componentDao().insert(session,module);
  ComponentDto directory=ComponentTesting.newDirectory(module,"src/main/java/dir").setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir");
  ComponentDto file=ComponentTesting.newFileDto(module,"DEFG").setPath("src/main/java/dir/Foo.java").setName("Foo.java").setKey("MODULE_KEY:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(session,directory,file);
  session.commit();
  File reportDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(reportDir);
  writer.writeMetadata(BatchReport.Metadata.newBuilder().setRootComponentRef(1).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").addChildRef(2).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setName("Module").addChildRef(3).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(4).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").build());
  DumbComponent root=new DumbComponent(Component.Type.PROJECT,1,"ABCD",PROJECT_KEY,new DumbComponent(Component.Type.MODULE,2,"BCDE","MODULE_KEY",new DumbComponent(Component.Type.DIRECTORY,3,"CDEF","MODULE_KEY:src/main/java/dir",new DumbComponent(Component.Type.FILE,4,"DEFG","MODULE_KEY:src/main/java/dir/Foo.java"))));
  sut.execute(new ComputationContext(new BatchReportReader(reportDir),PROJECT_KEY,projectSettings,dbClient,ComponentTreeBuilders.from(root),languageRepository));
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(4);
  assertThat(dbClient.componentDao().selectNullableByKey(session,PROJECT_KEY).getId()).isEqualTo(project.getId());
  assertThat(dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY").getId()).isEqualTo(module.getId());
  assertThat(dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir").getId()).isEqualTo(directory.getId());
  assertThat(dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir/Foo.java").getId()).isEqualTo(file.getId());
  ComponentDto projectReloaded=dbClient.componentDao().selectNullableByKey(session,PROJECT_KEY);
  assertThat(projectReloaded.getId()).isEqualTo(project.getId());
  assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());
  assertThat(projectReloaded.moduleUuid()).isEqualTo(project.moduleUuid());
  assertThat(projectReloaded.moduleUuidPath()).isEqualTo(project.moduleUuidPath());
  assertThat(projectReloaded.projectUuid()).isEqualTo(project.projectUuid());
  assertThat(projectReloaded.parentProjectId()).isEqualTo(project.parentProjectId());
  ComponentDto moduleReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY");
  assertThat(moduleReloaded.getId()).isEqualTo(module.getId());
  assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());
  assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());
  assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());
  assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());
  ComponentDto directoryReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir");
  assertThat(directoryReloaded).isNotNull();
  assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());
  assertThat(directoryReloaded.moduleUuid()).isEqualTo(directory.moduleUuid());
  assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(directory.moduleUuidPath());
  assertThat(directoryReloaded.projectUuid()).isEqualTo(directory.projectUuid());
  assertThat(directoryReloaded.parentProjectId()).isEqualTo(directory.parentProjectId());
  assertThat(directoryReloaded.name()).isEqualTo(directory.name());
  assertThat(directoryReloaded.path()).isEqualTo(directory.path());
  ComponentDto fileReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir/Foo.java");
  assertThat(fileReloaded).isNotNull();
  assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());
  assertThat(fileReloaded.moduleUuid()).isEqualTo(file.moduleUuid());
  assertThat(fileReloaded.moduleUuidPath()).isEqualTo(file.moduleUuidPath());
  assertThat(fileReloaded.projectUuid()).isEqualTo(file.projectUuid());
  assertThat(fileReloaded.parentProjectId()).isEqualTo(file.parentProjectId());
  assertThat(fileReloaded.name()).isEqualTo(file.name());
  assertThat(fileReloaded.path()).isEqualTo(file.path());
}
