{
  File reportDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(reportDir);
  writer.writeMetadata(BatchReport.Metadata.newBuilder().setRootComponentRef(1).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey("PROJECT_KEY").setName("Project").setDescription("Project description").addChildRef(2).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setName("Module").setDescription("Module description").addChildRef(3).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(4).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").setLanguage("java").build());
  sut.execute(new ComputationContext(new BatchReportReader(reportDir),ComponentTesting.newProjectDto()));
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(4);
  ComponentDto project=dbClient.componentDao().selectNullableByKey(session,"PROJECT_KEY");
  assertThat(project).isNotNull();
  assertThat(project.name()).isEqualTo("Project");
  assertThat(project.description()).isEqualTo("Project description");
  assertThat(project.uuid()).isNotNull();
  assertThat(project.moduleUuid()).isNull();
  assertThat(project.moduleUuidPath()).isEqualTo("." + project.uuid() + ".");
  assertThat(project.projectUuid()).isEqualTo(project.uuid());
  assertThat(project.qualifier()).isEqualTo("TRK");
  assertThat(project.scope()).isEqualTo("PRJ");
  assertThat(project.parentProjectId()).isNull();
  ComponentDto module=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY");
  assertThat(module).isNotNull();
  assertThat(module.name()).isEqualTo("Module");
  assertThat(module.description()).isEqualTo("Module description");
  assertThat(module.uuid()).isNotNull();
  assertThat(module.moduleUuid()).isEqualTo(project.uuid());
  assertThat(module.moduleUuidPath()).isEqualTo(project.moduleUuidPath() + module.uuid() + ".");
  assertThat(module.projectUuid()).isEqualTo(project.uuid());
  assertThat(module.qualifier()).isEqualTo("BRC");
  assertThat(module.scope()).isEqualTo("PRJ");
  assertThat(module.parentProjectId()).isEqualTo(project.getId());
  ComponentDto directory=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir");
  assertThat(directory).isNotNull();
  assertThat(directory.name()).isEqualTo("src/main/java/dir");
  assertThat(directory.path()).isEqualTo("src/main/java/dir");
  assertThat(directory.uuid()).isNotNull();
  assertThat(directory.moduleUuid()).isEqualTo(module.uuid());
  assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(directory.projectUuid()).isEqualTo(project.uuid());
  assertThat(directory.qualifier()).isEqualTo("DIR");
  assertThat(directory.scope()).isEqualTo("DIR");
  assertThat(directory.parentProjectId()).isEqualTo(module.getId());
  ComponentDto file=dbClient.componentDao().selectNullableByKey(session,"MODULE_KEY:src/main/java/dir/Foo.java");
  assertThat(file).isNotNull();
  assertThat(file.name()).isEqualTo("Foo.java");
  assertThat(file.path()).isEqualTo("src/main/java/dir/Foo.java");
  assertThat(file.language()).isEqualTo("java");
  assertThat(file.uuid()).isNotNull();
  assertThat(file.moduleUuid()).isEqualTo(module.uuid());
  assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(file.projectUuid()).isEqualTo(project.uuid());
  assertThat(file.qualifier()).isEqualTo("FIL");
  assertThat(file.scope()).isEqualTo("FIL");
  assertThat(file.parentProjectId()).isEqualTo(module.getId());
}
