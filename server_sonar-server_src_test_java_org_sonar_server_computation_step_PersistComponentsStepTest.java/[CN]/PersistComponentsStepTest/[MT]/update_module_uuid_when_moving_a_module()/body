{
  computeComponentsRefCache.addComponent(1,new ComputeComponentsRefCache.ComputeComponent(PROJECT_KEY,"ABCD"));
  computeComponentsRefCache.addComponent(2,new ComputeComponentsRefCache.ComputeComponent("MODULE_A","EDCB"));
  computeComponentsRefCache.addComponent(3,new ComputeComponentsRefCache.ComputeComponent("MODULE_B","BCDE"));
  computeComponentsRefCache.addComponent(4,new ComputeComponentsRefCache.ComputeComponent("MODULE_B:src/main/java/dir","CDEF"));
  computeComponentsRefCache.addComponent(5,new ComputeComponentsRefCache.ComputeComponent("MODULE_B:src/main/java/dir/Foo.java","DEFG"));
  ComponentDto project=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(session,project);
  ComponentDto moduleA=ComponentTesting.newModuleDto("EDCB",project).setKey("MODULE_A").setName("Module A");
  ComponentDto moduleB=ComponentTesting.newModuleDto("BCDE",project).setKey("MODULE_B").setName("Module B");
  dbClient.componentDao().insert(session,moduleA,moduleB);
  ComponentDto directory=ComponentTesting.newDirectory(moduleB,"src/main/java/dir").setUuid("CDEF").setKey("MODULE_B:src/main/java/dir");
  ComponentDto file=ComponentTesting.newFileDto(moduleB,"DEFG").setPath("src/main/java/dir/Foo.java").setName("Foo.java").setKey("MODULE_B:src/main/java/dir/Foo.java");
  dbClient.componentDao().insert(session,directory,file);
  session.commit();
  File reportDir=temp.newFolder();
  BatchReportWriter writer=new BatchReportWriter(reportDir);
  writer.writeMetadata(BatchReport.Metadata.newBuilder().setRootComponentRef(1).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").addChildRef(2).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_A").setName("Module A").addChildRef(3).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.MODULE).setKey("MODULE_B").setName("Module B").addChildRef(4).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(5).build());
  writer.writeComponent(BatchReport.Component.newBuilder().setRef(5).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").build());
  sut.execute(new ComputationContext(new BatchReportReader(reportDir),PROJECT_KEY));
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(5);
  ComponentDto moduleAreloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_A");
  assertThat(moduleAreloaded).isNotNull();
  ComponentDto moduleBReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_B");
  assertThat(moduleBReloaded).isNotNull();
  assertThat(moduleBReloaded.uuid()).isEqualTo(moduleB.uuid());
  assertThat(moduleBReloaded.moduleUuid()).isEqualTo(moduleAreloaded.uuid());
  assertThat(moduleBReloaded.moduleUuidPath()).isEqualTo(moduleAreloaded.moduleUuidPath() + moduleBReloaded.uuid() + ".");
  assertThat(moduleBReloaded.projectUuid()).isEqualTo(project.uuid());
  assertThat(moduleBReloaded.parentProjectId()).isEqualTo(project.getId());
  ComponentDto directoryReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_B:src/main/java/dir");
  assertThat(directoryReloaded).isNotNull();
  assertThat(directoryReloaded.uuid()).isEqualTo(directory.uuid());
  assertThat(directoryReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());
  assertThat(directoryReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());
  assertThat(directoryReloaded.projectUuid()).isEqualTo(project.uuid());
  assertThat(directoryReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());
  ComponentDto fileReloaded=dbClient.componentDao().selectNullableByKey(session,"MODULE_B:src/main/java/dir/Foo.java");
  assertThat(fileReloaded).isNotNull();
  assertThat(fileReloaded.uuid()).isEqualTo(file.uuid());
  assertThat(fileReloaded.moduleUuid()).isEqualTo(moduleBReloaded.uuid());
  assertThat(fileReloaded.moduleUuidPath()).isEqualTo(moduleBReloaded.moduleUuidPath());
  assertThat(fileReloaded.projectUuid()).isEqualTo(project.uuid());
  assertThat(fileReloaded.parentProjectId()).isEqualTo(moduleBReloaded.getId());
}
