{
  ComponentDto project=ComponentTesting.newProjectDto("ABCD").setKey(PROJECT_KEY).setName("Project");
  dbClient.componentDao().insert(dbTester.getSession(),project);
  ComponentDto module=ComponentTesting.newModuleDto("BCDE",project).setKey("MODULE_KEY").setName("Module");
  dbClient.componentDao().insert(dbTester.getSession(),module);
  dbTester.getSession().commit();
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(1).setType(Constants.ComponentType.PROJECT).setKey(PROJECT_KEY).setName("Project").addChildRef(2).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(2).setType(Constants.ComponentType.MODULE).setKey("MODULE_KEY").setName("Module").addChildRef(3).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(3).setType(Constants.ComponentType.DIRECTORY).setPath("src/main/java/dir").addChildRef(4).build());
  reportReader.putComponent(BatchReport.Component.newBuilder().setRef(4).setType(Constants.ComponentType.FILE).setPath("src/main/java/dir/Foo.java").build());
  treeRootHolder.setRoot(DumbComponent.builder(Component.Type.PROJECT,1).setUuid("ABCD").setKey(PROJECT_KEY).addChildren(DumbComponent.builder(Component.Type.MODULE,2).setUuid("BCDE").setKey("MODULE_KEY").addChildren(DumbComponent.builder(Component.Type.DIRECTORY,3).setUuid("CDEF").setKey("MODULE_KEY:src/main/java/dir").addChildren(DumbComponent.builder(Component.Type.FILE,4).setUuid("DEFG").setKey("MODULE_KEY:src/main/java/dir/Foo.java").build()).build()).build()).build());
  sut.execute();
  assertThat(dbTester.countRowsOfTable("projects")).isEqualTo(4);
  ComponentDto projectReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),PROJECT_KEY).get();
  assertThat(projectReloaded.getId()).isEqualTo(project.getId());
  assertThat(projectReloaded.uuid()).isEqualTo(project.uuid());
  ComponentDto moduleReloaded=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY").get();
  assertThat(moduleReloaded.getId()).isEqualTo(module.getId());
  assertThat(moduleReloaded.uuid()).isEqualTo(module.uuid());
  assertThat(moduleReloaded.moduleUuid()).isEqualTo(module.moduleUuid());
  assertThat(moduleReloaded.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(moduleReloaded.projectUuid()).isEqualTo(module.projectUuid());
  assertThat(moduleReloaded.parentProjectId()).isEqualTo(module.parentProjectId());
  ComponentDto directory=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir").get();
  assertThat(directory.moduleUuid()).isEqualTo(module.uuid());
  assertThat(directory.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(directory.projectUuid()).isEqualTo(project.uuid());
  assertThat(directory.parentProjectId()).isEqualTo(module.getId());
  ComponentDto file=dbClient.componentDao().selectByKey(dbTester.getSession(),"MODULE_KEY:src/main/java/dir/Foo.java").get();
  assertThat(file.moduleUuid()).isEqualTo(module.uuid());
  assertThat(file.moduleUuidPath()).isEqualTo(module.moduleUuidPath());
  assertThat(file.projectUuid()).isEqualTo(project.uuid());
  assertThat(file.parentProjectId()).isEqualTo(module.getId());
}
