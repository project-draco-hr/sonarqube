{
  periodsHolder.setPeriods(PERIOD);
  DefaultIssue unresolved1=new DefaultIssue().setDebt(Duration.create(10));
  DefaultIssue unresolved2=new DefaultIssue().setDebt(Duration.create(30));
  DefaultIssue unresolvedWithoutDebt=new DefaultIssue().setDebt(null);
  DefaultIssue resolved=new DefaultIssue().setDebt(Duration.create(50)).setResolution(RESOLUTION_FIXED);
  when(calculator.calculate(same(unresolved1),anyList(),same(PERIOD))).thenReturn(4L);
  when(calculator.calculate(same(unresolved2),anyList(),same(PERIOD))).thenReturn(3L);
  verifyNoMoreInteractions(calculator);
  underTest.beforeComponent(file);
  underTest.onIssue(file,unresolved1);
  underTest.onIssue(file,unresolved2);
  underTest.onIssue(file,unresolvedWithoutDebt);
  underTest.onIssue(file,resolved);
  underTest.afterComponent(file);
  Measure newDebtMeasure=newDebtMeasure(file).get();
  assertThat(newDebtMeasure.getVariations().getVariation(PERIOD.getIndex())).isEqualTo(3 + 4);
  assertThat(newDebtMeasure.getVariations().hasVariation(PERIOD.getIndex() + 1)).isFalse();
}
