{
  DefaultIssue raw=new DefaultIssue().setNew(true).setKey("RAW_KEY").setCreationDate(parseDate("2015-10-01")).setUpdateDate(parseDate("2015-10-02")).setCloseDate(parseDate("2015-10-03"));
  DbIssues.Locations issueLocations=DbIssues.Locations.newBuilder().setTextRange(DbCommons.TextRange.newBuilder().setStartLine(10).setEndLine(12).build()).build();
  DefaultIssue base=new DefaultIssue().setKey("BASE_KEY").setCreationDate(parseDate("2015-01-01")).setUpdateDate(parseDate("2015-01-02")).setCloseDate(parseDate("2015-01-03")).setActionPlanKey("BASE_ACTION_PLAN_KEY").setResolution(RESOLUTION_FIXED).setStatus(STATUS_CLOSED).setSeverity(BLOCKER).setAssignee("base assignee").setAuthorLogin("base author").setTags(newArrayList("base tag")).setOnDisabledRule(true).setSelectedAt(1000L).setLine(10).setMessage("message").setGap(15d).setEffort(Duration.create(15L)).setManualSeverity(false).setLocations(issueLocations);
  when(debtCalculator.calculate(raw)).thenReturn(DEFAULT_DURATION);
  underTest.mergeExistingOpenIssue(raw,base);
  assertThat(raw.isNew()).isFalse();
  assertThat(raw.key()).isEqualTo("BASE_KEY");
  assertThat(raw.creationDate()).isEqualTo(base.creationDate());
  assertThat(raw.updateDate()).isEqualTo(base.updateDate());
  assertThat(raw.closeDate()).isEqualTo(base.closeDate());
  assertThat(raw.actionPlanKey()).isEqualTo("BASE_ACTION_PLAN_KEY");
  assertThat(raw.resolution()).isEqualTo(RESOLUTION_FIXED);
  assertThat(raw.status()).isEqualTo(STATUS_CLOSED);
  assertThat(raw.assignee()).isEqualTo("base assignee");
  assertThat(raw.authorLogin()).isEqualTo("base author");
  assertThat(raw.tags()).containsOnly("base tag");
  assertThat(raw.debt()).isEqualTo(DEFAULT_DURATION);
  assertThat(raw.isOnDisabledRule()).isTrue();
  assertThat(raw.selectedAt()).isEqualTo(1000L);
  verify(updater).setPastSeverity(raw,BLOCKER,issueChangeContext);
  verify(updater).setPastLine(raw,10);
  verify(updater).setPastMessage(raw,"message",issueChangeContext);
  verify(updater).setPastEffort(raw,Duration.create(15L),issueChangeContext);
  verify(updater).setPastLocations(raw,issueLocations);
}
