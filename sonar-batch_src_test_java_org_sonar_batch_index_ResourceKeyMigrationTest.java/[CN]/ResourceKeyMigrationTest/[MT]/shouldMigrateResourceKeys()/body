{
  setupData("shouldMigrateResourceKeys");
  Logger logger=mock(Logger.class);
  ResourceKeyMigration migration=new ResourceKeyMigration(getSession(),new PathResolver(),logger);
  migration.checkIfMigrationNeeded(multiModuleProject);
  DefaultModuleFileSystem fs=mock(DefaultModuleFileSystem.class);
  when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(baseDir,"src/main/java")));
  when(fs.testDirs()).thenReturn(Arrays.asList(new File(baseDir,"src/test/java")));
  migration.migrateIfNeeded(javaModule,javaInputFiles,fs);
  when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(baseDir,".")));
  when(fs.testDirs()).thenReturn(Arrays.asList(new File(baseDir,"test")));
  migration.migrateIfNeeded(phpModule,phpInputFiles,fs);
  verify(logger).info("Component {} changed to {}","b:org.foo.Bar","b:src/main/java/org/foo/Bar.java");
  verify(logger).warn("Directory with key b:org/foo matches both b:src/main/java/org/foo and b:src/test/java/org/foo. First match is arbitrary chosen.");
  verify(logger).info("Component {} changed to {}","b:org.foo.BarTest","b:src/test/java/org/foo/BarTest.java");
  verify(logger).info("Component {} changed to {}","b:[default].RootBar","b:src/main/java/RootBar.java");
  verify(logger).info("Component {} changed to {}","b:org/foo","b:src/main/java/org/foo");
  verify(logger).info("Component {} changed to {}","b:[root]","b:src/main/java");
  checkTables("shouldMigrateResourceKeys",new String[]{"build_date","created_at","authorization_updated_at"},"projects");
}
