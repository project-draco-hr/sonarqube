{
  when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"));
  when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setOrder(2).setCreatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler updated").setParentId(1).setCreatedAt(oldDate)));
  when(rulesXMLImporter.importXML(anyString(),any(ValidationMessages.class))).thenReturn(Collections.<RuleDebt>emptyList());
  when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setId(1).setRepositoryKey("squid").setRuleKey("UselessImportCheck").setLanguage("java").setDefaultSubCharacteristicId(2).setDefaultRemediationFunction("LINEAR").setDefaultRemediationCoefficient("2h").setSubCharacteristicId(2).setRemediationFunction("LINEAR_OFFSET").setRemediationCoefficient("2h").setRemediationOffset("15min").setCreatedAt(oldDate).setUpdatedAt(oldDate)));
  debtModelBackup.restoreFromXml("<xml/>","java");
  verify(ruleDao).selectEnablesAndNonManual(session);
  verify(ruleDao).update(ruleCaptor.capture(),eq(session));
  verifyNoMoreInteractions(ruleDao);
  verify(ruleRegistry).reindex(ruleCaptor.getAllValues(),session);
  verify(session).commit();
  RuleDto rule=ruleCaptor.getValue();
  assertThat(rule.getId()).isEqualTo(1);
  assertThat(rule.getSubCharacteristicId()).isEqualTo(-1);
  assertThat(rule.getRemediationFunction()).isNull();
  assertThat(rule.getRemediationCoefficient()).isNull();
  assertThat(rule.getRemediationOffset()).isNull();
  assertThat(rule.getUpdatedAt()).isEqualTo(now);
}
