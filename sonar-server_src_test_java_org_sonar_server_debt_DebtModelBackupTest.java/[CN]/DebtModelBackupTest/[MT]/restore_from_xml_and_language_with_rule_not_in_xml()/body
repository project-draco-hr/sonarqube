{
  when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"));
  when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setOrder(2).setCreatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler updated").setParentId(1).setCreatedAt(oldDate)));
  when(rulesXMLImporter.importXML(anyString(),any(ValidationMessages.class))).thenReturn(Collections.<RuleDebt>emptyList());
  when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setId(1).setRepositoryKey("squid").setRuleKey("UselessImportCheck").setLanguage("java").setDefaultSubCharacteristicId(2).setDefaultRemediationFunction("LINEAR").setDefaultRemediationCoefficient("2h").setSubCharacteristicId(2).setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("15min")));
  debtModelBackup.restoreFromXml("<xml/>","java");
  verify(ruleOperations).updateRule(ruleCaptor.capture(),isNull(CharacteristicDto.class),isNull(String.class),isNull(String.class),isNull(String.class),eq(now),eq(session));
  verify(ruleDao).selectEnablesAndNonManual(session);
  verify(ruleRegistry).reindex(ruleCaptor.getAllValues(),session);
  verify(session).commit();
}
