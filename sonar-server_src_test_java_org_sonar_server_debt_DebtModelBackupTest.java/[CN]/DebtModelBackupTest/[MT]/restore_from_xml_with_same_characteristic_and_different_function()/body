{
  when(characteristicsXMLImporter.importXML(anyString())).thenReturn(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"));
  when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability").setOrder(1).setCreatedAt(oldDate),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler").setParentId(1).setCreatedAt(oldDate)));
  when(rulesXMLImporter.importXML(anyString(),any(ValidationMessages.class))).thenReturn(newArrayList(new RuleDebt().setRuleKey(RuleKey.of("squid","UselessImportCheck")).setSubCharacteristicKey("COMPILER").setFunction(DebtRemediationFunction.Type.LINEAR_OFFSET).setCoefficient("12h").setOffset("11min")));
  when(ruleDao.selectEnablesAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setId(1).setRepositoryKey("squid").setRuleKey("UselessImportCheck").setDefaultSubCharacteristicId(2).setDefaultRemediationFunction("LINEAR").setDefaultRemediationCoefficient("2h").setCreatedAt(oldDate).setUpdatedAt(oldDate)));
  debtModelBackup.restoreFromXml("<xml/>");
  verify(ruleDao).selectEnablesAndNonManual(session);
  verify(ruleDao).update(ruleCaptor.capture(),eq(session));
  verifyNoMoreInteractions(ruleDao);
  verify(ruleRegistry).reindex(ruleCaptor.getAllValues(),session);
  verify(session).commit();
  RuleDto rule=ruleCaptor.getValue();
  assertThat(rule.getId()).isEqualTo(1);
  assertThat(rule.getSubCharacteristicId()).isNull();
  assertThat(rule.getRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(rule.getRemediationCoefficient()).isEqualTo("12h");
  assertThat(rule.getRemediationOffset()).isEqualTo("11min");
  assertThat(rule.getUpdatedAt()).isEqualTo(now);
}
