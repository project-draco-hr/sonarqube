{
  when(characteristicsXMLImporter.importXML(any(Reader.class))).thenReturn(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"));
  when(dao.selectEnabledCharacteristics(session)).thenReturn(newArrayList(new CharacteristicDto().setId(1).setKey("PORTABILITY").setName("Portability updated").setOrder(2),new CharacteristicDto().setId(2).setKey("COMPILER").setName("Compiler updated").setParentId(1)));
  when(ruleDao.selectEnabledAndNonManual(session)).thenReturn(newArrayList(new RuleDto().setRepositoryKey("squid").setRuleKey("NPE").setDefaultSubCharacteristicId(10).setDefaultRemediationFunction(DebtRemediationFunction.Type.LINEAR.toString()).setDefaultRemediationCoefficient("2h").setSubCharacteristicId(2).setRemediationFunction(DebtRemediationFunction.Type.LINEAR_OFFSET.toString()).setRemediationCoefficient("2h").setRemediationOffset("15min")));
  RulesDefinition.Context context=new RulesDefinition.Context();
  RulesDefinition.NewRepository repo=context.createRepository("squid","java").setName("Squid");
  RulesDefinition.NewRule newRule=repo.createRule("NPE").setName("Detect NPE").setHtmlDescription("Detect <code>java.lang.NullPointerException</code>").setSeverity(Severity.BLOCKER).setStatus(RuleStatus.BETA).setDebtSubCharacteristic("COMPILER");
  newRule.setDebtRemediationFunction(newRule.debtRemediationFunctions().linearWithOffset("4h","20min"));
  repo.done();
  when(defLoader.load()).thenReturn(context);
  debtModelBackup.reset();
  verify(dao).selectEnabledCharacteristics(session);
  verify(dao,times(2)).update(any(CharacteristicDto.class),eq(session));
  verifyNoMoreInteractions(dao);
  verify(ruleDao).selectEnabledAndNonManual(session);
  verify(ruleDao).update(eq(session),ruleCaptor.capture());
  verifyNoMoreInteractions(ruleDao);
  verify(session).commit();
  RuleDto rule=ruleCaptor.getValue();
  assertThat(rule.getDefaultSubCharacteristicId()).isEqualTo(2);
  assertThat(rule.getDefaultRemediationFunction()).isEqualTo("LINEAR_OFFSET");
  assertThat(rule.getDefaultRemediationCoefficient()).isEqualTo("4h");
  assertThat(rule.getDefaultRemediationOffset()).isEqualTo("20min");
  assertThat(rule.getUpdatedAt()).isEqualTo(now);
  assertThat(rule.getSubCharacteristicId()).isNull();
  assertThat(rule.getRemediationFunction()).isNull();
  assertThat(rule.getRemediationCoefficient()).isNull();
  assertThat(rule.getRemediationOffset()).isNull();
  assertThat(rule.getUpdatedAt()).isEqualTo(now);
}
