{
  when(dao.selectEnabledCharacteristics(session)).thenReturn(Collections.<CharacteristicDto>emptyList());
  debtModelBackup.restoreCharacteristics(new DebtModel().addRootCharacteristic(new DefaultDebtCharacteristic().setKey("PORTABILITY").setName("Portability").setOrder(1)).addSubCharacteristic(new DefaultDebtCharacteristic().setKey("COMPILER").setName("Compiler"),"PORTABILITY"),now,session);
  verify(dao,times(2)).insert(characteristicCaptor.capture(),eq(session));
  CharacteristicDto dto1=characteristicCaptor.getAllValues().get(0);
  assertThat(dto1.getId()).isEqualTo(10);
  assertThat(dto1.getKey()).isEqualTo("PORTABILITY");
  assertThat(dto1.getName()).isEqualTo("Portability");
  assertThat(dto1.getParentId()).isNull();
  assertThat(dto1.getOrder()).isEqualTo(1);
  assertThat(dto1.getCreatedAt()).isEqualTo(now);
  assertThat(dto1.getUpdatedAt()).isNull();
  CharacteristicDto dto2=characteristicCaptor.getAllValues().get(1);
  assertThat(dto2.getId()).isEqualTo(11);
  assertThat(dto2.getKey()).isEqualTo("COMPILER");
  assertThat(dto2.getName()).isEqualTo("Compiler");
  assertThat(dto2.getParentId()).isEqualTo(10);
  assertThat(dto2.getOrder()).isNull();
  assertThat(dto2.getCreatedAt()).isEqualTo(now);
  assertThat(dto2.getUpdatedAt()).isNull();
}
