{
  AppAction app=new AppAction(languages,ruleRepositories,i18n,debtModel,profileLoader,userSessionRule);
  WsTester tester=new WsTester(new RulesWebService(app));
  userSessionRule.setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);
  QualityProfileDto profile1=QProfileTesting.newXooP1();
  QualityProfileDto profile2=QProfileTesting.newXooP2().setParentKee(QProfileTesting.XOO_P1_KEY);
  when(profileLoader.findAll()).thenReturn(ImmutableList.of(profile1,profile2));
  Language xoo=mock(Language.class);
  when(xoo.getKey()).thenReturn("xoo");
  when(xoo.getName()).thenReturn("Xoo");
  Language whitespace=mock(Language.class);
  when(whitespace.getKey()).thenReturn("ws");
  when(whitespace.getName()).thenReturn("Whitespace");
  when(languages.get("xoo")).thenReturn(xoo);
  when(languages.all()).thenReturn(new Language[]{xoo,whitespace});
  RuleRepositories.Repository repo1=mock(RuleRepositories.Repository.class);
  when(repo1.key()).thenReturn("xoo");
  when(repo1.name()).thenReturn("SonarQube");
  when(repo1.language()).thenReturn("xoo");
  RuleRepositories.Repository repo2=mock(RuleRepositories.Repository.class);
  when(repo2.key()).thenReturn("squid");
  when(repo2.name()).thenReturn("SonarQube");
  when(repo2.language()).thenReturn("ws");
  when(ruleRepositories.repositories()).thenReturn(ImmutableList.of(repo1,repo2));
  when(i18n.message(isA(Locale.class),anyString(),anyString())).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[1];
    }
  }
);
  DefaultDebtCharacteristic char1=new DefaultDebtCharacteristic().setId(1).setKey("PORTABILITY").setName("Portability").setOrder(2);
  DefaultDebtCharacteristic char1sub1=new DefaultDebtCharacteristic().setId(11).setKey("LANGUAGE").setName("Language").setParentId(1);
  DefaultDebtCharacteristic char1sub2=new DefaultDebtCharacteristic().setId(12).setKey("COMPILER").setName("Compiler").setParentId(1);
  DefaultDebtCharacteristic char1sub3=new DefaultDebtCharacteristic().setId(13).setKey("HARDWARE").setName("Hardware").setParentId(1);
  DefaultDebtCharacteristic char2=new DefaultDebtCharacteristic().setId(2).setKey("REUSABILITY").setName("Reusability").setOrder(1);
  DefaultDebtCharacteristic char2sub1=new DefaultDebtCharacteristic().setId(21).setKey("MODULARITY").setName("Modularity").setParentId(2);
  when(debtModel.characteristics()).thenReturn(ImmutableList.<DebtCharacteristic>of(char1,char2));
  when(debtModel.allCharacteristics()).thenReturn(ImmutableList.<DebtCharacteristic>of(char1sub1,char1sub2,char1sub3,char1,char2sub1,char2));
  tester.newGetRequest("api/rules","app").execute().assertJson(this.getClass(),"app.json");
}
