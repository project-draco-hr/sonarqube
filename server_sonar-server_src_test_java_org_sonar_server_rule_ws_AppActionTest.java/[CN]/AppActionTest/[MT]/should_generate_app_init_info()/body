{
  AppAction app=new AppAction(languages,dbTester.getDbClient(),i18n,profileLoader,userSessionRule);
  WsTester tester=new WsTester(new RulesWs(app));
  userSessionRule.setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN);
  QualityProfileDto profile1=QProfileTesting.newXooP1();
  QualityProfileDto profile2=QProfileTesting.newXooP2().setParentKee(QProfileTesting.XOO_P1_KEY);
  when(profileLoader.findAll()).thenReturn(ImmutableList.of(profile1,profile2));
  Language xoo=mock(Language.class);
  when(xoo.getKey()).thenReturn("xoo");
  when(xoo.getName()).thenReturn("Xoo");
  Language whitespace=mock(Language.class);
  when(whitespace.getKey()).thenReturn("ws");
  when(whitespace.getName()).thenReturn("Whitespace");
  when(languages.get("xoo")).thenReturn(xoo);
  when(languages.all()).thenReturn(new Language[]{xoo,whitespace});
  RuleRepositoryDto repo1=new RuleRepositoryDto("xoo","xoo","SonarQube");
  RuleRepositoryDto repo2=new RuleRepositoryDto("squid","ws","SonarQube");
  dbTester.getDbClient().ruleRepositoryDao().insert(dbTester.getSession(),asList(repo1,repo2));
  dbTester.getSession().commit();
  when(i18n.message(isA(Locale.class),anyString(),anyString())).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[1];
    }
  }
);
  tester.newGetRequest("api/rules","app").execute().assertJson(this.getClass(),"app.json");
}
