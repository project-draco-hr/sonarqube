{
  userSessionRule.addComponentUuidPermission(UserRole.CODEVIEWER,"SonarQube","test-file-uuid");
  when(testIndex.getNullableByTestUuid(anyString())).thenReturn(Optional.<TestDoc>absent());
  when(testIndex.coveredFiles("test-uuid")).thenReturn(Arrays.asList(new CoveredFileDoc().setFileUuid(FILE_1_ID).setCoveredLines(Arrays.asList(1,2,3,4,5,6,7,8,9,10)),new CoveredFileDoc().setFileUuid(FILE_2_ID).setCoveredLines(Arrays.asList(1,2,3))));
  when(dbClient.componentDao().selectByUuids(any(DbSession.class),anyList())).thenReturn(Arrays.asList(newFileDto(newProjectDto(),FILE_1_ID).setKey("org.foo.Bar.java").setLongName("src/main/java/org/foo/Bar.java"),newFileDto(newProjectDto(),FILE_2_ID).setKey("org.foo.File.java").setLongName("src/main/java/org/foo/File.java")));
  expectedException.expect(NotFoundException.class);
  expectedException.expectMessage("Test with id 'test-uuid' is not found");
  ws.newRequest().setParam(TEST_ID,"test-uuid").execute();
}
