{
  Map<String,Object> properties=newHashMap();
  properties.put("issues","ABCD");
  properties.put("actions","assign,set_severity");
  properties.put("assign.assignee","fred");
  properties.put("set_severity.severity","MINOR");
  Action setSeverityAction=mock(Action.class);
  when(setSeverityAction.key()).thenReturn("set_severity");
  actions.add(setSeverityAction);
  when(action.supports(any(Issue.class))).thenReturn(true);
  when(action.execute(anyMap(),any(IssueBulkChangeService.ActionContext.class))).thenReturn(true);
  when(action.execute(eq(properties),any(IssueBulkChangeService.ActionContext.class))).thenReturn(true);
  when(setSeverityAction.supports(any(Issue.class))).thenReturn(true);
  when(setSeverityAction.execute(anyMap(),any(IssueBulkChangeService.ActionContext.class))).thenReturn(true);
  when(setSeverityAction.execute(eq(properties),any(IssueBulkChangeService.ActionContext.class))).thenReturn(true);
  IssueBulkChangeQuery issueBulkChangeQuery=new IssueBulkChangeQuery(properties);
  IssueBulkChangeResult result=service.execute(issueBulkChangeQuery,userSession);
  assertThat(result.issuesChanged()).hasSize(1);
  assertThat(result.issuesNotChanged()).isEmpty();
  verify(issueStorage,times(1)).save(eq(issue));
  verifyNoMoreInteractions(issueStorage);
  verify(issueNotifications,times(1)).sendChanges(eq(issue),any(IssueChangeContext.class),eq(issueQueryResult));
  verifyNoMoreInteractions(issueNotifications);
}
